 '$Revision: 30.8 $'
 '
Copyright 1992-2006 Sun Microsystems, Inc. 
See the LICENSE file for license information.
'


 '-- Module body'

 bootstrap addSlotsTo: bootstrap stub -> 'defaultBehavior' -> () From: ( | {
         'Category: Java runtime\x7fComment: Used for sequencing expressions in pep-compiled
java code.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         ; x = ( |
            | self.   "Used for sequencing expressions. Like 'a. b', but 'a; b'
            returns the first value.").
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'false' -> () From: ( | {
         'Category: Java runtime\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_asJavaBoolean = ( |
            | 
            pep javaRoot java_false).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'modules' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot'
        
         pep = bootstrap define: bootstrap stub -> 'globals' -> 'modules' -> 'pep' -> () ToBe: bootstrap addSlotsTo: (
             bootstrap remove: 'comment' From:
             bootstrap remove: 'directory' From:
             bootstrap remove: 'fileInTimeString' From:
             bootstrap remove: 'myComment' From:
             bootstrap remove: 'postFileIn' From:
             bootstrap remove: 'revision' From:
             bootstrap remove: 'subpartNames' From:
             globals modules init copy ) From: bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'modules' -> 'pep' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals modules pep.

CopyDowns:
globals modules init. copy 
SlotsToOmit: comment directory fileInTimeString myComment postFileIn revision subpartNames.

\x7fIsComplete: '.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'modules' -> 'pep' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         directory <- 'applications/pep'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'modules' -> 'pep' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (_CurrentTimeString)\x7fVisibility: public'
        
         fileInTimeString <- _CurrentTimeString.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'modules' -> 'pep' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (\'\')\x7fVisibility: private'
        
         myComment <- ''.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'modules' -> 'pep' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot'
        
         postFileIn = ( |
            | 
            pep init.
            resend.postFileIn).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'modules' -> 'pep' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (\'$Revision: 30.8 $\')\x7fVisibility: public'
        
         revision <- '$Revision: 30.8 $'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'modules' -> 'pep' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (\'pep_runtime\')\x7fVisibility: public'
        
         subpartNames <- 'pep_runtime'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> () From: ( | {
         'Category: applications\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         pep = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep.
\x7fIsComplete: '.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: misc\x7fCategory: code generators\x7fCategory: prototypes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         abstractCodeGenerator = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'abstractCodeGenerator' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep abstractCodeGenerator.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'abstractCodeGenerator' -> () From: ( | {
         'Category: var and arg slots\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         addNewLocalVar = ( |
             name <- ''.
            | 
            name: newLocalVarName.
            addLocal: name.
            name).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'abstractCodeGenerator' -> () From: ( | {
         'Category: misc\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generateFatal: err = ( |
            | 
            [java_error.  "For senders." ].
            pushSelfString: err.
            genererateImplicitSelfSend: 'java_error:').
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'abstractCodeGenerator' -> () From: ( | {
         'Category: misc\x7fComment: Generate instructions to increment a counter 
found at given path. E.g., path = \'shell b\'.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         incCounter: path = ( |
             p.
            | 
            p: path asTokensSeparatedByWhiteSpace asVector.
            pushInteger: 0.
            p size - 1 do: [|:i| generateSend: (p at: i)].
            pushInteger: 1.
            pushInteger: 0.
            p do: [|:sel| generateSend: sel].
            generateSend: '+'.
            generateSend: p last, ':'.
            pop1.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'abstractCodeGenerator' -> () From: ( | {
         'Category: misc\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         incCounterForOpcode: opc = ( |
            | 
            pushInteger: opc.
            [inc_opc: 7.  "For senders."].
            generateImplicitSelfSend: 'inc_opc:'.
            pop1.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'abstractCodeGenerator' -> () From: ( | {
         'Category: copying and initialization\x7fComment: Must call this one before using the code
generator.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         initCodeAttribute: ca = ( |
            | 
            myCodeAttribute: ca.
            tmpVarCounter:   0.
            traceVarCounter: 0.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'abstractCodeGenerator' -> () From: ( | {
         'Category: type testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isBinCodeGenerator = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'abstractCodeGenerator' -> () From: ( | {
         'Category: type testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isSrcCodeGenerator = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'abstractCodeGenerator' -> () From: ( | {
         'Category: tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         localTraceVars: n = ( |
            | 
            (vector copySize: n) mapBy: [| name <- ''. |
                name: 'trace_', traceVarCounter printString.
                addLocal: name.
                traceVarCounter: 1 + traceVarCounter.
                name.
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'abstractCodeGenerator' -> () From: ( | {
         'Category: misc\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         makeVectorCounts: v = ( |
             d <- 0.
             elements.
             elmVar.
            | 
            d: 1 + v max.
            pep assert: [d asVector asSet = v asSet.  "Make sure we use all exps."].
            elements: (vector copySize: d).
            d reverseDo: [|:i| elements at: i Put: popExp].
            pushInteger: v size.
            generateSend: pep prefix, 'makeVector'.
            [java_inst_makeVector. "For senders."].
            elements do: [|:elm. :elmNo|
                1 = (v occurrencesOf: elmNo) ifTrue: [
                    pushInteger: (v keyOf: elmNo).
                    pushExp: elm.
                    generateSend: '_At:Put:'.
                ] False: [
                    nil = elmVar ifTrue: [elmVar: addNewLocalVar].
                    pushExp: elm.
                    setLocalVarNamed: elmVar.
                    pop1.
                    v do: [|:e. :i|
                        e = elmNo ifTrue: [
                            pushInteger: i.
                            pushLocalVarNamed: elmVar.
                            generateSend: '_At:Put:'.
                        ].
                    ].
                ].
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'abstractCodeGenerator' -> () From: ( | {
         'Category: tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         methodTraceStr = ( |
            | 
            myCodeAttribute myClassFile classNameWithSlashes, '.',
            myCodeAttribute myMethod nameAsAscii,
            myCodeAttribute myMethod signatureAsAscii).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'abstractCodeGenerator' -> () From: ( | {
         'Category: var and arg slots\x7fComment: Generate a new unique name suitable for a local variable.
Do not add the name to the current block (can be done with
\'addLocal:\').\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         newLocalVarName = ( |
             name <- ''.
            | 
            name: 'd_', tmpVarCounter printString.
            tmpVarCounter: 1 + tmpVarCounter.
            name).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'abstractCodeGenerator' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'traits' -> 'clonable' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'abstractCodeGenerator' -> () From: ( | {
         'Category: constants\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         pushFloat: f = ( |
            | 
            pushConstantObject: f).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'abstractCodeGenerator' -> () From: ( | {
         'Category: misc\x7fComment: Create and push instance of specified class. 
Note:  instance is not initialized. Caller must 
arrange to call some <init> routine.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         pushInstanceOfJavaClass: classname = ( |
            | 
            pushJavaClass: classname.
            generateSend: pep prefix, 'new').
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'abstractCodeGenerator' -> () From: ( | {
         'Category: constants\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         pushInteger: i = ( |
            | 
            pushConstantObject: i).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'abstractCodeGenerator' -> () From: ( | {
         'Category: misc\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         pushJavaClass: classname = ( |
            | 
            [java_classes. "For senders."].
            generateImplicitSelfSend: 'java_classes'.
            generateSend: (pep loader classNameToSelfSlotName: classname).
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'abstractCodeGenerator' -> () From: ( | {
         'Category: constants\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         pushJavaFalse = ( |
            | 
            [java_false. "For senders."].
            generateImplicitSelfSend: 'java_false'.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'abstractCodeGenerator' -> () From: ( | {
         'Category: constants\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         pushJavaNull = ( |
            | 
            [java_null. "For senders."].
            generateImplicitSelfSend: 'java_null'.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'abstractCodeGenerator' -> () From: ( | {
         'Category: constants\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         pushJavaTrue = ( |
            | 
            [java_true. "For senders."].
            generateImplicitSelfSend: 'java_true'.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'abstractCodeGenerator' -> () From: ( | {
         'Category: set and get locals\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         pushLocalVarNumber: i = ( |
            | 
            pushLocalVarNamed: (myCodeAttribute myMethod localName: i)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'abstractCodeGenerator' -> () From: ( | {
         'Category: constants\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         pushSelfString: str = ( |
            | 
            pushConstantObject: str canonicalize).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'abstractCodeGenerator' -> () From: ( | {
         'Category: set and get locals\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         setLocalVarNumber: i = ( |
            | setLocalVarNamed: (myCodeAttribute myMethod localName: i)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'abstractCodeGenerator' -> () From: ( | {
         'Category: set and get locals\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         setNewLocalVarAndPop = ( |
             name <- ''.
            | 
            name: addNewLocalVar.
            setLocalVarNamed: name.
            pop1.
            name).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'abstractCodeGenerator' -> () From: ( | {
         'Category: tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         traceExpStack = ( |
             sh <- 0.
             v.
            | 
            sh: stackSize.
            v: (localTraceVars: sh).
            popCount: sh TransferToLocals: v.
            sh do: [|:i|
                pushLocalVarNamed: (v at: i).
                [trace_exp: self.  "For senders."].
                generateImplicitSelfSend: 'trace_exp:'. 
                pop1.
            ].
            [trace_exps.  "For senders."].
            generateImplicitSelfSend: 'trace_exps'.
            pop1.
            "Now reload stack."
            sh do: [|:i| 
                generateImplicitSelfSend: (v at: i).
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'abstractCodeGenerator' -> () From: ( | {
         'Category: tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         traceMethodEntry = ( |
            | 
            [trace_method_entry: nil. "For senders."].
            traceSelector: 'trace_method_entry:').
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'abstractCodeGenerator' -> () From: ( | {
         'Category: tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         traceMethodExit = ( |
            | 
            [trace_method_exit: nil. "For senders."].
            traceSelector: 'trace_method_exit:').
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'abstractCodeGenerator' -> () From: ( | {
         'Category: tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         traceSelector: sel = ( |
            | 
            pushSelfString: methodTraceStr.
            generateImplicitSelfSend: sel.
            pop1).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: mixins\x7fComment: Mixin to interpret \'access_flags\'.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         access_flagsMixin = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'access_flagsMixin' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep access_flagsMixin.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'access_flagsMixin' -> () From: ( | {
         'Category: constantDefs\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         acc_abstract = 1024.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'access_flagsMixin' -> () From: ( | {
         'Category: constantDefs\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         acc_final = 16.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'access_flagsMixin' -> () From: ( | {
         'Category: constantDefs\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         acc_interface = 512.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'access_flagsMixin' -> () From: ( | {
         'Category: constantDefs\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         acc_native = 256.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'access_flagsMixin' -> () From: ( | {
         'Category: constantDefs\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         acc_private = 2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'access_flagsMixin' -> () From: ( | {
         'Category: constantDefs\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         acc_protected = 4.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'access_flagsMixin' -> () From: ( | {
         'Category: constantDefs\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         acc_public = 1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'access_flagsMixin' -> () From: ( | {
         'Category: constantDefs\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         acc_static = 8.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'access_flagsMixin' -> () From: ( | {
         'Category: constantDefs\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         acc_synchronized = 32.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'access_flagsMixin' -> () From: ( | {
         'Category: constantDefs\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         acc_transient = 128.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'access_flagsMixin' -> () From: ( | {
         'Category: constantDefs\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         acc_volatile = 64.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'access_flagsMixin' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         checkFlagsIn: maxFlags = ( |
            | 
            pep debug ifTrue: [
                0 != (16rff && maxFlags complement && access_flags) ifTrue: [
                   | a <- 0. e <- ''. |
                    "Compute names of flags that should not be set."
                    a: access_flags.   "Save."
                    access_flags: maxFlags complement && access_flags.
                    doSetFlagNames: [|:f| 
                        '' != e ifTrue: [e: e, ', '].
                        e: e, f, ', '.
                    ].
                    access_flags: a.
                    error: 'excess flags set: ', e.
                ].
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'access_flagsMixin' -> () From: ( | {
         'Comment: Iterate \'blk\' over the names of the flags set in \'flags\'.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         doSetFlagNames: blk = ( |
            | 
            hasPublicFlag       ifTrue: [blk value: 'ACC_PUBLIC'      ].
            hasPrivateFlag      ifTrue: [blk value: 'ACC_PRIVATE'     ].
            hasProtectedFlag    ifTrue: [blk value: 'ACC_PROTECTED'   ].
            hasStaticFlag       ifTrue: [blk value: 'ACC_STATIC'      ].
            hasFinalFlag        ifTrue: [blk value: 'ACC_FINAL'       ].
            hasSynchronizedFlag ifTrue: [blk value: 'ACC_SYNCHRONIZED'].
            hasVolatileFlag     ifTrue: [blk value: 'ACC_VOLATILE'    ].
            hasTransientFlag    ifTrue: [blk value: 'ACC_TRANSIENT'   ].
            hasNativeFlag       ifTrue: [blk value: 'ACC_NATIVE'      ].
            hasInterfaceFlag    ifTrue: [blk value: 'ACC_INTERFACE'   ].
            hasAbstractFlag     ifTrue: [blk value: 'ACC_ABSTRACT'    ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'access_flagsMixin' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         doSetFlagNamesLegible: blk = ( |
            | 
            doSetFlagNames: [|:fn|
                blk value: (fn copyFrom: 'ACC_' size) uncapitalizeAll.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'access_flagsMixin' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         dumpFlagsOnFile: file = ( |
            | doSetFlagNamesLegible: [|:fn| file write: fn, ' ']).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'access_flagsMixin' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         hasAbstractFlag = ( |
            | 
            0 != (acc_abstract && access_flags)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'access_flagsMixin' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         hasFinalFlag = ( |
            | 
            0 != (acc_final && access_flags)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'access_flagsMixin' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         hasInterfaceFlag = ( |
            | 
            0 != (acc_interface && access_flags)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'access_flagsMixin' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         hasNativeFlag = ( |
            | 
            0 != (acc_native && access_flags)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'access_flagsMixin' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         hasPrivateFlag = ( |
            | 
            0 != (acc_private && access_flags)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'access_flagsMixin' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         hasProtectedFlag = ( |
            | 
            0 != (acc_protected && access_flags)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'access_flagsMixin' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         hasPublicFlag = ( |
            | 
            0 != (acc_public && access_flags)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'access_flagsMixin' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         hasStaticFlag = ( |
            | 
            0 != (acc_static && access_flags)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'access_flagsMixin' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         hasSynchronizedFlag = ( |
            | 
            0 != (acc_synchronized && access_flags)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'access_flagsMixin' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         hasTransientFlag = ( |
            | 
            0 != (acc_transient && access_flags)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'access_flagsMixin' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         hasVolatileFlag = ( |
            | 
            0 != (acc_volatile && access_flags)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: type testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         addNegativeTypeTestSel: ttSel = ( |
            | 
            ((reflect: pep javaRoot type_testing) includes: ttSel) ifFalse: [
                addNegativeTypeTestsSel: (vector copySize: 1 FillingWith: ttSel).
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: type testing\x7fComment: Complements the \'addTypeTest\' method in \'classFile\'.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         addNegativeTypeTestsSel: ttSels = ( |
            | 
            lockNoNLRDo: [| ttMir. filt |
                ttMir: (reflect: pep javaRoot type_testing).
                filt: sequence copy.
                filt: (ttSels filterBy: [|:ttSel| (ttMir includesKey: ttSel) not]
                                  Into: sequence copy).
                filt isEmpty ifFalse: [| tt |
                    tt: (getTypeTesters: filt asVector
                                  Value: false
                               Category: nil).
                    ttMir frozenDefine: (ttMir copyAddSlots: tt).
                ].
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: type testing\x7fComment: Functionally add the type test slots with the
given selectors to mir. Also add the negative 
type tests at the root.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         addTypeTesters: classNames To: mir = ( |
             ttSels.
            | 
            ttSels: classNames copy.
            ttSels mapBy: [|:cn| classNameToTypeTestSelector: cn].
            addNegativeTypeTestsSel: ttSels.
            mir copyAddSlots: (getTypeTesters: ttSels
                                        Value: true
                                     Category: 'helpers')).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: debugging and options\x7fCategory: flags and params\x7fCategory: branches\x7fComment: If true, Pep will perform enough control
flow analysis to determine if each dup2 
instruction copies one 64 bit value or 
two 32 bit values. Both cases are legal
according to the Java VM Spec. This analysis
slows down Pep.

Why is it optional, when correctness 
depends on it? An inspection of the source
of javac (version JDK 1.0.2) shows that it
will never generate dup2 instructions that
manipulate 32 bit values. This may change in
the future, of course.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         analyzeForDup2 = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: mixins\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         arrayBuildMixin = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep arrayBuildMixin.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> () From: ( | {
         'Category: building array classes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         arrayClassSlotsForTracing = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'arrayClassSlotsForTracing' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep arrayBuildMixin arrayClassSlotsForTracing.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'arrayClassSlotsForTracing' -> () From: ( | {
         'Category: tracing\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (-1)\x7fVisibility: public'
        
         arrayclass_id <- -1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> () From: ( | {
         'Category: building array classes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         array_class_name: d = ( |
            | 
            ('' copySize: d FillingWith: '['), 'L', class_name, ';').
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> () From: ( | {
         'Category: building array classes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         array_master: d = ( |
             cn.
            | 
            1 < d ifTrue: [^ array_masters objectArray].
            cn: class_name.
            "Note: It is not a mistake that a boolean array is created using the
             byte array prototype. The regular Java VM does the same according to
             an email from Lindholm, March 13, 96. Consequently, we must follow
             suit since the compiler emits byte array operations for manipulating
             boolean arrays!                                         Ole Agesen."
            'B' = cn ifTrue: [^ array_masters byteArray].
            'Z' = cn ifTrue: [^ array_masters byteArray].
            'I' = cn ifTrue: [^ array_masters intArray].
            'J' = cn ifTrue: [^ array_masters longArray].
            'S' = cn ifTrue: [^ array_masters shortArray].
            'C' = cn ifTrue: [^ array_masters charArray].
            'D' = cn ifTrue: [^ array_masters doubleArray].
            'F' = cn ifTrue: [^ array_masters floatArray].
            array_masters objectArray.   "All other cases get object array.").
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> () From: ( | {
         'Comment: Skeletons and traits for the arrays.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         array_masters = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep arrayBuildMixin array_masters.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters' -> () From: ( | {
         'Comment: This prototype is not used. See comment in 
java_inst_newarray_byte: method.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         booleanArray = bootstrap define: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters' -> 'booleanArray' -> () ToBe: bootstrap addSlotsTo: (
             bootstrap remove: 'parent' From:
             globals byteVector copy ) From: bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters' -> 'booleanArray' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep arrayBuildMixin array_masters booleanArray.

CopyDowns:
globals byteVector. copy 
SlotsToOmit: parent.

'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         traits_byteVectorBasedArray = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters' -> 'traits_byteVectorBasedArray' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep arrayBuildMixin array_masters traits_byteVectorBasedArray.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters' -> 'booleanArray' -> 'my_class' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         array_parent* = bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters' -> 'traits_byteVectorBasedArray' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters' -> 'booleanArray' -> 'my_class' -> () From: ( | {
         'Comment: This slot will be modified to contain a reference
to the class that this array\'s elements are instances
of.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         elem_class = bootstrap stub -> 'globals' -> 'nil' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters' -> 'booleanArray' -> 'my_class' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_inst_filler = ( |
            | 
            java_zero_boolean).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters' -> 'booleanArray' -> 'my_class' -> () From: ( | {
         'Comment: This slot corresponds to the \'obj_flags\' slot
defined by the Java VM.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         obj_flags = 'T_BOOLEAN'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         byteArray = bootstrap define: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters' -> 'byteArray' -> () ToBe: bootstrap addSlotsTo: (
             bootstrap remove: 'parent' From:
             globals byteVector copy ) From: bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters' -> 'byteArray' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep arrayBuildMixin array_masters byteArray.

CopyDowns:
globals byteVector. copy 
SlotsToOmit: parent.

'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters' -> 'byteArray' -> 'my_class' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         array_parent* = bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters' -> 'traits_byteVectorBasedArray' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters' -> 'byteArray' -> 'my_class' -> () From: ( | {
         'Comment: This slot will be modified to contain a reference
to the class that this array\'s elements are instances
of.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         elem_class = bootstrap stub -> 'globals' -> 'nil' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters' -> 'byteArray' -> 'my_class' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_baload: index = ( |
             res <- 0.
            | 
            "Java bytes are signed, Self bytes are not."
            res: (java_inst_at: index).
            128 > res ifTrue: [res]
                       False: [-256 + res]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters' -> 'byteArray' -> 'my_class' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_bastore: index With: int = ( |
            | 
            "Java bytes are signed, Self bytes are not."
            java_inst_at: index 
                     Put: (0 <= int ifTrue: [int]
                                     False: [256 + int])).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters' -> 'byteArray' -> 'my_class' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_inst_filler = ( |
            | java_zero_byte).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters' -> 'byteArray' -> 'my_class' -> () From: ( | {
         'Comment: This slot corresponds to the \'obj_flags\' slot
defined by the Java VM.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         obj_flags = 'T_BYTE'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         charArray = bootstrap define: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'charArray') -> () ToBe: bootstrap addSlotsTo: (
             bootstrap remove: 'parent' From:
             globals vector copy ) From: bootstrap setObjectAnnotationOf: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'charArray') -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep arrayBuildMixin array_masters charArray.

CopyDowns:
globals vector. copy 
SlotsToOmit: parent.

'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         traits_vectorBasedArray = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters' -> 'traits_vectorBasedArray' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep arrayBuildMixin array_masters traits_vectorBasedArray.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'charArray') -> 'my_class' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         array_parent* = bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters' -> 'traits_vectorBasedArray' -> ().
        } | ) 

 bootstrap addSlotsTo: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'charArray') -> 'my_class' -> () From: ( | {
         'Comment: This slot will be modified to contain a reference
to the class that this array\'s elements are instances
of.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         elem_class = bootstrap stub -> 'globals' -> 'nil' -> ().
        } | ) 

 bootstrap addSlotsTo: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'charArray') -> 'my_class' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_caload: index = ( |
            | 
            java_inst_at: index).
        } | ) 

 bootstrap addSlotsTo: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'charArray') -> 'my_class' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_castore: index With: value = ( |
            | 
            java_inst_at: index Put: value && 16rffff).
        } | ) 

 bootstrap addSlotsTo: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'charArray') -> 'my_class' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_inst_filler = ( |
            | 
            java_zero_char).
        } | ) 

 bootstrap addSlotsTo: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'charArray') -> 'my_class' -> () From: ( | {
         'Comment: This slot corresponds to the \'obj_flags\' slot
defined by the Java VM.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         obj_flags = 'T_CHAR'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         doubleArray = bootstrap define: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'doubleArray') -> () ToBe: bootstrap addSlotsTo: (
             bootstrap remove: 'parent' From:
             globals vector copy ) From: bootstrap setObjectAnnotationOf: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'doubleArray') -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep arrayBuildMixin array_masters doubleArray.

CopyDowns:
globals vector. copy 
SlotsToOmit: parent.

'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'doubleArray') -> 'my_class' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         array_parent* = bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters' -> 'traits_vectorBasedArray' -> ().
        } | ) 

 bootstrap addSlotsTo: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'doubleArray') -> 'my_class' -> () From: ( | {
         'Comment: This slot will be modified to contain a reference
to the class that this array\'s elements are instances
of.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         elem_class = bootstrap stub -> 'globals' -> 'nil' -> ().
        } | ) 

 bootstrap addSlotsTo: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'doubleArray') -> 'my_class' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_daload: index = ( |
            | 
            java_inst_at: index).
        } | ) 

 bootstrap addSlotsTo: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'doubleArray') -> 'my_class' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_dastore: index With: value = ( |
            | 
            java_inst_at: index Put: value).
        } | ) 

 bootstrap addSlotsTo: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'doubleArray') -> 'my_class' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_inst_filler = ( |
            | 
            java_zero_double).
        } | ) 

 bootstrap addSlotsTo: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'doubleArray') -> 'my_class' -> () From: ( | {
         'Comment: This slot corresponds to the \'obj_flags\' slot
defined by the Java VM.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         obj_flags = 'T_DOUBLE'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         floatArray = bootstrap define: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'floatArray') -> () ToBe: bootstrap addSlotsTo: (
             bootstrap remove: 'parent' From:
             globals vector copy ) From: bootstrap setObjectAnnotationOf: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'floatArray') -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep arrayBuildMixin array_masters floatArray.

CopyDowns:
globals vector. copy 
SlotsToOmit: parent.

'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'floatArray') -> 'my_class' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         array_parent* = bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters' -> 'traits_vectorBasedArray' -> ().
        } | ) 

 bootstrap addSlotsTo: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'floatArray') -> 'my_class' -> () From: ( | {
         'Comment: This slot will be modified to contain a reference
to the class that this array\'s elements are instances
of.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         elem_class = bootstrap stub -> 'globals' -> 'nil' -> ().
        } | ) 

 bootstrap addSlotsTo: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'floatArray') -> 'my_class' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_faload: index = ( |
            | 
            java_inst_at: index).
        } | ) 

 bootstrap addSlotsTo: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'floatArray') -> 'my_class' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_fastore: index With: value = ( |
            | 
            java_inst_at: index Put: value).
        } | ) 

 bootstrap addSlotsTo: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'floatArray') -> 'my_class' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_inst_filler = ( |
            | 
            java_zero_float).
        } | ) 

 bootstrap addSlotsTo: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'floatArray') -> 'my_class' -> () From: ( | {
         'Comment: This slot corresponds to the \'obj_flags\' slot
defined by the Java VM.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         obj_flags = 'T_FLOAT'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         intArray = bootstrap define: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'intArray') -> () ToBe: bootstrap addSlotsTo: (
             bootstrap remove: 'parent' From:
             globals vector copy ) From: bootstrap setObjectAnnotationOf: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'intArray') -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep arrayBuildMixin array_masters intArray.

CopyDowns:
globals vector. copy 
SlotsToOmit: parent.

'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'intArray') -> 'my_class' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         array_parent* = bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters' -> 'traits_vectorBasedArray' -> ().
        } | ) 

 bootstrap addSlotsTo: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'intArray') -> 'my_class' -> () From: ( | {
         'Comment: This slot will be modified to contain a reference
to the class that this array\'s elements are instances
of.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         elem_class = bootstrap stub -> 'globals' -> 'nil' -> ().
        } | ) 

 bootstrap addSlotsTo: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'intArray') -> 'my_class' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_inst_filler = ( |
            | 
            java_zero_int).
        } | ) 

 bootstrap addSlotsTo: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'intArray') -> 'my_class' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_iaload: index = ( |
            | 
            java_inst_at: index).
        } | ) 

 bootstrap addSlotsTo: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'intArray') -> 'my_class' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_iastore: index With: value = ( |
            | 
            java_inst_at: index Put: value).
        } | ) 

 bootstrap addSlotsTo: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'intArray') -> 'my_class' -> () From: ( | {
         'Comment: This slot corresponds to the \'obj_flags\' slot
defined by the Java VM.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         obj_flags = 'T_INT'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         longArray = bootstrap define: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'longArray') -> () ToBe: bootstrap addSlotsTo: (
             bootstrap remove: 'parent' From:
             globals vector copy ) From: bootstrap setObjectAnnotationOf: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'longArray') -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep arrayBuildMixin array_masters longArray.

CopyDowns:
globals vector. copy 
SlotsToOmit: parent.

'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'longArray') -> 'my_class' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         array_parent* = bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters' -> 'traits_vectorBasedArray' -> ().
        } | ) 

 bootstrap addSlotsTo: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'longArray') -> 'my_class' -> () From: ( | {
         'Comment: This slot will be modified to contain a reference
to the class that this array\'s elements are instances
of.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         elem_class = bootstrap stub -> 'globals' -> 'nil' -> ().
        } | ) 

 bootstrap addSlotsTo: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'longArray') -> 'my_class' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_inst_filler = ( |
            | 
            java_zero_long).
        } | ) 

 bootstrap addSlotsTo: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'longArray') -> 'my_class' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_laload: index = ( |
            | 
            java_inst_at: index).
        } | ) 

 bootstrap addSlotsTo: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'longArray') -> 'my_class' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_lastore: index With: value = ( |
            | 
            java_inst_at: index Put: value).
        } | ) 

 bootstrap addSlotsTo: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'longArray') -> 'my_class' -> () From: ( | {
         'Comment: This slot corresponds to the \'obj_flags\' slot
defined by the Java VM.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         obj_flags = 'T_LONG'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         objectArray = bootstrap define: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'objectArray') -> () ToBe: bootstrap addSlotsTo: (
             bootstrap remove: 'parent' From:
             globals vector copy ) From: bootstrap setObjectAnnotationOf: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'objectArray') -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep arrayBuildMixin array_masters objectArray.

CopyDowns:
globals vector. copy 
SlotsToOmit: parent.

'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'objectArray') -> 'my_class' -> () From: ( | {
         'Comment: This slot will be modified to contain a reference to
the class that this array\'s elements are instances of.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         elem_class = bootstrap stub -> 'globals' -> 'nil' -> ().
        } | ) 

 bootstrap addSlotsTo: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'objectArray') -> 'my_class' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         objectArray_parent* = bootstrap setObjectAnnotationOf: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'objectArray') -> 'my_class' -> 'objectArray_parent' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep arrayBuildMixin array_masters objectArray my_class objectArray_parent.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'objectArray') -> 'my_class' -> 'objectArray_parent' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         array_parent* = bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters' -> 'traits_vectorBasedArray' -> ().
        } | ) 

 bootstrap addSlotsTo: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'objectArray') -> 'my_class' -> 'objectArray_parent' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_aaload: index = ( |
            | 
            java_inst_at: index).
        } | ) 

 bootstrap addSlotsTo: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'objectArray') -> 'my_class' -> 'objectArray_parent' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_aastore: index With: value = ( |
            | 
            java_inst_at: index Put: value).
        } | ) 

 bootstrap addSlotsTo: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'objectArray') -> 'my_class' -> 'objectArray_parent' -> () From: ( | {
         'Comment: This method implements part of the native array copy method.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_arraycopyPos: dstPos SrcArray: srcArray Pos: srcPos Len: length = ( |
            | 
            checkObjFlags: srcArray.
            "Note: when generating traces, we never use the rangeCopy operation; we
             want the trace info generated by the element-by-element copying."
            ok_to_use_rangeCopy && 
            [(elem_class _Eq: srcArray elem_class) ||
             [elem_class _Eq: java_classes class_java_lang_Object]] ifTrue: [
                "No need to check types; just invoke range copy method."
                java_inst_copyRangeDstPos: dstPos SrcArray: srcArray SrcPos: srcPos Len: length.
            ] False: [
                "We only get here for non-primitive (int/bool/byte/etc) arrays.
                 Need to check the types of (non-null) objects being copied. But first be sure
                 to mimic the exact error behavior of the Java VM: check if length < 0."
                0 pep assert: ['T_CLASS' = obj_flags].
                (java_zero_int java_inst_if_icmpgt: length) ifTrue: [
                    java_inst_athrow: java_classes class_java_lang_ArrayIndexOutOfBoundsException.
                ].
                length do: [|:i. e|
                    e: (srcArray java_inst_at: i + srcPos).
                    e java_inst_ifnonnull && [(ok_to_store: e) not] ifTrue: [
                        java_inst_athrow: java_classes class_java_lang_ArrayStoreException.
                    ].
                    java_inst_at: i + dstPos Put: e.
                ].
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'objectArray') -> 'my_class' -> 'objectArray_parent' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_inst_filler = ( |
            | 
            java_null).
        } | ) 

 bootstrap addSlotsTo: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'objectArray') -> 'my_class' -> 'objectArray_parent' -> () From: ( | {
         'Comment: This slot corresponds to the \'obj_flags\' slot
defined by the Java VM.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         obj_flags = 'T_CLASS'.
        } | ) 

 bootstrap addSlotsTo: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'objectArray') -> 'my_class' -> 'objectArray_parent' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         ok_to_use_rangeCopy = ( |
            | 
            0 pep traceMutator not || 
            ['T_CLASS' != obj_flags].  "OK to use range-copy for non-reference arrays.").
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         shortArray = bootstrap define: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'shortArray') -> () ToBe: bootstrap addSlotsTo: (
             bootstrap remove: 'parent' From:
             globals vector copy ) From: bootstrap setObjectAnnotationOf: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'shortArray') -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep arrayBuildMixin array_masters shortArray.

CopyDowns:
globals vector. copy 
SlotsToOmit: parent.

'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'shortArray') -> 'my_class' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         array_parent* = bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters' -> 'traits_vectorBasedArray' -> ().
        } | ) 

 bootstrap addSlotsTo: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'shortArray') -> 'my_class' -> () From: ( | {
         'Comment: This slot will be modified to contain a reference
to the class that this array\'s elements are instances
of.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         elem_class = bootstrap stub -> 'globals' -> 'nil' -> ().
        } | ) 

 bootstrap addSlotsTo: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'shortArray') -> 'my_class' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_inst_filler = ( |
            | 
            java_zero_short).
        } | ) 

 bootstrap addSlotsTo: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'shortArray') -> 'my_class' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_saload: index = ( |
            | 
            java_inst_at: index).
        } | ) 

 bootstrap addSlotsTo: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'shortArray') -> 'my_class' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_sastore: index With: value = ( |
            | 
            java_inst_at: index Put: value java_inst_i2s).
        } | ) 

 bootstrap addSlotsTo: ((bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters') \/-> 'shortArray') -> 'my_class' -> () From: ( | {
         'Comment: This slot corresponds to the \'obj_flags\' slot
defined by the Java VM.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         obj_flags = 'T_SHORT'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         traits_allArrays = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters' -> 'traits_allArrays' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep arrayBuildMixin array_masters traits_allArrays.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters' -> 'traits_allArrays' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         checkObjFlags: srcArray = ( |
            | 
            "Subtle point: the send 'srcArray obj_flags' will throw a null pointer exception
             if srcArray is null! This is excatly what we want, since the Java VM throws
             a null pointer exception in this case."
            obj_flags != srcArray obj_flags ifTrue: [
                java_inst_athrow: java_classes class_java_lang_ArrayStoreException.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters' -> 'traits_allArrays' -> () From: ( | {
         'Comment: Used to implement the native array copy method.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_arraycopyPos: dstPos SrcArray: srcArray Pos: srcPos Len: length = ( |
            | 
            checkObjFlags: srcArray.

            "We can invoke the (appropriate) range copy primitive safely, 
             since no type checking and/or coercion needs to be done."
            java_inst_copyRangeDstPos: dstPos SrcArray: srcArray SrcPos: srcPos Len: length).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters' -> 'traits_allArrays' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_inst_copyRangeDstPos: dstPos SrcArray: srcArray SrcPos: srcPos Len: len = ( |
            | 
            java_inst_copyRangeDstPos: dstPos SrcArray: srcArray SrcPos: srcPos Len: len IfFail: [|:e|
                "OK, so we proceeding head-first into the primitive, hoping it would succeed.
                 It didn't, so now we need to figure out what went wrong. We must carefully
                 throw the same exception as the Java virtual machine would have thrown."
                srcArray java_inst_athrowIfNull.  "Will actually never fail, but hey."
                java_inst_handlePrimError: e.
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters' -> 'traits_allArrays' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_inst_handlePrimError: e = ( |
            | 
            'badIndexError' = e ifTrue: [
                java_inst_athrow: java_classes
                    class_java_lang_ArrayIndexOutOfBoundsException.
            ] False: [
                java_error: 'unexpected array error: ', e.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters' -> 'traits_allArrays' -> () From: ( | {
         'Category: array instantiation\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_newArraySize: n1 Size: n2 = ( |
            | 
            new_array_size: n2 MapBy: [prev_array java_inst_newArraySize: n1]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters' -> 'traits_allArrays' -> () From: ( | {
         'Category: array instantiation\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_newArraySize: n1 Size: n2 Size: n3 = ( |
            | 
            new_array_size: n3 MapBy: [prev_array java_inst_newArraySize: n1 Size: n2]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters' -> 'traits_allArrays' -> () From: ( | {
         'Category: array instantiation\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_newArraySize: n1 Size: n2 Size: n3 Size: n4 = ( |
            | 
            new_array_size: n4 MapBy: [prev_array java_inst_newArraySize: n1 Size: n2 Size: n3]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters' -> 'traits_allArrays' -> () From: ( | {
         'Category: array instantiation\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_newArraySize: n1 Size: n2 Size: n3 Size: n4 Size: n5 = ( |
            | 
            new_array_size: n5 MapBy: [
                prev_array java_inst_newArraySize: n1 Size: n2 Size: n3 Size: n4.
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters' -> 'traits_allArrays' -> () From: ( | {
         'Category: array instantiation\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         new_array_size: n MapBy: mapBlk = ( |
             res.
            | 
            res: (java_inst_newArraySize: n).
            n do: [|:i| res java_inst_at: i Put: mapBlk value].
            res).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: misc\x7fCategory: roots\x7fComment: The root of the hierarchy of java classes.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         javaRootClass = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep javaRootClass.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> 'array_masters' -> 'traits_allArrays' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (pep javaRootClass)\x7fVisibility: private'
        
         super_class* = bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> () From: ( | {
         'Category: building array classes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         array_name: d = ( |
            | 
            0 pep assert: [0 < d].
            'array_', d printString).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> () From: ( | {
         'Category: type testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         array_type_test_class_names: d = ( |
             s.
            | 
            "Must collect from all superclasses to get right semantics.
             The problem is that the array's superclass is Object, but it
             is still the case that 'subclass[] instanceof superclass[]'."
            s: 0 sequence copy.
            base_superclasses_do: [|:cl. ttnames|
                s addAll: cl type_test_class_names
            ].
            s asVector mapBy: [|:bcn|
                type_test_class_name: bcn Depth: d.
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> () From: ( | {
         'Category: type testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         base_superclasses_do: blk = ( |
             clMir.
             stopMir.
            | 
            stopMir: (0 reflect: 0 pep javaRootClass).
            clMir:   (0 reflect: self).   "Start in the current class."
            [clMir != stopMir] whileTrue: [
                blk value: clMir reflectee.
                "Note: fake classes have no superclass."
                clMir: (clMir at: 'super_class' IfAbsent: [^ self]) contents.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> () From: ( | {
         'Category: type testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         elm_type_test_selector: d = ( |
            | 
            0 pep classNameToTypeTestSelector: (type_test_class_name: class_name
                                                               Depth: d - 1)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> () From: ( | {
         'Category: type testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         elm_type_tester_method: d = ( |
             str <- ''.
            | 
            [ok_to_store: nil.   "For senders."].
            str: '(| ok_to_store: elm = ( elm ',
                       (elm_type_test_selector: d), ' ) |)'.
            str eval).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> () From: ( | {
         'Category: building array classes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         get_array_mir: d = ( |
            | 
            0 = d ifTrue: [(0 reflect: 0 nil)]
                   False: [((0 reflect: self) at: (array_name: d)) contents]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> () From: ( | {
         'Category: building array classes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         get_element_class: d = ( |
            | 
            1 = d ifTrue: [self]  "The class itself, in case of one-dim. arrays."
                   False: [(get_array_mir: d - 1) reflectee my_class]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> () From: ( | {
         'Category: building array classes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         make_array_of_dim: d = ( |
             arrayClassMir.
             arrayMaster.
             arrayProtoMir.
            | 
            [my_class. proto_instance. this_class. elem_class. prev_array. "For senders."].
            arrayMaster: (array_master: d).
            arrayClassMir: (0 reflect: arrayMaster my_class).
            arrayClassMir: (arrayClassMir copyAddSlots: (universal_class_slots: d)).  "Note: copyAdd... preserves original!"
            arrayClassMir: (arrayClassMir copyAt: 'elem_class'
                                     PutContents: (0 reflect: (get_element_class: d))).
            arrayClassMir: (arrayClassMir copyAt: 'prev_array'
                                     PutContents: (get_array_mir: d - 1)).
            arrayClassMir: (arrayClassMir copyAddSlots: (0 reflect: (elm_type_tester_method: d))).
            arrayClassMir frozenDefine: (arrayClassMir copyAt: 'this_class'
                                                  PutContents: arrayClassMir).  "Do last to preserve circularity."
            arrayProtoMir: (0 reflect: arrayMaster).
            arrayProtoMir: (arrayProtoMir copyAt: 'my_class' PutContents: arrayClassMir).
            0 pep ifTraceMutator: [|ac|
                arrayProtoMir: (arrayProtoMir copyAddSlots: (0 reflect: 0 pep classFile instanceSlotsForTracing)).
                ac: arrayClassMir reflectee.
                ac trace_no_of_refs: 0.
                ac trace_no_of_static_refs: 0.
                ac trace_no_of_vals: 1.  "For the length."
                0 pep mutatorTracer defarrayclass: ac Baseclass: self Dimensions: d.
            ].
            arrayProtoMir).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> () From: ( | {
         'Category: building array classes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         make_arrays_to_dim: d = ( |
             res.
            | 
            my_lock protectNoNLR: [| classMir. |    
                classMir: (0 reflect: self).
                1 + arrays_done_to_dim to: d Do: [|:d1. name <- ''. am. m. |
                    name: (array_name: d1).
                    am: (make_array_of_dim: d1).
                    m: (classMir copyAt: name PutContents: am).
                    classMir frozenDefine: m.
                    res: am reflectee.
                ].
                arrays_done_to_dim: d.
            ].
            res.   "Will have done at least one, so nil != res now.").
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> () From: ( | {
         'Category: type testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         type_test_class_name: cn Depth: d = ( |
            | ('' copySize: d FillingWith: '['), cn).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> () From: ( | {
         'Category: building array classes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         universal_class_slots: d = ( |
            | 
            "Arrays define their superclass higher up (they
             all have class Object as their superclass)."
            0 pep classFile getUniversalClassSlotsClassName: (array_class_name: d)
                                                 IsAbstract: 0 false
                                                IsInterface: 0 false
                                             InterfaceNames: 0 vector
                                                 Superclass: 0 nil
                                         TypeTestClassNames: (array_type_test_class_names: d)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: arrays\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         arrayBuildMixinSlot = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixinSlot' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep arrayBuildMixinSlot.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixinSlot' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         array_build_mixin* = bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: debugging and options\x7fCategory: routines\x7fComment: Assertion check that can be turned on/off.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         assert: blk = ( |
            | 
            debug ifTrue: [blk assert].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: misc\x7fCategory: locking\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         assertHoldsPepLock = ( |
            | assert: [pepLock isHeldByThisProcess]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: misc\x7fCategory: class loading\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         atName: className InstallClass: cl Categories: cats = ( |
             clMir.
             loadedClassesMir.
             slotName.
            | 
            assertHoldsPepLock.
            slotName: (loader classNameToSelfSlotName: className).
            loadedClassesMir: (reflect: loadedClasses).
            (loadedClassesMir includesKey: slotName) ifTrue: [error: 'slot should not be there'].
            clMir: (reflect: cl).
            loadedClassesMir: (loadedClassesMir copyAt: slotName PutContents: clMir).
            setAnnotations ifTrue: [|clSlot|
                clSlot: (loadedClassesMir at: slotName).
                clSlot: (clSlot copyHolderForModule: generatedModuleName).
                clSlot: (clSlot copyHolderForCategories: cats).
                loadedClassesMir: clSlot holder.
            ].
            (reflect: loadedClasses) frozenDefine: loadedClassesMir.
            setAnnotations ifTrue: [
                clMir creatorSlot: ((reflect: loadedClasses) at: slotName).
            ].
            incClassCount.
            pep loader classObjectName = slotName ifTrue: [setArraySuperclassToObject].
            cl class_name = 'java.util.Random' ifTrue: [hackRandom: cl].
            updateUIPartially.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: mixins\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         attributesMixin = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'attributesMixin' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep attributesMixin.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'attributesMixin' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         attributesMatching: testBlk Do: doBlk = ( |
            | 
            attributes do: [|:attrib| 
                (testBlk value: attrib) ifTrue: [doBlk value: attrib].
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'attributesMixin' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         getUniqueAttributeMatching: testBlk IfNone: noneBlk = ( |
            | 
            getUniqueAttributeMatching: testBlk IfNone: noneBlk IfMultiple: [
                error: 'found more than one matching attribute'.
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'attributesMixin' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         getUniqueAttributeMatching: testBlk IfNone: noneBlk IfMultiple: multBlk = ( |
             count <- 0.
             match.
            | 
            attributesMatching: testBlk Do: [|:attrib|
                match: attrib.
                count: 1 + count.
            ].
            1 = count ifTrue: [^ match].
            0 = count ifTrue: noneBlk False: multBlk).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: stringManipulation and naming\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         avoidIllegalSelectors: str = ( |
            | 
            'self'   = str ifTrue: [^ 'self_'  ].
            'resend' = str ifTrue: [^ 'resend_'].
            str).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: misc\x7fCategory: code generators\x7fCategory: prototypes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         binCodeGenerator = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'binCodeGenerator' -> () From: ( |
             {} = 'Comment: This wrapper object makes a binary code generator
look much like a source code generator, allowing many
client routines to operate on either one. When there
is an advantage to going directly to the binary code
it can be accessed as \'binCodeGen\'.\x7fModuleInfo: Creator: globals pep binCodeGenerator.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'binCodeGenerator' -> () From: ( | {
         'Category: var and arg slots\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         addLocal: lName = ( |
            | 
            bytecodeGen addSlot: lName IsArgument: false IsAssignable: true Contents: nil.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'binCodeGenerator' -> () From: ( | {
         'Category: misc\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         bytecodeGen.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'binCodeGenerator' -> () From: ( | {
         'Category: copying and initialization\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         cleanup = ( |
            | 
            myCodeAttribute: nil).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'binCodeGenerator' -> () From: ( | {
         'Category: copying and initialization\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         copy = ( |
            | 
            resend.copy init).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'binCodeGenerator' -> () From: ( | {
         'Category: generateSend\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generateImplicitSelfSend: sel = ( |
            | 
            bytecodeGen implicitSelfSend: sel).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'binCodeGenerator' -> () From: ( | {
         'Category: generateSend\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generateSend: sel = ( |
            | 
            bytecodeGen send: sel.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'binCodeGenerator' -> () From: ( | {
         'Category: generateSend\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generateSend: sel DelegateThrough: del = ( |
            | 
            bytecodeGen send: sel DelegateThrough: del.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'binCodeGenerator' -> () From: ( | {
         'Category: var and arg slots\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         hasSlotNamed: name = ( |
            | bytecodeGen hasSlotNamed: name).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'binCodeGenerator' -> () From: ( | {
         'Category: generateSend\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: private'
        
         implicitSelf <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'binCodeGenerator' -> () From: ( | {
         'Category: copying and initialization\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         init = ( |
            | 
            bytecodeGen: pep bytecodeGenerator copy.
            spareBytecodeGens: sequence copy.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'binCodeGenerator' -> () From: ( | {
         'Category: copying and initialization\x7fComment: Must call this one before using the code
generator.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         initCodeAttribute: ca = ( |
            | 
            resend.initCodeAttribute: ca.
            usedTmpNames: 0.
            bytecodeGen startFresh.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'binCodeGenerator' -> () From: ( | {
         'Category: var and arg slots\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         initTmpNames = ( |
            | 
            tmpNames: (vector copySize: 6).
            tmpNames mapBy: [|:nyl. :idx| 'e_', idx printString].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'binCodeGenerator' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isBinCodeGenerator = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'binCodeGenerator' -> () From: ( | {
         'Category: misc\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         myCodeAttribute.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'binCodeGenerator' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'abstractCodeGenerator' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'binCodeGenerator' -> () From: ( | {
         'Category: expStack\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         pop1 = ( |
            | 
            popWithSemicolon && [1 < bytecodeGen stackHeight] ifTrue: [
                generateSend: ';'.
            ] False: [
                bytecodeGen pop.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'binCodeGenerator' -> () From: ( | {
         'Category: expStack\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         popCount: n = ( |
            | 
            1 = n ifTrue: [pop1.  "Just optim."]
                   False: [n do: [pop1]].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'binCodeGenerator' -> () From: ( | {
         'Category: expStack\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         popCount: n TransferToLocals: localNames = ( |
            | 
            "Iterate using 'n', not 'localNames'. The latter
             may be longer than 'n', but we really want to 
             pop 'n' values!"
            n reverseDo: [|:idx|
                setLocalVarNamed: (localNames at: idx).
                pop1.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'binCodeGenerator' -> () From: ( | {
         'Comment: If you set this flag to \'true\' Pep will never 
generate a pop bytecode unless the expression
stack has height 1 (i.e., the pop will empty 
the expression stack). When the stack height is
>= 2, popping is done by sending the binary 
message \';\' (which returns the receiver). 
Popping with \';\' is slower, but avoids a VM bug
we were struggling with for a while.
                   Ole Agesen, August 20, 1996.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         popWithSemicolon = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'binCodeGenerator' -> () From: ( | {
         'Category: constants\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         pushConstantObject: obj = ( |
            | 
            bytecodeGen literal: obj.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'binCodeGenerator' -> () From: ( | {
         'Category: set and get locals\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         pushLocalVarNamed: vname = ( |
            | 
            bytecodeGen implicitSelfSend: vname. 
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'binCodeGenerator' -> () From: ( | {
         'Category: blocks\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         pushNewBlockDo: blk = ( |
             prevBCG.
            | 
            prevBCG: bytecodeGen.
            spareBytecodeGens isEmpty ifTrue: [
                bytecodeGen: pep bytecodeGenerator copy.
            ] False: [
                bytecodeGen: spareBytecodeGens removeLast.
            ].
            bytecodeGen startFresh.
            blk value.
            prevBCG literal: bytecodeGen getBlockWithMethod reflectee.
            spareBytecodeGens addLast: bytecodeGen.  "Recycle him."
            bytecodeGen: prevBCG).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'binCodeGenerator' -> () From: ( | {
         'Category: set and get locals\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         pushSelf = ( |
            | 
            bytecodeGen pushSelf.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'binCodeGenerator' -> () From: ( | {
         'Category: set and get locals\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         setLocalVarNamed: vname = ( |
            | 
            bytecodeGen implicitSelfSend: vname, ':'.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'binCodeGenerator' -> () From: ( | {
         'Category: blocks\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         spareBytecodeGens.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'binCodeGenerator' -> () From: ( | {
         'Category: expStack\x7fComment: May be wrong (!) if not doing stack balancing.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         stackSize = ( |
            | bytecodeGen stackHeight).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'binCodeGenerator' -> () From: ( | {
         'Category: copying and initialization\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         staticInit = ( |
            | 
            initTmpNames.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'binCodeGenerator' -> () From: ( | {
         'Category: var and arg slots\x7fComment: Local variable names used when compiling dup/swap instructions.
Public for read access only.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: private'
        
         tmpNames <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'binCodeGenerator' -> () From: ( | {
         'Category: var and arg slots\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         tmpVarCounter <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'binCodeGenerator' -> () From: ( | {
         'Category: var and arg slots\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         traceVarCounter <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'binCodeGenerator' -> () From: ( | {
         'Category: var and arg slots\x7fComment: Return vector of local names that can be used
to translate \'dup\' and \'swap\'. Reuse names.
See also comment in corresonding method in 
\'srcCodeGenerator\'.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         useTmpNamesUpTo: n = ( |
            | 
            usedTmpNames < n ifTrue: [
                usedTmpNames upTo: n Do: [|:i| addLocal: (tmpNames at: i)].
                usedTmpNames: n.
            ].
            tmpNames).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'binCodeGenerator' -> () From: ( | {
         'Category: var and arg slots\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         usedTmpNames <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'binCodeGenerator' -> () From: ( | {
         'Category: expStack\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         whileRetaining: n Do: blk = ( |
             retained <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
            | 
            0 = n ifTrue: [^ blk value].
            retained: (vector copySize: n).
            retained mapBy: [setNewLocalVarAndPop].
            blk value.
            retained reverseDo: [|:local| pushLocalVarNamed: local].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: misc\x7fCategory: code generators\x7fCategory: reusable code generators\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         binCodeGenerators <- bootstrap stub -> 'globals' -> 'nil' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: misc\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         bitVector = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'bitVector' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep bitVector.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bitVector' -> () From: ( | {
         'Category: comparing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         = bv = ( |
            | 
            (capacity = bv capacity) && [bits = bv bits]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bitVector' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         add: i = ( |
             idx <- 0.
            | 
            idx: i / bitsPerByte.
            bits at: idx Put: (bits at: idx) || (maskFor: i % bitsPerByte).
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bitVector' -> () From: ( | {
         'Category: masks\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         allMask = ( |
            | maskLower: bitsPerByte).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bitVector' -> () From: ( | {
         'Category: state\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (byteVector)\x7fVisibility: private'
        
         bits <- bootstrap stub -> 'globals' -> 'byteVector' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bitVector' -> () From: ( | {
         'Category: masks\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         bitsPerByte = ( |
            | typeSizes bitsPerByte).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bitVector' -> () From: ( | {
         'Category: state\x7fComment: Only public for reading.
The max element that the bit
vector can contain is \'capacity - 1\'.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         capacity <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bitVector' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         complement = ( |
            | 
            perform: [|:b| b ^^ allMask]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bitVector' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         copy = ( |
            | 
            resend.copy bits: bits copy).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bitVector' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         copyCapacity: c = ( |
            | 
            resend.copy initCapacity: c).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bitVector' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         do: blk = ( |
             n <- 0.
            | 
            bits do: [|:b. mask <- 1. |
                bitsPerByte do: [
                    n = capacity ifTrue: [^ self].
                    0 != (mask && b) ifTrue: [blk value: n].
                    mask: mask + mask.
                    n: 1 + n.
                ].
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bitVector' -> () From: ( | {
         'Category: comparing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         hash = ( |
            | 
            capacity ^^ bits hash).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bitVector' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         includes: i = ( |
            | 
            (i < capacity) &&
            [0 != ((bits at: i / bitsPerByte IfAbsent: [^ false]) &&
                   (maskFor: i % bitsPerByte))]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bitVector' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         initCapacity: c = ( |
            | 
            bits: (byteVector copySize: c /+ bitsPerByte).
            capacity: c).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bitVector' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         intersect: bv = ( |
            | 
            perform: [|:b1. :b2| b1 && b2] With: bv).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bitVector' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isEmpty = ( |
            | 
            bits do: [|:b|
                0 != b ifTrue: [^ true].
            ].
            false).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bitVector' -> () From: ( | {
         'Category: masks\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         maskFor: bitNo = ( |
            | 1 << bitNo).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bitVector' -> () From: ( | {
         'Category: masks\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         maskLower: noOfBits = ( |
            | (1 << noOfBits) - 1).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bitVector' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'traits' -> 'clonable' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bitVector' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         perform: opBlk = ( |
            | 
            bits mapBy: opBlk.
            capacity != (bits size * bitsPerByte) ifTrue: [| lastIdx <- 0. |
                lastIdx: bits size - 1.
                bits at: lastIdx 
                    Put: (bits at: lastIdx) && (maskLower: capacity % bitsPerByte).
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bitVector' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         perform: opBlk With: bv = ( |
            | 
            capacity != bv capacity ifTrue: [error: 'bit vectors have difference capacities'].
            bits mapBy: [|:b. :i| opBlk value: b With: (bv bits at: i)].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bitVector' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         printString = ( |
             n <- 0.
             res <- ''.
            | 
            res: 'bitVector{'.
            n: size.
            8 < n ifTrue: [| j <- 0. |
                do: [|:i| 
                    (3 > j) || [(3 + j) >= n] ifTrue: [
                        res: res, i printString, ', '.
                    ].
                    j = 4 ifTrue: [res: res, '..., '].
                    j: 1 + j.
                ].
            ] False: [
                do: [|:i| res: res, i printString, ', '].
            ].
            0 != n ifTrue: [res: (res copySize: res size - 2)].
            res: res, '}'.
            res).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bitVector' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         remove: i = ( |
            | 
            remove: i IfAbsent: [error: 'not in bit vector: ', i printString]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bitVector' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         remove: i IfAbsent: blk = ( |
             b <- 0.
             idx <- 0.
             m <- 0.
            | 
            i >= capacity ifTrue: [^ blk value].
            idx: i / bitsPerByte.
            b: (bits at: idx).
            m: (maskFor: i % bitsPerByte).
            0 = (b && m) ifTrue: [^ blk value].
            bits at: idx Put: b && m complement.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bitVector' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         removeAll = ( |
            | 
            perform: 0).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bitVector' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         setAll = ( |
            | 
            perform: allMask).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bitVector' -> () From: ( | {
         'Comment: Slow.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         size = ( |
             n <- 0.
            | 
            do: [n: 1 + n].
            n).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bitVector' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         union: bv = ( |
            | 
            perform: [|:b1. :b2| b1 || b2] With: bv).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: debugging and options\x7fCategory: flags and params\x7fComment: Whether to break long lines
in generated (source) code.
Slows down translation a bit,
but makes code easier to read.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         breakLongLines = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: misc\x7fCategory: code generators\x7fCategory: prototypes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         bytecodeGenerator = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep bytecodeGenerator.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: generating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         addBytecode: bc = ( |
             idx <- 0.
            | 
            idx: bcCount.
            bytecodes at: idx Put: bc IfAbsent: [
                bytecodes: (bytecodes copySize: idx + idx).
                bytecodes at: idx Put: bc.
            ].
            bcCount: 1 + idx.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: labels\x7fComment: Only labels should call this method.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         addLabelToLiterals: label = ( |
             idx <- 0.
            | 
            idx: (indexOfLiteral: label).
            labelIndices add: idx.
            idx).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: generating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         addOpcode: op = ( |
            | 
            traceOp: op LiteralIdx: -1.
            addBytecode: op).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: generating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         addOpcode: op Index: i = ( |
            | 
            traceOp: op LiteralIdx: i.
            addBytecode: op || (reduceIndex: i).
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: slots and args\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         addSlot: name IsArgument: arg IsAssignable: asn Contents: cont = ( |
            | 
            pep assert: [arg not || asn not].      "Cannot both be arg and assignable."
            pep assert: [arg not || [nil = cont]]. "Args must contain nil."
            slots add: name.
            slots add: arg.
            slots add: asn.
            slots add: cont.
            arg ifTrue: [noOfArgs: 1 + noOfArgs].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: exp stack \x7fCategory: stack flushing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         basicStackName: i = ( |
            | 'stk_', i printString).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: state\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         bcCount <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: generating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         branchAlways: label = ( |
            | 
            flushStackPreserving: 0 DoBranch: [
                addOpcode: opBranchAlways 
                    Index: (label literalVectorIndexCodeGen: self).
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: generating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         branchIfFalse: label = ( |
            | 
            flushStackPreserving: 1 DoBranch: [
                addOpcode: opBranchIfFalse 
                    Index: (label literalVectorIndexCodeGen: self).
            ].
            stackDelta: -1).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: generating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         branchIfTrue: label = ( |
            | 
            flushStackPreserving: 1 DoBranch: [
                addOpcode: opBranchIfTrue
                    Index: (label literalVectorIndexCodeGen: self).
            ].
            stackDelta: -1).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: generating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         branchIndexed: labels = ( |
            | 
            flushStackPreserving: 1 DoBranch: [| idx <- 0 |
                idx: (indexOfLiteral: labels).
                labelVectorIndices add: idx.
                addOpcode: opBranchIndexed Index: idx.
            ].
            stackDelta: -1).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: state\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         bytecodes.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: copying and initialization\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         copy = ( |
            | resend.copy init).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: labels\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         defineLabel: label = ( |
             sh <- 0.
            | 
            pep flushStackForBranch ifTrue: [
                sh: stackHeight.
                flushStack.
            ].
            label bytecodeIndex: bcCount.
            pep flushStackForBranch ifTrue: [
                reloadStackToHeight: sh.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fakeMir = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> 'fakeMir' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep bytecodeGenerator fakeMir.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> 'fakeMir' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         codes.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> 'fakeMir' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         literals.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> 'fakeMir' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         names.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> 'fakeMir' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'traits' -> 'mirrors' -> 'method' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: exp stack \x7fCategory: stack flushing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         flushStack = ( |
            | 
            stackHeight reverseDo: [|:i|
                implicitSelfSend: (stackName: i), ':'.
                pop.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: exp stack \x7fCategory: stack flushing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         flushStackPreserving: n = ( |
             firstBackOn <- 0.
            | 
            n = stackHeight ifTrue: [^ self].  "Avoid pop/push for this case."
            firstBackOn: stackHeight - n.
            flushStack.
            n do: [|:i|
                implicitSelfSend: (stackName: (firstBackOn + i)).
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: exp stack \x7fCategory: stack flushing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         flushStackPreserving: n DoBranch: doBranch = ( |
            | 
            pep flushStackForBranch ifTrue: [| sh <- 0. |
                sh: stackHeight.
                flushStackPreserving: n.
                doBranch value.
                reloadStackToHeight: sh - n.
            ] False: doBranch.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: exp stack \x7fComment: Force the generator to believe that the
stack now has height 3. Used for the
entry points of nlr traps (where the nlr
trap establishes a stack of height 3).\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         forceStackHeight: n = ( |
            | 
            stackHeight: n).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: generating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         from: startLabel To: endLabel TrapNLR: trapLabel = ( |
            | 
            nlrTraps add: (startLabel & endLabel & trapLabel) asVector.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: gettting results\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         getBlockMethod = ( |
            | getMethod: mirrors blockMethod).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: gettting results\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         getBlockWithMethod = ( |
            | 
            mirrors block copyForMethod: getBlockMethod).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         getFakeMirror = ( |
             fm.
             names.
            | 
            fm: fakeMir copy.
            fm codes:    (bytecodes copySize: bcCount).
            fm literals: makeLiteralVector.
            names: sequence copy.
            slotsDo: [|:name| names add: name].
            fm names: names asVector.
            fm).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         getLiteralWithIndex: idx = ( |
            | 
            literals do: [|:i. :litmir| 
                i = idx ifTrue: [^ litmir reflectee].
            ].
            nil).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: gettting results\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         getMethod = ( |
            | getMethod: mirrors method).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: gettting results\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         getMethod: protoMir = ( |
             m.
            | 
            nil != returnLabel0 ifTrue: [defineLabel: returnLabel0].
            m: (protoMir copyBytecodes: (bytecodes copySize: bcCount)
                              Literals: makeLiteralVector
                                  File: '<binary-generated>'
                                  Line: 0
                                Source: '').
            slotsDo: [|:name. :isArgument. :isAssignable. :cont|
                m: (m primitiveCopyAt: name
                          PutContents: (reflect: cont)
                             IsParent: false
                           IsArgument: isArgument
                           Annotation: slotAnnotation
                               IfFail: raiseError).
                isAssignable ifTrue: [
                    m: (m copyAt: name, ':' PutContents: mirrors assignment).
                ].
            ].
            m).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: gettting results\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         getObjectWithMethodNamed: name = ( |
             mir.
            | 
            mir: (reflect: ()).
            mir copyAt: name PutContents: getMethod).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: slots and args\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         hasSlotNamed: name = ( |
            | 
            slotsDo: [|:n| name = n ifTrue: [^ true]].
            false).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: generating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         implicitSelfSend: sel = ( |
             s <- ''.
            | 
            s: sel canonicalize.
            'self' = s ifTrue: [^ pushSelf].
            addOpcode: opImplicitSelfSend Index: (indexOfLiteral: s).
            stackDelta: 1 - (selector copyStr: s) numberOfArguments).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: bytecode constants\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         indexMask = ( |
            | maxIndex).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: generating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         indexOfLiteral: lit = ( |
             idx <- 0.
             mir.
            | 
            mir: (reflect: lit).
            literals if: mir IsPresentDo: [|:i| idx: i]
                             IfAbsentPut: [idx: literals size. idx]
                                   AndDo: [].
            idx).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: copying and initialization\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         init = ( |
            | 
            reverser:           reverser copy.
            literals:           dictionary copy.
            bytecodes:          (byteVector copySize: 40).
            slots:              sequence copy.
            labelIndices:       sequence copy.
            labelVectorIndices: sequence copy.
            nlrTraps:           sequence copy.
            reverser: (byteVector copySize: ((typeSizes bitSize: 'self_int') /+ 
                                             bytecodeFormat indexBitSize) - 1).
            startFresh).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: state\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         labelCount <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: state\x7fComment: The indices in the literal vector that contain a label
object during code generation. Will need to be fixed to
contain the integer that the label represents at the end of
code generation.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         labelIndices.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: labels\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         labelProto = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> 'labelProto' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep bytecodeGenerator labelProto.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> 'labelProto' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         bytecodeIndex = ( |
            | 
            -1 = bytecodeIndex0 ifTrue: [
                error: 'unbound label (bytecodeIndex not set)'.
            ].
            unused: false.
            bytecodeIndex0).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> 'labelProto' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         bytecodeIndex0 <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> 'labelProto' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         bytecodeIndex: idx = ( |
            | 
            -1 = idx       ifTrue: [error: 'illegal bytecode index'].
            hasBeenDefined ifTrue: [error: 'cannot bind same label twice'].
            bytecodeIndex0: idx).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> 'labelProto' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         copy = ( |
            | resend.copy init).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> 'labelProto' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         hasBeenDefined = ( |
            | 
            -1 != bytecodeIndex0).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> 'labelProto' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         init = ( |
            | 
            bytecodeIndex0:      -1.
            literalVectorIndex0: -1.
            unused: true.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> 'labelProto' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         labelNumber <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> 'labelProto' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         literalVectorIndex0 <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> 'labelProto' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         literalVectorIndexCodeGen: cg = ( |
            | 
            -1 = literalVectorIndex0 ifTrue: [
                literalVectorIndex0: (cg addLabelToLiterals: self).
            ].
            unused: false.
            literalVectorIndex0).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> 'labelProto' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'traits' -> 'clonable' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> 'labelProto' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         printString = ( |
             res <- ''.
            | 
            res: '<label#', labelNumber printString, ',pc='.
            hasBeenDefined ifTrue: [res: res, bytecodeIndex printString]
                            False: [res: res, '?'].
            res, '>').
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> 'labelProto' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (true)\x7fVisibility: private'
        
         unused <- bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: state\x7fComment: Similar to \'labelIndices\' but for vectors of labels
(used by indexed branches).\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         labelVectorIndices.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: generating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         literal: lit = ( |
            | 
            addOpcode: opLiteral Index: (indexOfLiteral: lit).
            stackDelta: 1).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: state\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         literals.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: generating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         lowlevelNLR = ( |
            | 
            'lowlevelNLR:    not implemented yet; doing 3*pop' printLine.
            pop. pop. pop).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: gettting results\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         makeLiteralVector = ( |
             v.
            | 
            v: (vector copySize: literals size).
            literals do: [|:idx.:litMir|
                v at: idx Put: litMir reflectee.
            ].
            traceLabelsIn: v.
            labelIndices do: [|:i|
                v at: i Put: (v at: i) bytecodeIndex.
            ].
            labelVectorIndices do: [|:i. labVector|
                labVector: (v at: i) copy.
                labVector mapBy: [|:lab| lab bytecodeIndex].
                v at: i Put: labVector.
            ].
            v).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: gettting results\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         makeTrapVector = ( |
             v.
            | 
            nlrTraps isEmpty ifTrue: [^ vector].
            v: nlrTraps asVector.
            v mapBy:[ |v3|  "'v' is a vector of vectors, each one containing 3 labels."
                v3 copy mapBy: [|:lab| lab bytecodeIndex].
            ].
            v).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: bytecode constants\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         maxIndex <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: exp stack \x7fCategory: stack flushing\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (-1)\x7fVisibility: private'
        
         maxStackLocationNamed <- -1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: labels\x7fComment: It is the caller\'s responsibility not to create labels
unnecessarily (each label will allocate a literal vector entry).
In particular, avoid creating labels that are never used.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         newLabel = ( |
             lab.
             n <- 0.
            | 
            lab: labelProto copy.
            n: labelCount.
            lab labelNumber: n.
            labelCount: 1 + n.
            lab).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: state\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         nlrTraps.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: state\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         noOfArgs <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: bytecode constants\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         opBranchAlways <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: bytecode constants\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         opBranchIfFalse <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: bytecode constants\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         opBranchIfTrue <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: bytecode constants\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         opBranchIndexed <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: bytecode constants\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         opDelegatee <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: bytecode constants\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         opImplicitSelfSend <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: bytecode constants\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         opIndex <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: bytecode constants\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         opLiteral <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: bytecode constants\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         opNLR <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: bytecode constants\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         opPop <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: bytecode constants\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         opPushSelf <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: bytecode constants\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         opResend <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: bytecode constants\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         opSend <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'traits' -> 'clonable' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: generating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         pop = ( |
            | 
            addOpcode: opPop.
            stackDelta: -1).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: generating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         pushSelf = ( |
            | 
            addOpcode: opPushSelf.
            stackDelta: 1).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: generating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         reduceIndex: idx = ( |
             i <- 0.
             j <- 0.
             rest <- 0.
             rev.
            | 
            rev: reverser.
            rest: idx && indexMask.
            i: idx >> bytecodeFormat indexBitSize.
            [0 != i] whileTrue: [
                rev at: j Put: opIndex || (i && indexMask).
                j: 1 + j.
                i: i >> bytecodeFormat indexBitSize.
            ].
            j reverseDo: [|:k| addBytecode: (rev at: k)].
            rest).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: exp stack \x7fCategory: stack flushing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         reloadStackToHeight: n = ( |
            | 
            n do: [|:i| implicitSelfSend: (stackName: i)].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: labels\x7fComment: Result is a label. Branching to this label
forces a return.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         returnLabel = ( |
            | 
            nil = returnLabel0 ifTrue: [returnLabel0: newLabel].
            returnLabel0).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: state\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         returnLabel0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: state\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         reverser.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: generating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         send: sel = ( |
             s <- ''.
            | 
            s: sel canonicalize.
            addOpcode: opSend Index: (indexOfLiteral: sel canonicalize).
            stackDelta: 0 - (selector copyStr: s) numberOfArguments).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: generating\x7fComment: \'del0\' can be \'resend\' for an undirected resend.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         send: sel DelegateThrough: del0 = ( |
             del <- ''.
            | 
            del: del0 canonicalize.
            'resend' = del ifTrue: [
                addOpcode: opUndirectedResend.
            ] False: [
                addOpcode: opDelegatee Index: (indexOfLiteral: del).
            ].
            implicitSelfSend: sel).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: state\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         slots.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: slots and args\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         slotsDo: blk = ( |
            | 
            0 upTo: slots size By: 4 Do: [|:i|
                blk value: (slots at: i)       "name"
                     With: (slots at: 1 + i)   "isArgument"
                     With: (slots at: 2 + i)   "isAssignable"
                     With: (slots at: 3 + i).  "contents"
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: exp stack \x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         stackDelta: d = ( |
             s <- 0.
            | 
            s: d + stackHeight.
            0 > s ifTrue: [error: 'stack underflow'].
            stackHeight: s).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: exp stack \x7fComment: Current stack height. Maintained during
code generation. Public for read access only.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         stackHeight <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: exp stack \x7fCategory: stack flushing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         stackName: i = ( |
            | 
            1 + maxStackLocationNamed to: i Do: [|:j|
                addSlot: (basicStackName: j) IsArgument: false IsAssignable: true Contents: nil.
            ].
            maxStackLocationNamed: i.
            basicStackName: i).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: copying and initialization\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         startFresh = ( |
            | 
            literals               removeAll.
            slots                  removeAll.
            labelIndices           removeAll.
            labelVectorIndices     removeAll.
            nlrTraps               removeAll.
            returnLabel0:          nil.
            noOfArgs:              0.
            bcCount:               0.
            labelCount:            0.
            stackHeight:           0.
            maxStackLocationNamed: -1.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: copying and initialization\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         staticInit = ( |
            | 
            opDelegatee:        (bytecodeFormat bytecodeNamed: 'delegatee'        Index: 0).
            opImplicitSelfSend: (bytecodeFormat bytecodeNamed: 'implicitSelfSend' Index: 0).
            opIndex:            (bytecodeFormat bytecodeNamed: 'index'            Index: 0).
            opLiteral:          (bytecodeFormat bytecodeNamed: 'literal'          Index: 0).
            opSend:             (bytecodeFormat bytecodeNamed: 'send'             Index: 0).
            opBranchAlways:     (bytecodeFormat bytecodeNamed: 'branchAlways'     Index: 0).
            opBranchIfTrue:     (bytecodeFormat bytecodeNamed: 'branchIfTrue'     Index: 0).
            opBranchIfFalse:    (bytecodeFormat bytecodeNamed: 'branchIfFalse'    Index: 0).
            opBranchIndexed:    (bytecodeFormat bytecodeNamed: 'branchIndexed'    Index: 0).
            opNLR:              (bytecodeFormat bytecodeNamed: 'nonlocalReturn').
            opPop:              (bytecodeFormat bytecodeNamed: 'pop').
            opPushSelf:         (bytecodeFormat bytecodeNamed: 'pushSelf').
            opResend:           (bytecodeFormat bytecodeNamed: 'undirectedResend').
            maxIndex:           (1 << bytecodeFormat indexBitSize) - 1.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         test1 = ( |
            | 
            pushSelf.
            pushSelf.
            implicitSelfSend: 'foo:'.
            pop.
            pushSelf.
            pushSelf.
            send: '+'.
            pop.
            literal: 5.
            implicitSelfSend: 'b'.
            send: '<'.
            implicitSelfSend: 'a:'.
            implicitSelfSend: 'a'.
            send: 'printLine'.
            implicitSelfSend: 'h'.
            send: 'printLine'.
            pushSelf.
            addSlot: 'a' IsArgument: false IsAssignable: true  Contents: nil.
            addSlot: 'b' IsArgument: true  IsAssignable: false Contents: nil.
            addSlot: 'x' IsArgument: false IsAssignable: true  Contents: 67.
            addSlot: 'h' IsArgument: false IsAssignable: false Contents: 'hest'.
            testOutput: 'test1'.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         test2 = ( |
             lab.
            | 
            literal: 0.
            implicitSelfSend: 'i:'.
            pop.  "Make sure stack is empty at branch target."
            lab: newLabel.
            defineLabel: lab.
            implicitSelfSend: 'i'.
            send: 'print'.
            pop.
            literal: ' '.
            send: 'print'.
            pop.
            implicitSelfSend: 'i'.
            literal: 1.
            send: '+'.
            implicitSelfSend: 'i:'.
            pop.  "Make sure stack is empty before branching."
            branchAlways: lab.
            literal: 'never reached'.
            send: 'printLine'.
            addSlot: 'i' IsArgument: false IsAssignable: true  Contents: 0.
            testOutput: 'test2'.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         test3 = ( |
             lab.
            | 
            lab: newLabel.
            literal: 0.
            branchIndexed: (vector copySize: 1 FillingWith: lab).
            branchAlways: lab.
            defineLabel: lab.
            pushSelf.
            testOutput: 'test3'.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         testOutput: testName = ( |
            | 
            testOutput: testName
                Banner: 'Before the VM processes the bytecodes:'
                   Mir: getFakeMirror.
            '' printLine.
            testOutput: testName
                Banner: 'After the VM processes the bytecodes:'
                   Mir: getMethod.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         testOutput: testName Banner: ban Mir: mir = ( |
            | 
            ban printLine.
            ban size do: ['-' print]. '' printLine.
            testName printLine.
            testName size do: ['-' print]. '' printLine.
            mir byteCodesDo: [|:bci. :op. :lit|
                bci print. ':\t' print.
                (op copySize: 17) print.
                lit printLine.
            ].
            '' printLine.
            (pep prettyPrinter copy prettyPrintMethod: mir
                                                 Name: testSelector) printLine.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         testSelector = ( |
             res <- 'fisk:'.
            | 
            0 = noOfArgs ifTrue: [^ 'fisk'].
            noOfArgs - 1 do: [res: res, 'Fisk:'].
            res).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         trace = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         traceLabelsIn: v = ( |
             s.
             v2.
            | 
            trace ifFalse: [^ self].
            s: set copy.
            labelIndices       do: [|:i| s add:    (v at: i)].
            labelVectorIndices do: [|:i| s addAll: (v at: i)].
            s isEmpty ifTrue: [^ self].
            v2: s asVector.
            v2 sortBy: (|
                element: e1 Precedes: e2 = ( e1 labelNumber < e2 labelNumber. ).
            |).
            v2 do: [|:lab| lab printLine].
            '' printLine.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> () From: ( | {
         'Category: tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         traceOp: op LiteralIdx: idx = ( |
            | 
            trace ifFalse: [^ self].
            (bcCount     printString copySize: 5) print.
            (stackHeight printString copySize: 4) print.
            ((bytecodeFormat opcodeNameOf: op) copySize: 17) print.
            -1 != idx ifTrue: [|lit|
                lit: (getLiteralWithIndex: idx).
                (labelVectorIndices includes: idx) ifTrue: [
                    '[' print.
                    lit do: [|:lab. :j|
                        0 != j ifTrue: [',' print].
                        lab print.
                    ].
                    ']' print.
                ] False: [
                    lit print.
                ].
            ].
            '' printLine.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: counts\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (5976)\x7fVisibility: public'
        
         bytecodes <- 5976.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: misc\x7fCategory: class loading\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         classFile = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: parsing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         abortParse: err = ( |
            | 
            abortParseBlk value: err. 
            error: 'should not get here; should have aborted with this error: ', err).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: parsing\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         abortParseBlk.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: Java VM defined\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         access_flags <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         access_flagsOps* = bootstrap stub -> 'globals' -> 'pep' -> 'access_flagsMixin' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: translating\x7fCategory: extra instance vars\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         addExtraInstanceVars = ( |
             cn <- ''.
             obj.
            | 
            cn: classNameWithSlashes.
            case if: ['java/lang/Class' = cn] Then: [obj: javaLangClassInstanceSlots]
                 If: ['java/util/Date'  = cn] Then: [obj: javaUtilDateInstanceSlots]
               Else: [^ self].
            fctAddToProto: (reflect: obj)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: translating\x7fCategory: tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         addInstanceSlotsForTracing = ( |
            | 
            fctAddToProto: (reflect: instanceSlotsForTracing)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: translating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         addMyClassFileLink = ( |
            | 
            pep setMyClassFileLinks ifFalse: [^ self].
            setClassSlot: 'my_classFile' To: (reflect: self).
            theClassMir: (pep setCategoryTo: 'helpers'
                                    ForSlot: 'my_classFile'
                                         In: theClassMir).
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: translating\x7fCategory: build primitives\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         addToClass: mirSlots = ( |
            | 
            setTheClassMir: (theClassMir copyAddSlots: mirSlots)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: structDefs\x7fCategory: attributeStructs\x7fComment: Iterate over all concrete types of attribute structs.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         attributeStructsDo: blk = ( |
            | 
            blk value: code_attribute.
            blk value: constantValue_attribute.
            blk value: exceptions_attribute.
            blk value: lineNumberTable_attribute.
            blk value: localVariableTable_attribute.
            blk value: sourceFile_attribute.
            blk value: genericAttribute_info.   "Must be last: catch-all when parsing!"
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: Java VM defined\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: public'
        
         attributes <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         attributesMixin* = bootstrap stub -> 'globals' -> 'pep' -> 'attributesMixin' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: parsing\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (byteVector)\x7fVisibility: private'
        
         bytes <- bootstrap stub -> 'globals' -> 'byteVector' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: translating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         checkFinalAssertions = ( |
             cl.
            | 
            cl: theClassMir reflectee. "Don't get it via 'theClass' method to avoid
                                        interferring with the 'mustPreserveClassIdentity' flag."
            pep assert: [cl _Eq: cl this_class].
            pep assert: [cl _Eq: cl proto_instance my_class].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: magic\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         checkMagicIfFail: errBlk = ( |
            | 
            0 != (int32 cmp: goodMagic And: magic) ifTrue: [
                ^ errBlk value: 'class file: bad magic'.
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Comment: E.g., \'java.lang.Object\'.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (\'\')\x7fVisibility: public'
        
         classNameWithDots <- ''.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Comment: E.g., \'java/lang/Object\'.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (\'\')\x7fVisibility: public'
        
         classNameWithSlashes <- ''.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: translating\x7fCategory: tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         classSlotsForTracing = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'classSlotsForTracing' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile classSlotsForTracing.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'classSlotsForTracing' -> () From: ( | {
         'Category: tracing\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (-1)\x7fVisibility: public'
        
         trace_class_id <- -1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'classSlotsForTracing' -> () From: ( | {
         'Category: tracing\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (-1)\x7fVisibility: public'
        
         trace_no_of_refs <- -1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'classSlotsForTracing' -> () From: ( | {
         'Category: tracing\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (-1)\x7fVisibility: public'
        
         trace_no_of_static_refs <- -1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'classSlotsForTracing' -> () From: ( | {
         'Category: tracing\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (-1)\x7fVisibility: public'
        
         trace_no_of_vals <- -1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'classSlotsForTracing' -> () From: ( | {
         'Category: tracing\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (-1)\x7fVisibility: public'
        
         trace_number_of_first_instance_field <- -1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: structDefs\x7fCategory: attributeStructs\x7fCategory: concreteTypes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         code_attribute = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         aaload = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aaload' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute aaload.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aaload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         arrayref.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aaload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aaload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         index.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aaload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aaload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'aaload'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aaload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 50.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: abstract\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         arrayLoad = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'arrayLoad' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute arrayLoad.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aaload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'arrayLoad' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aaload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         aastore = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aastore' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute aastore.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         arrayref.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         index <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'aastore'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 83.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: abstract\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         arrayStore = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'arrayStore' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute arrayStore.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'arrayStore' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         aconst_null = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aconst_null' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute aconst_null.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: constants\x7fComment: The object representing a null pointer.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_null = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> 'java_null' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep javaRoot java_null.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aconst_null' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         constValue = bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> 'java_null' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aconst_null' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aconst_null' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generateUsing: gen = ( |
            | 
            "Even though the general 'generateUsing:' method in 
             'constantTop' would work for aconst_null, it is 
             easy to generate nicer code by special-casing null."
            gen pushJavaNull.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aconst_null' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aconst_null' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'aconst_null'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aconst_null' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: abstract\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         constImplicit = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'constImplicit' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute constImplicit.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aconst_null' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'constImplicit' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aconst_null' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: translating with branches\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         addLocalsAndArgs: bcg = ( |
            | 
            myMethod defineLocalSlotsAddArg: [|:name| 
                bcg addSlot: name IsArgument: true  IsAssignable: false Contents: nil
            ] AddLocal: [|:name|
                bcg addSlot: name IsArgument: false IsAssignable: true  Contents: nil.
            ] Transfer: [|:fromName. :toName|
                bcg implicitSelfSend: fromName.
                bcg implicitSelfSend: toName, ':'.
                bcg pop.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: instructions\x7fCategory: branch and jsr PCs\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         adjustAllBranchPCsUsing: blk = ( |
            | 
            branchPCs      mapBy: blk.
            fallThroughPCs mapBy: blk.
            jsrReturnPCs   mapBy: blk.
            jsrTargetPCs   mapBy: blk.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: translating with branches\x7fCategory: exp stack\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         adjustStackHeightTo: h From: j BCG: bcg = ( |
            | 
            h < j ifTrue: [
                j - h do: [bcg pop].
            ] False: [
            h > j ifTrue: [
                h - j do: [bcg pushSelf].
            ]].
            pep assert: [h = bcg stackHeight].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: programCounter\x7fComment: Skip from 0 to 3 bytes so that PC becomes word-aligned.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         alignPCToWord = ( |
             i <- 0.
            | 
            i: pc % 4.
            0 != i ifTrue: [incPC: 4 - i].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: instructions\x7fCategory: branch and jsr PCs\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         allBranchButJsrReturnPCsDo: blk = ( |
            | 
            branchPCs      do: blk.
            fallThroughPCs do: blk.
            jsrTargetPCs   do: blk.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: instructions\x7fCategory: branch and jsr PCs\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         allBranchPCsDo: blk = ( |
            | 
            allBranchButJsrReturnPCsDo: blk.
            jsrReturnPCs do: blk.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: translating with branches\x7fCategory: labels\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         allocateLabelForPC: pc BCG: bytecodeGen = ( |
            | 
            (instructionAtPC: pc) allocateLabel: bytecodeGen).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: translating with branches\x7fCategory: labels\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         allocateLabels: bytecodeGen = ( |
            | 
            branchPCs do: [|:pc|
                allocateLabelForPC: pc BCG: bytecodeGen.
            ].
            exceptions do: [|:ex|
                ex allocateLabelsCA: self BCG: bytecodeGen.
            ].
            pep assert: [jsrTargetPCs isEmpty = jsrReturnPCs isEmpty].
            jsrReturnPCs isEmpty ifTrue: [
                jsrReturnVectorOfLabels: vector.
                ^ self.
            ].
            jsrTargetPCs do: [|:pc|
                allocateLabelForPC: pc BCG: bytecodeGen.
            ].
            jsrReturnVectorOfLabels: jsrReturnPCs copy.
            jsrReturnVectorOfLabels mapBy: [|:pc|
                allocateLabelForPC: pc BCG: bytecodeGen.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         aload = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aload' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute aload.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         index <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'aload'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 25.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: abstract\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         load = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'load' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute load.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'load' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         aload_0 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aload_0' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute aload_0.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aload_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aload_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         index = 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aload_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aload_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'aload_0'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aload_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 42.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: abstract\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         load_n = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'load_n' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute load_n.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aload_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'load_n' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aload_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         aload_1 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aload_1' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute aload_1.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aload_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aload_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         index = 1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aload_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aload_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'aload_1'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aload_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 43.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aload_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'load_n' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aload_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         aload_2 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aload_2' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute aload_2.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aload_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aload_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         index = 2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aload_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aload_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'aload_2'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aload_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 44.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aload_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'load_n' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aload_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         aload_3 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aload_3' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute aload_3.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aload_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aload_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         index = 3.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aload_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aload_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'aload_3'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aload_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 45.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aload_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'load_n' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'aload_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: translating with branches\x7fCategory: dup2 analysis\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         analyzeForDup2 = ( |
             sh.
            | 
            sh: (vector copySize: myInstructions size FillingWith: -1).
            analyzeForDup2Stack: (blockSetProto stackProto copyCodeAttribute: self)
                   StackHeights: sh
                          Index: 0.
            pep debug ifTrue: [| str <- ''. |
                sh do: [|:h. :idx|
                    -1 = h ifTrue: [
                        str: str, (myInstructions at: idx) pc printString, ' '.
                    ].
                ].
                '' != str ifTrue: [
                    error:  'unreachable code at these PC\'s: ', str.
                ].
            ].
            sh.  "Service to the caller: give him the stack heights.").
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: translating with branches\x7fCategory: dup2 analysis\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         analyzeForDup2Stack: stack StackHeights: sh Index: idx = ( |
             index <- 0.
            | 
            index: idx.
            [| h <- 0. continue <- true. |
              h: (sh at: index).
              -1 = h ifTrue: [ "A new instruction."
                  sh at: index Put: stack size.
                  continue: ((myInstructions at: index)
                                 fastInterp: stack
                                BranchPCsDo: [|:p| analyzeForDup2Stack: stack copy
                                                          StackHeights: sh PC: p]).
                  index: 1 + index.  "Advance to next instruction."
              ] False: [
                  h != stack size ifTrue: [
                      error: 'stack height mismatch at pc = ', 
                             (myInstructions at: index) pc printString.
                  ].
                  continue: false.
              ].
              continue.
            ] whileTrue.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: translating with branches\x7fCategory: dup2 analysis\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         analyzeForDup2Stack: stack StackHeights: sh PC: pc = ( |
            | 
            analyzeForDup2Stack: stack StackHeights: sh Index: (pcToIndex at: pc)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         anewarray = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'anewarray' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute anewarray.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'anewarray' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         arrayElemClass.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'anewarray' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         buildCA: ca = ( |
            | 
            arrayElemClass: (ca myClassFile constantPoolAt: ca getUnsignedShort).
            arrayElemClass is_Class ifFalse: [ca raiseError: 'multinewarray: bad element type'].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'anewarray' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         count.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'anewarray' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         depth = ( |
            | 1 + (countBracketsIn: arrayElemClass nameAsAscii)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'anewarray' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         dimensions = 1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'anewarray' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'anewarray' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         interp: stack = ( |
            | 
            count: stack pop.
            stack push: self.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'anewarray' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'anewarray' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'anewarray'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'anewarray' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 189.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: abstract\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         newArrays = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'newArrays' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute newArrays.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'anewarray' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'newArrays' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'anewarray' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'anewarray' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         rawName = ( |
            | 
            arrayElemClass nameAsAscii).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         areturn = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'areturn' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute areturn.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'areturn' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'areturn' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'areturn' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'areturn'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'areturn' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 176.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: abstract\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         returns = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'returns' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute returns.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'areturn' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'returns' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'areturn' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'areturn' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         returnValue.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'arrayLoad' -> () From: ( | {
         'Category: dup2 analysis\x7fComment: Used for dup2 analysis.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fastInterp: stack = ( |
            | 
            stack pop: 2.
            stack push: defaultResult.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'arrayLoad' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         interp: stack = ( |
            | 
            index:    stack pop.
            arrayref: stack pop.
            stack push: self.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: abstract\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         loadTop = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'loadTop' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute loadTop.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'arrayLoad' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'loadTop' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'arrayLoad' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         transSel = ( |
            | 
            pep prefix, name, ':').
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'arrayStore' -> () From: ( | {
         'Category: dup2 analysis\x7fComment: Used for dup2 analysis.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fastInterp: stack = ( |
            | 
            stack pop: 3.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'arrayStore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         interp: stack = ( |
            | 
            val:      stack pop. 
            index:    stack pop.
            arrayref: stack pop.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: abstract\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         stores = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'stores' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute stores.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'arrayStore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'stores' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'arrayStore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         transSel = ( |
            | 
            pep prefix, name, ':With:').
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         arraylength = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'arraylength' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute arraylength.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'arraylength' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'arraylength' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'arraylength' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'arraylength'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'arraylength' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 190.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: abstract\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         unaryOp = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'unaryOp' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute unaryOp.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'arraylength' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'unaryOp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'arraylength' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'arraylength' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: instructions\x7fComment: Index of the local variables that this method
may assign to (so we can catch assignments to 
arguments up front).\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         assignedLocals.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         astore = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'astore' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute astore.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'astore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'astore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         index.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'astore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'astore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'astore'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'astore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 58.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: abstract\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         store = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'store' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute store.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'astore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'store' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'astore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'astore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         astore_0 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'astore_0' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute astore_0.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'astore_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'astore_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         index = 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'astore_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'astore_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'astore_0'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'astore_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 75.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: abstract\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         store_n = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'store_n' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute store_n.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'astore_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'store_n' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'astore_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'astore_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         astore_1 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'astore_1' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute astore_1.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'astore_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'astore_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         index = 1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'astore_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'astore_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'astore_1'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'astore_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 76.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'astore_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'store_n' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'astore_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'astore_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         astore_2 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'astore_2' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute astore_2.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'astore_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'astore_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         index = 2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'astore_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'astore_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'astore_2'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'astore_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 77.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'astore_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'store_n' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'astore_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'astore_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         astore_3 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'astore_3' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute astore_3.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'astore_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'astore_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         index = 3.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'astore_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'astore_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'astore_3'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'astore_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 78.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'astore_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'store_n' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'astore_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'astore_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         athrow = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'athrow' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute athrow.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'athrow' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'athrow' -> () From: ( | {
         'Comment: Whether control flow continues onto next instruction
(usually true, but not for jumps and returns).\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         fallsThrough = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'athrow' -> () From: ( | {
         'Category: dup2 analysis\x7fComment: Used for dup2 analysis.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fastInterp: stack = ( |
            | 
            stack clear.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'athrow' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         interp: stack = ( |
            | 
            objectref: stack pop.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'athrow' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'athrow' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'athrow'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'athrow' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         objectref.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'athrow' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 191.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: abstract\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         topStmt = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'topStmt' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute topStmt.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'athrow' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'topStmt' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'athrow' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'athrow' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         transSel = ( |
            | 
            pep prefix, name).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: typeTesting\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         attributeType = 'Code'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: basic\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         attribute_name_index <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: basic\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: public'
        
         attributes <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         attributesMixin* = bootstrap stub -> 'globals' -> 'pep' -> 'attributesMixin' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         baload = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'baload' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute baload.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'baload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         arrayref.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'baload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'baload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         index.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'baload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'baload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'baload'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'baload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 51.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'baload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'arrayLoad' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'baload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         bastore = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'bastore' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute bastore.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'bastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         arrayref.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'bastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'bastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         index <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'bastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'bastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'bastore'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'bastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 84.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'bastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'arrayStore' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'bastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'bastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: abstract\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         binaryOp = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'binaryOp' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute binaryOp.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'binaryOp' -> () From: ( | {
         'Category: dup2 analysis\x7fComment: Used for dup2 analysis.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fastInterp: stack = ( |
            | 
            stack pop: 2.
            stack push: defaultResult.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'binaryOp' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generateUsing: gen = ( |
             sel <- ''.
            | 
            sel: primSelector.  "Defaults to empty string, which precludes inlining."
            pep inlinePrims not || ['' = sel] ifTrue: [^ resend.generateUsing: gen].

            ('IfFail:' isSuffixOf: sel) ifTrue: [|names|
                "Transfer operands to locals for use by fail blk."
                names: (stuffIntoTmps: 2 Using: gen).
                gen pushNewBlockDo: [
                    gen pushLocalVarNamed: (names at: 0).
                    gen pushLocalVarNamed: (names at: 1).
                    resend.generateUsing: gen.  "The fail block just does non-inlined version."
                ].
            ].
            gen generateSend: sel.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'binaryOp' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         interp: stack = ( |
            | 
            val2: stack pop.
            val1: stack pop.
            stack push: self.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: abstract\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         topExp = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'topExp' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute topExp.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'binaryOp' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'topExp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'binaryOp' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         transSel = ( |
            | pep prefix, (name, ':')).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         bipush = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'bipush' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute bipush.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'bipush' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         buildCA: ca = ( |
            | 
            constValue: ca getSignedByte).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'bipush' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         constValue <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'bipush' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'bipush' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'bipush' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         lateTraceOnFile: file = ( |
            | 
            file write: constValue printString, ' '.
            resend.lateTraceOnFile: file).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'bipush' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'bipush'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'bipush' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 16.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: abstract\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         constTop = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'constTop' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute constTop.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'bipush' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'constTop' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'bipush' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: translating without branches\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         blockSetProto = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute blockSetProto.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: controlStructures\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         addLoopEdges = ( |
            | 
            entryBasicBlock firstInstance 
                 addLoopEdgesCurrentLoopHeaders: sequence copy).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: buildBasicBlocks\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         basicBlockProto = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute blockSetProto basicBlockProto.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: loops\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         addLoopNode: bb ToDo: todo = ( |
            | 
            loopNodes if: bb IsPresentDo: []
                             IfAbsentPut: [bb]
                                   AndDo: [todo add: bb].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: codeGen\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         bbGenerateFor: in Using: gen = ( |
            | 
            pep debug ifTrue: [
                traceInstruction: in StackHeight: gen stackSize 
                             Msg: '' OnFile: stdout.
            ].
            pep countBytecodes ifTrue: [in incCounterUsing: gen].
            in generateUsing: gen.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: codeGen\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         bbGenerateLargeUsing: gen = ( |
             first.
             hard <- 0.
             i <- 0.
             lim <- 0.
             slack <- 0.
             stackHeight <- 0.
            | 
            lim: instr size.
            "The method may get too big for Self compiler if we don't
             break it into multiple blocks."
            hard: byteCodesPerMethodLimit.
            slack: hard /~ 10.   "Use 10% slack to find good place to split."

            "We already set up the entry stack in the caller of this method (we had to, to
             get the exception object captured correctly, in case this is an exception handler.
             Now flush the stack (after doing nothing with it). This saves the exception object.
             Fortunately, the result of setting up an entry stack and flushing it, turns into a
             no-op at runtime, so this clumsiness doesn't slow down the generated code."
            stackHeight: gen stackSize.
            gen flushExpStackRetainingForTransfer: 0.

            i: getFirstIdx.
            [i < lim] whileTrue: [
                gen pushNewBlockDo: [
                    gen setupEntryStackHeight: stackHeight.
                    [(i < lim) &&
                     [(i < (hard - slack)) ||
                      [(i < hard) && [(isGoodPointToSplit: gen) not]]]] whileTrue: [
                        bbGenerateFor: (instr at: i) Using: gen.
                        i: 1 + i.
                    ].
                    "We are finishing up a block of code. Need to preserve values that are
                     presently on stack. And also register how many values we preserved."
                    stackHeight: gen stackSize.
                    gen flushExpStackRetainingForTransfer: 0.
                    hard: hard + byteCodesPerMethodLimit.   "When to split next time."
                ].
                gen generateSend: 'value'.   "Evalutate the block."
                gen pop1.
            ].
            gen setupEntryStackHeight: stackHeight.   "Whatever we need for the transfer.
                                                       It was all popped inside the last block."
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: codeGen\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         bbGenerateSmallUsing: gen = ( |
            | 
            getFirstIdx upTo: instr size Do: [|:i|
                bbGenerateFor: (instr at: i) Using: gen.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: codeGen\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         bbGenerateUsing: gen = ( |
            | 
            gen setupEntryStackHeight: codeGenEntryStackHeight.
            isExceptionHandler ifTrue: [
                pep assert: [gen isFreshBlock].
                gen addArg: 'exception_obj'.
                gen pushLocalVarNamed: 'exception_obj'.
            ].
            byteCodesPerMethodLimit < instr size ifTrue: [bbGenerateLargeUsing: gen]
                                                  False: [bbGenerateSmallUsing: gen].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: instantiation\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         bbInstanceProto = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute blockSetProto basicBlockProto bbInstanceProto.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: codeGen\x7fComment: If this is the main basic block (the one with an instruction
at pc = 0), add the argument slots for the jsr target blocks.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         addJsrNames: gen = ( |
            | 
            thisBasicBlock isMainBasicBlock ifTrue: [
                startInstruction jsrTargetPCsDo: [|:tpc|
                    gen addArg: (instMyCodeAttribute myMethod nameForJsrToPC: tpc).
                ].
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: loopEdges\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         addLoopEdge: le To: toBB LoopHeaders: loopHdrs = ( |
            | 
            loopHdrs do: [|:hdrInst. hdrBB|
                hdrBB: hdrInst thisBasicBlock.
                hdrBB = toBB ifTrue: [
                    le add: (restartEdge copyLoopHeader: hdrInst).
                    ^ self.
                ].
                hdrBB hasLoopSuccessor && [hdrBB loopSuccessor = toBB] ifTrue: [
                    le add: (exitEdge copyLoopHeader: hdrInst).
                ].
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: loopEdges\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         addLoopEdgesCurrentLoopHeaders: loopHdrs = ( |
             le.
            | 
            pep assert: [nil = loopEdges].   "Set only once."
            thisBasicBlock isLoopHeader ifTrue: [
                loopNumber: nextLoopCount.
                loopHdrs addLast: self.
            ].
            le: sequence copy. 
            thisBasicBlock successors do: [|:to|
                addLoopEdge: le To: to LoopHeaders: loopHdrs.
            ].
            loopEdges: le asVector.
            nestedInstancesDo: [|:nInst|
                nInst addLoopEdgesCurrentLoopHeaders: loopHdrs.
            ].
            "The 'nextInstance' is inside the loop."
            hasNextInstance ifTrue: [
                nextInstance addLoopEdgesCurrentLoopHeaders: loopHdrs.
            ].
            thisBasicBlock isLoopHeader ifTrue: [
                loopHdrs removeLast.   "Now done with the loop."
            ].
            "The 'loopSuccInstance' is outside the loop."
            hasLoopSuccInstance ifTrue: [
                loopSuccInstance addLoopEdgesCurrentLoopHeaders: loopHdrs.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: basics\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         addSuccessor: s = ( |
            | 
            unresolvedSuccessors add: s.
            s unresolvedPredecessors add: self.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: nestedInstances\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         allNestedAndNextInstancesDo: blk = ( |
            | 
            blk value: self.
            nestedAndNextInstancesDo: [|:inst| inst allNestedAndNextInstancesDo: blk].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: reduction\x7fCategory: splitting\x7fComment: The current splitting code is not fully general. This method returns
true iff and only if the receiver instance can be split.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         canBeSplit = ( |
            | 
            hasNextInstance && [nextInstance isReduced not]         ifTrue: [^ false].
            hasLoopSuccInstance && [loopSuccInstance isReduced not] ifTrue: [^ false].
            nestedInstancesDo: [|:nInst| 
                nInst isReduced ifFalse: [^ false].
            ].
            true).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: reduction\x7fCategory: absorption\x7fComment: Return true iff we can split this instance fully and be
guaranteed that all the created instances can be reduced by
absorption. Nice case, since it can never get us in trouble later.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         canBeSplitAbsorbed = ( |
            | 
            canBeSplit ifFalse: [^ false].
            "unresolvedSuccessors isEmpty ifFalse: [^ false].  Relaxed."
            unresolvedPredecessors isEmpty ifTrue: [^ false].
            unresolvedPredecessors do: [|:pred|
                (pred structurePermitsAbsorptionOf: self) ifFalse: [^ false].
            ].
            true).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         copyBasicBlock: bb = ( |
            | 
            resend.copy initBasicBlock: bb).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         copyForSplitting = ( |
             res.
            | 
            pep assert: [unresolvedSuccessors   isEmpty].
            pep assert: [unresolvedPredecessors isEmpty].
            res: (copyBasicBlock: thisBasicBlock).
            hasNextInstance  ifTrue: [
                res setNextInstance: nextInstance copyForSplitting.
            ].
            hasLoopSuccInstance ifTrue: [
                res setLoopSuccInstance: loopSuccInstance copyForSplitting.
            ].
            hasNestedInstances ifTrue: [
                res nestedInstances: nestedInstances copy.
                res nestedInstances mapBy: [|:nest|
                    nil != nest ifTrue: [nest copyForSplitting]
                                 False: nil.
                ].
            ].
            pep incSplitExpansion: thisBasicBlock codeSize.
            res).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: reduction\x7fCategory: testing\x7fComment: The word \"current\" is part of the selector since
the code size may grow as reduction proceeds.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         currentCodeSize = ( |
             res <- 0.
            | 
            allNestedAndNextInstancesDo: [|:inst|
                res: res + inst thisBasicBlock codeSize.
            ].
            res).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: printing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         dump = ( |
            | 
            dump: ''. 
            '' printLine).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: printing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         dump: indent = ( |
             in <- ''.
            | 
            '' printLine. 
            indent print.
            '{' print.
            thisBasicBlock isLoopHeader ifTrue: [
                'loop #' print. 
                loopNumber print.
                ': ' print.
            ].
            thisBasicBlock print.
            in: indent, '  '.
            hasNestedInstances ifTrue: [
                nestedInstances do: [|:nInst|
                    nil = nInst ifTrue: ['' printLine. in print. '{}' print]
                                 False: [nInst dump: in].
                ].
            ].
            loopEdges do: [|:le| '' printLine. indent print. ' ' print. le print].
            '}' print.
            hasNextInstance ifTrue: [nextInstance dump: indent].
            thisBasicBlock isLoopHeader ifTrue: [
                'end loop #' print. 
                loopNumber print.
                hasLoopSuccInstance ifTrue: [loopSuccInstance dump: indent]
                                     False: ['(no successor)' print].
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: reduction\x7fCategory: promotion\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         edgesEliminatedByPromoting: inst = ( |
             known.
            | 
            known: (findInstToPromoteImpossible: [^ -1]).
            pep assert: [known instance = inst].   "Should find only this one."
            known foundPreds size).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: reduction\x7fCategory: promotion\x7fCategory: enroute checking\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         excPermitPromoting: promInst = ( |
             ancBB.
             exGrp.
             pc <- 0.
            | 
            promInst trivialTest ifTrue: [^ true].
            ancBB: thisBasicBlock.
            ancBB isTryBB ifFalse: [^ true].

            "Verify that we don't lift an instance that should be guarded above
             the ancestor guarding it."
            exGrp: ancBB getExceptionsGrp.
            pc: promInst thisBasicBlock startPC.
            (exGrp first guards: pc) ifTrue: [
                tracePromotionPrevented: promInst Msg: '(exc: try)'.
                ^ false.
            ].

            "Now verify that the 'promInst' is not one of the bb's handling
             the exceptions installed by 'ancBB'."
            exGrp do: [|:ex|
                pc = ex handler_pc ifTrue: [
                    tracePromotionPrevented: promInst Msg: '(exc: catch, ', ex printString, ')'.
                    ^ false.
                ].
            ].
            true).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: reduction\x7fCategory: absorption\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         exceptionStructurePermitsAbsorptionOf: succ = ( |
            | 
            succ trivialTest ifTrue: [^ true].
            (succ thisBasicBlock isGuardedByMoreExcThan: thisBasicBlock) ifFalse: [
                traceReduction ifTrue: [
                    'bytecodeCount=' print. pep bytecodes print.
                    ': exceptions prevent absorption of ' print.
                    succ print. ' into ' print. printLine.
                ].
                ^ false.
            ].
            true).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: exceptions\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         exceptionsDo: blk = ( |
            | 
            thisBasicBlock myCodeAttribute exceptions do: blk.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: loopEdges\x7fCategory: loopEdgeObjects\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         exitEdge = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> 'exitEdge' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute blockSetProto basicBlockProto bbInstanceProto exitEdge.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> 'exitEdge' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         edgeName = ( |
            | loopHeader loopExitName).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> 'exitEdge' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         edgeType = 'exit'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> 'exitEdge' -> () From: ( | {
         'Comment: The loop which this edge leaves (terminates).
A bbInstance object.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         loopHeader.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> 'exitEdge' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         matchesEdgeToBB: bb = ( |
             hdrBB.
            | 
            hdrBB: loopHeader thisBasicBlock.
            hdrBB hasLoopSuccessor && [hdrBB loopSuccessor = bb]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: loopEdges\x7fCategory: loopEdgeObjects\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         loopEdge = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> 'loopEdge' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute blockSetProto basicBlockProto bbInstanceProto loopEdge.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> 'exitEdge' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> 'loopEdge' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> 'exitEdge' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         recordEdgeNeed = ( |
            | 
            loopHeader needsExit: true.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: state\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: private'
        
         fastCheckSkipPromotion <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: loopEdges\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         findHeader: to In: loops = ( |
            | 
            loops reverseDo: [|:loopHdrInst|
                loopHdrInst thisBasicBlock = to ifTrue: [^ loopHdrInst].
            ].
            error: 'should have found loop header for (',
                   thisBasicBlock printString, ')->(',
                   to printString, ')').
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: loopEdges\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         findHeaderOfSuccessor: to In: loops = ( |
            | 
            loops reverseDo: [|:loopHdrInst. hdrBB|
                hdrBB: loopHdrInst thisBasicBlock.
                hdrBB hasLoopSuccessor && [hdrBB loopSuccessor = to] ifTrue: [^ loopHdrInst].
            ].
            error: 'should have found loop header of given successor').
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: reduction\x7fCategory: promotion\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         findInstToPromoteImpossible: impBlk = ( |
             count.
             known.
            | 
            known: (knownProto copyPlaceToPromoteTo: self).
            (findInstToPromoteKnown: known Impossible: [^ impBlk value]) ifFalse: [
                pep assert: [nil = known instance].
                ^ impBlk value.   "None found."
            ].
            pep assert: [nil != known instance].
            known).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: reduction\x7fCategory: promotion\x7fComment: \'impBlk\' must do non-local return if invoked.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         findInstToPromoteKnown: known Impossible: impBlk = ( |
             found <- bootstrap stub -> 'globals' -> 'false' -> ().
             n <- 0.
            | 
            fastCheckSkipPromotion ifTrue: [^ false].
            n: unresolvedSuccessors size.
            1 < n ifTrue: impBlk.
            1 = n ifTrue: [
                known setInstance: unresolvedSuccessors first Pred: self Impossible: impBlk.
                found: true.
            ].
            nestedAndNextInstancesDo: [|:inst|
                found: (inst findInstToPromoteKnown: known Impossible: impBlk) || found.
            ].
            "Now perform enroute checking of the tentative promotion.
             The 'known' object has already checked the promotion against the final
             destination during the search, so we don't need to repeat that test here,
             if this is the destination instanc."
            found && ["self" != known placeToPromoteTo] ifTrue: [
                (excPermitPromoting:   known instance) ifFalse: impBlk.
                (loopsPermitPromoting: known instance) ifFalse: impBlk.
            ].
            pep debug ifTrue: [
                "Just to be sure: make sure that final-destination check and
                 enroute check (for final destination) agrees in this case.
                 This stuff is tricky."
                found && ["self" = known placeToPromoteTo] ifTrue: [
                    pep assert: [excPermitPromoting: known instance].
                ].
            ].
            found ifFalse: [
                "This instance has no unresolved successor now (and never 
                 will get them again), so indicate that we can skip looking
                 for them in future promotion attempts."
                fastCheckSkipPromotion: true.
            ].
            found).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: loopEdges\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         findLoopEdgeToBB: bb IfPresent: pBlk IfAbsent: aBlk = ( |
            | 
            loopEdges do: [|:le|
                (le matchesEdgeToBB: bb) ifTrue: [^ pBlk value: le].
            ]. 
            aBlk value).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         finishFirstInstance = ( |
             n <- 0.
            | 
            thisBasicBlock nonLoopEdgesDo: [|:to| addSuccessor: to firstInstance].
            n: unresolvedSuccessors size.    "Number of outgoing non-loop edges."

            "Need nested instances if there are one or more successors.
             It may seem that for one successor we may as well use promotion
             (and thus would not need nested instances), but there are cases
             where the promotion code gets tricky to write, where a simpler
             absorption will hande (loop successor/next instances in particular)."
            0 < n ifTrue: [nestedInstances: (vector copySize: n)] 
                   False: [nestedInstances: nil].

            thisBasicBlock isLoopHeader && [thisBasicBlock hasLoopSuccessor] ifTrue: [
                addSuccessor: thisBasicBlock loopSuccessor firstInstance. 
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: nextInstance and loopSuccInstance\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         freeInstanceMark = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> 'freeInstanceMark' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute blockSetProto basicBlockProto bbInstanceProto freeInstanceMark.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> 'freeInstanceMark' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'traits' -> 'oddball' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: codeGen\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generate0Using: gen = ( |
            | 
            generate1Using: gen FallThrough: nil).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: codeGen\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         generate1Using: gen FallThrough: ft = ( |
            | 
            addJsrNames: gen.
            thisBasicBlock isLoopHeader ifTrue: [
                "Loops are difficult. Be careful here."
                wrapInLoop: [|loopFT|
                    "Falling through in the loop will either be to 'nextInstance'
                     (if it exists) or to the loop header itself."
                    hasNextInstance ifTrue: [loopFT: nextInstance]
                                     False: [loopFT: self].
                    generate2Using: gen FallThrough: loopFT.
                    "Now do 'nextInstance' (if exists). Note that it is part of the loop body!"
                    hasNextInstance ifTrue: [
                       "Here we always fall through to loop hdr."
                        nextInstance generate1Using: gen FallThrough: self.
                    ].
                ] Using: gen.
                hasLoopSuccInstance ifTrue: [ "Finish off with loop successor (outside loop)."
                    loopSuccInstance generate1Using: gen FallThrough: ft.
                ].
            ] False: [
                generate2Using: gen
                   FallThrough: (hasNextInstance ifTrue: [nextInstance]
                                                  False: [ft]).
                hasNextInstance ifTrue: [
                    nextInstance generate1Using: gen FallThrough: ft.
                ].
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: codeGen\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         generate2Using: gen FallThrough: ft = ( |
             n <- 0.
             wrap <- bootstrap stub -> 'globals' -> 'false' -> ().
            | 
            thisBasicBlock bbGenerateUsing: gen.   "Generate code for this basic block."
            n: thisBasicBlock successors size.     "Now handle the successors."
            wrap: 1 < n.
            thisBasicBlock successors do: [|:succBB. :idx. excGrp. |
                (0 = idx) && [thisBasicBlock isTryBB] ifTrue: [
                    "Only the first successor is guarded; the other ones are handlers."
                    pep assert: [wrap].
                    excGrp: thisBasicBlock getExceptionsGrp.
                ].
                generateSuccessorBB: succBB
                              Using: gen
                        FallThrough: ft
                            ExcGrp: excGrp
                        WrapInBlock: wrap.
            ].

            "Now we have a block for each possible successor of this basic block instance.
             To finish up the transfer, generate the send that selects the appropriate block.
             But first be sure to flush the values on the stack to local state."
            wrap ifTrue: [generateTransferUsing: gen]
                  False: [gen flushExpStackRetainingForTransfer: 0].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: codeGen\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         generateSuccessorBB: succBB Using: gen FallThrough: ft ExcGrp: excGrp WrapInBlock: wrap = ( |
            | 
            (nil != ft) && [succBB = ft thisBasicBlock] ifTrue: [
                "Simply falling through will get us to the successor."
                wrap ifTrue: [gen pushNewBlockDo: []].
                ^ self.
            ].
            findLoopEdgeToBB: succBB IfPresent: [|:loopE| loopE generateUsing: gen AsExp: wrap]
                                      IfAbsent: [
                pep assert: [hasNestedInstances]. "Better have them, for now we really need them."
                nestedInstances findFirst: [|:nInst|
                    (nil != nInst) && [nInst thisBasicBlock = succBB].
                ] IfPresent: [|:nInst|
                    wrap ifTrue: [
                        gen pushNewBlockDo: [
                            nil != excGrp ifTrue: [gen registerActiveExcGrp: excGrp].
                            nInst generate1Using: gen FallThrough: ft.
                        ].
                    ] False: [
                        nInst generate1Using: gen FallThrough: ft.
                    ].
                ] IfAbsent: [
                    error: 'bad control flow structure'.
                    "Note: if the successor is not a fall-through, not a loop edge,
                     and not among the nested instances, something has gone wrong
                     when we built the control-flow structure."
                ].
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: codeGen\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         generateTransferUsing: gen = ( |
             t <- 0.
             transferInstruction.
            | 
            pep assert: [1 < thisBasicBlock successors size].
            transferInstruction: thisBasicBlock instr last.
            t: transferInstruction noOfExpsConsumedForTransfer.
            pep assert: [1 < t.   "If 't=1' we have not even wrapped the successor in a block,
                                   and therefore should not generate a transfer."].
            gen flushExpStackRetainingForTransfer: t.
            transferInstruction finishTransferUsing: gen.
            pep assert: [0 = gen stackSize].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: exceptions\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         hasExceptions = ( |
            | thisBasicBlock myCodeAttribute hasExceptions).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: nextInstance and loopSuccInstance\x7fComment: Return true iff loopSuccInstance is (still) free.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         hasFreeLoopSuccInstance = ( |
            | 
            freeInstanceMark = loopSuccInstance).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: nextInstance and loopSuccInstance\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         hasLoopSuccInstance = ( |
            | 
            (loopNoSuccessorMark != loopSuccInstance) &&
            [hasFreeLoopSuccInstance not]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: nestedInstances\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         hasNestedInstances = ( |
            | 
            nil != nestedInstances).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: nextInstance and loopSuccInstance\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         hasNextInstance = ( |
            | 
            freeInstanceMark != nextInstance).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         initBasicBlock: bb = ( |
            | 
            thisBasicBlock:         bb.
            unresolvedSuccessors:   sequence copy.
            unresolvedPredecessors: sequence copy.
            fastCheckSkipPromotion: thisBasicBlock isEntryBasicBlock.  "Never promote on entry BB to make
                                                                        it easier to deal with jsr. See
                                                                        'start' instruction for details."
            isReduced0:             false.
            loopEdges:              nil.
            loopNumber:             -1.
            nextInstance:           freeInstanceMark.
            thisBasicBlock isLoopHeader && [thisBasicBlock hasLoopSuccessor] ifTrue: [
                loopSuccInstance: freeInstanceMark.  "Loop successor will be promoted
                                                      to here or some place higher up."
            ] False: [
                loopSuccInstance: loopNoSuccessorMark.
            ].
            needsRestart:           false.
            needsExit:              false.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: basics\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         instMyCodeAttribute = ( |
            | thisBasicBlock myCodeAttribute).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: reduction\x7fCategory: testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isReduced = ( |
            | 
            pep debug ifTrue: [
                isReduced0 ifTrue: [pep assert: [isReducedNoncaching]].
            ].
            isReduced0 ifTrue: [^ true].   "Fast case: if it ever was reduced it will remain so!"
            unresolvedPredecessors isEmpty ifFalse: [^ false].
            unresolvedSuccessors   isEmpty ifFalse: [^ false].
            nestedAndNextInstancesDo: [|:inst| 
                inst isReduced ifFalse: [^ false].
            ].
            isReduced0: true.  "To speed up future tests."
            true).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: state\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: private'
        
         isReduced0 <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: reduction\x7fCategory: testing\x7fComment: For checking assertions only.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         isReducedNoncaching = ( |
            | 
            unresolvedPredecessors isEmpty ifFalse: [^ false].
            unresolvedSuccessors   isEmpty ifFalse: [^ false].
            nestedAndNextInstancesDo: [|:inst| 
                inst isReduced ifFalse: [^ false].
            ].
            true).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: reduction\x7fCategory: promotion\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         knownProto = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> 'knownProto' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute blockSetProto basicBlockProto bbInstanceProto knownProto.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> 'knownProto' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         checkExcStructure = ( |
             bb.
            | 
            bb: placeToPromoteTo thisBasicBlock.
            instance trivialTest || [bb isGuardedBySameExcAs: instance thisBasicBlock] ifFalse: [
                ^ false.
            ].
            bb isTryBB ifTrue: [| pc <- 0. |
                "Be careful not to promote handler into try bb."
                pc: instance thisBasicBlock startPC.
                bb getExceptionsGrp do: [|:ex|
                    pc = ex handler_pc ifTrue: [^ false].
                ].
            ].
            true).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> 'knownProto' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         checkLoopStructure = ( |
             bb.
            | 
            bb: placeToPromoteTo thisBasicBlock.
            bb isLoopHeader ifFalse: [^ true].  "Easy case."
            "Now we know we are promoting into a loop header. There are two cases:
             1. Promoting into 'loopSuccInstance': this is the place that
                immediately follows the loop, i.e., is outside the loop.
             2. Promiting into 'nextInstance', which is inside the loop.
                It will usually only be used if the loop header contains a 
                branch (in which case 'nextInstance' provides us with a merge
                point). In this case we can promote iff the instance being 
                promoted is supposed to be inside the loop."
            "Case 1."
            bb hasLoopSuccessor && [instance thisBasicBlock = bb loopSuccessor] ifTrue: [
                placeToPromoteTo hasFreeLoopSuccInstance ifFalse: [
                    error: 'did not expect to find loopSuccInstance filled already!'.
                ].
                ^ true.  "Alright to promote."
            ].
            "Case 2."
            bb loopNodes includes: instance thisBasicBlock).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> 'knownProto' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         copyPlaceToPromoteTo: ptpt = ( |
            | resend.copy initPlaceToPromoteTo: ptpt).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> 'knownProto' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         foundAllPredecessors = ( |
            | 
            pep assert: [foundPreds size <= instance unresolvedPredecessors size].
            foundPreds size = instance unresolvedPredecessors size).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> 'knownProto' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         foundPreds.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> 'knownProto' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         initPlaceToPromoteTo: ptpt = ( |
            | 
            instance: nil.
            foundPreds: sequence copy.
            placeToPromoteTo: ptpt).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> 'knownProto' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         instance.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> 'knownProto' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'traits' -> 'clonable' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> 'knownProto' -> () From: ( | {
         'Comment: Only public for read-access.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         placeToPromoteTo.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> 'knownProto' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         setInstance: inst Pred: pred Impossible: impBlk = ( |
            | 
            nil = instance ifTrue: [|bb|
                instance: inst.
                checkLoopStructure ifFalse: [^ impBlk value].
                checkExcStructure  ifFalse: [^ impBlk value].
            ] False: [
                inst != instance ifTrue: [^ impBlk value].
            ].
            pep assert: [(foundPreds includes: pred) not].
            foundPreds add: pred.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> 'loopEdge' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         copyLoopHeader: lh = ( |
            | 
            resend.copy initLoopHeader: lh).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> 'loopEdge' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generateUsing: gen AsExp: asExp = ( |
             cleanupIdx <- 0.
            | 
            recordEdgeNeed.
            "Can use the loop header to determine cleanup needs, whether edge is loop  restart or exit."
            cleanupIdx: (gen excCleanupIdxForTransferToPC: loopHeader thisBasicBlock startPC).
            -1 = cleanupIdx ifTrue: [   "Easy case; no exception cleanup needed."
                gen pushLocalVarNamed: edgeName. "This pushes a block-valued expression, which can be 
                                                  be evaluated to accomplish the loop edge transfer."
                asExp ifFalse: [    "Transform the expression into a statement by evaluating the blk."
                    gen generateSend: 'value'.
                    gen pop1.
                ].
            ] False: [
                [|:cleanupAndTransfer|
                    asExp ifTrue: [   "We need an expression that will clean up and transfer when
                                       evaluated. Must wrap in a block to accomplish both. This block
                                       is typically passed to a conditional statement, e.g.:
                                             ... ifTrue: [cleanup_123 value. exit_4 value]."
                        gen pushNewBlockDo: cleanupAndTransfer.
                    ] False: cleanupAndTransfer.    "An expression is not demanded, so just do it."
                ] value: [
                    gen cleanupActiveExcGrpsTo: cleanupIdx.
                    gen pushLocalVarNamed: edgeName.
                    gen generateSend: 'value'.
                    gen pop1.
                ].
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> 'loopEdge' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         initLoopHeader: lh = ( |
            | 
            loopHeader: lh.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> 'loopEdge' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'traits' -> 'clonable' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> 'loopEdge' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         printString = ( |
            | 
            edgeType, ' #', loopHeader loopNumber printString).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: state\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         loopEdges.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: codeGen\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         loopExitName = ( |
            | 'exit_', loopNumber printString).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: nextInstance and loopSuccInstance\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         loopNoSuccessorMark = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> 'loopNoSuccessorMark' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute blockSetProto basicBlockProto bbInstanceProto loopNoSuccessorMark.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> 'loopNoSuccessorMark' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'traits' -> 'oddball' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: state\x7fComment: Unique ID (0, 1, 2, ...) for all loops in method.
Remains -1 for non-loops.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (-1)\x7fVisibility: public'
        
         loopNumber <- -1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: codeGen\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         loopRestartName = ( |
            | 'restart_', loopNumber printString).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: reduction\x7fCategory: absorption\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         loopStructurePermitsAbsorptionOf: succ = ( |
            | 
            "We can't absorb a loop successor into the loop header
             (it should be promoted, if anything)."
            thisBasicBlock isLoopHeader not || 
            [thisBasicBlock hasLoopSuccessor not] || 
            [thisBasicBlock loopSuccessor != succ thisBasicBlock]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: state\x7fComment: If this instance is of a BB which is a loop header, and the loop has a
successor, the instance of the successor will be placed here by the 
reduction code (note: the loop successor may also be promoted to some
other place higher up, so it is possible that this slot remains empty,
i.e., contains \'freeInstanceMark\').
If this instance is of a non-loop BB or a loop BB with no successor,
this slot contains \'loopNoSuccessorMark\'.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         loopSuccInstance.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: reduction\x7fCategory: promotion\x7fCategory: enroute checking\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         loopsPermitPromoting: promInst = ( |
             ancBB.
            | 
            ancBB: thisBasicBlock.
            ancBB isLoopHeader ifTrue: [
                (ancBB loopNodes includes: promInst thisBasicBlock) ifTrue: [
                    tracePromotionPrevented: promInst Msg: '(loop)'.
                    ^ false.
                ].
            ].
            true).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: state\x7fComment: Set to true if a loop exit is generated.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         needsExit <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: state\x7fComment: Set to true when a loop restart is generated.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         needsRestart <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: nestedInstances\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         nestedAndNextInstancesDo: blk = ( |
            | 
            "Don't change the iteration order here. The method
             'tryTopDownPromotion:SplitAllowed:' depends on it
             (at least the nested instances must be processed last)."
            hasLoopSuccInstance ifTrue: [blk value: loopSuccInstance].
            hasNextInstance     ifTrue: [blk value: nextInstance].
            nestedInstancesDo: [|:inst| blk value: inst].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: state\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: public'
        
         nestedInstances <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: nestedInstances\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         nestedInstancesDo: blk = ( |
            | 
            hasNestedInstances ifTrue: [
                nestedInstances do: [|:nInst|
                    nil != nInst ifTrue: [blk value: nInst].
                ].
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: nestedInstances\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         nestingIndexOf: succ = ( |
             idx <- 0.
            | 
            pep assert: [hasNestedInstances].
            thisBasicBlock nonLoopEdgesDo: [|:to|
                to = succ thisBasicBlock ifTrue: [^ idx].
                idx: 1 + idx.
            ].
            error: 'should have found it').
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: state\x7fComment: Only assign to this field using the \'setNextInstance:\' method
(to respect a critical invariant).\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         nextInstance.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: loopEdges\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         nextLoopCount = ( |
             ca.
             r <- 0.
            | 
            ca: instMyCodeAttribute.
            r: ca loopCounter.
            ca loopCounter: 1 + r.
            r).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: nestedInstances\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         noOfNestedInstances = ( |
             n <- 0.
            | 
            nestedInstancesDo: [n: 1 + n].
            n).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'traits' -> 'clonable' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: printing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         printString = ( |
            | 
            'instance(', thisBasicBlock printString, ')').
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: basics\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         removeSuccessor: s = ( |
            | 
            unresolvedSuccessors remove: s.
            s unresolvedPredecessors remove: self.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: loopEdges\x7fCategory: loopEdgeObjects\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         restartEdge = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> 'restartEdge' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute blockSetProto basicBlockProto bbInstanceProto restartEdge.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> 'restartEdge' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         edgeName = ( |
            | 
            loopHeader loopRestartName).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> 'restartEdge' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         edgeType = 'restart'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> 'restartEdge' -> () From: ( | {
         'Comment: The loop which this edge restarts.
A bbInstance object.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         loopHeader.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> 'restartEdge' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         matchesEdgeToBB: bb = ( |
            | 
            loopHeader thisBasicBlock = bb).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> 'restartEdge' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> 'loopEdge' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> 'restartEdge' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         recordEdgeNeed = ( |
            | 
            loopHeader needsRestart: true.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: nextInstance and loopSuccInstance\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         setLoopSuccInstance: inst = ( |
            | 
            pep assert: [hasFreeLoopSuccInstance].
            loopSuccInstance: inst).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: nextInstance and loopSuccInstance\x7fComment: Set \'nextInstance\' to \'inst\' (after checking invariant).\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         setNextInstance: inst = ( |
            | 
            pep assert: [inst unresolvedPredecessors isEmpty].
            pep assert: [hasNextInstance not].
            pep assert: [inst != loopNoSuccessorMark].
            nextInstance: inst).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: reduction\x7fCategory: promotion\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         setPromotedInstance: promo = ( |
            | 
            "'promo' is either going to be loop successor inside loop. Figure
             out which is the case."
            thisBasicBlock isLoopHeader && 
            [promo thisBasicBlock = thisBasicBlock loopSuccessor] ifTrue: [
                setLoopSuccInstance: promo.
            ] False: [ 
                setNextInstance: promo.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: reduction\x7fCategory: splitting\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         splitFullyInto: active = ( |
            | 
            "Could be done more efficiently by inlining and special-casing the
             'splitOff:Into:' method to do the full split immediately. But this is
             not a very frequent operation, so probably not worthwhile to optimize."
            [1 < unresolvedPredecessors size] whileTrue: [
                splitOff: (vector copySize: 1 FillingWith: unresolvedPredecessors first)
                    Into: active.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: reduction\x7fCategory: splitting\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         splitOff: preds Into: active = ( |
             newInst.
             pr.
             su.
            | 
            pep assert: [canBeSplit.   "Caller should verify this!"].
            pep assert: [unresolvedPredecessors includesAll: preds].
            pr: unresolvedPredecessors asVector.   "Unlink instance before splitting."
            su: unresolvedSuccessors   asVector. 
            pep assert: [(su includes: self) not]. "The following code would attempt to
                                                    remove the same edge twice if an
                                                    instance could be its own successor."
            pr do: [|:p| p removeSuccessor: self].
            su do: [|:s| removeSuccessor: s].
            newInst: copyForSplitting.
            traceReduction ifTrue: ['splitting ' print. printLine].
            pr do: [|:p|
                (preds includes: p) ifTrue: [p addSuccessor: newInst]
                                     False: [p addSuccessor: self].
            ].
            su do: [|:s| 
                addSuccessor: s.
                newInst addSuccessor: s.
            ].
            active addLast: newInst.
            newInst).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: basics\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         startInstruction = ( |
            | instMyCodeAttribute myBlockSet entryBasicBlock instr first).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: reduction\x7fCategory: absorption\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         structurePermitsAbsorptionOf: succ = ( |
            | 
            hasNestedInstances &&
            [loopStructurePermitsAbsorptionOf: succ] &&
            [exceptionStructurePermitsAbsorptionOf: succ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: state\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         thisBasicBlock.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: reduction\x7fCategory: promotion\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         tracePromotionPrevented: promInst Msg: msg = ( |
            | 
            traceReduction ifTrue: [
            (msg = '(loop)') && ('instance(33-33)' = promInst printString) ifTrue: [halt].
                print. ' prevents promotion of ' print. promInst print.
                ': '. msg printLine.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: reduction\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         traceReduction = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: reduction\x7fCategory: testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         trivialTest = ( |
            | 
            "javac is inconsistent about whether exceptions guard ranges
             like [from,to] or [from,to[. Mostly it seems to be the former,
             but sometimes that assumption gets us into trouble when building
             control structures. In particular, it sometimes results in the 
             creation of trivial basic blocks that contain only a single
             unconditional goto instruction or a return. To improve the chance
             of reducing the flow graph, we always allow absorption/promotion
             of such trivial basic blocks. Note that this cannot affect the
             semantics of the generated code."
            hasExceptions not || (
              thisBasicBlock isTrivial &&
              [hasNextInstance not]    && 
              [hasNestedInstances not]
            )).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: reduction\x7fCategory: absorption\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         tryAbsorb: succ = ( |
            | 
            pep assert: [1 = succ unresolvedPredecessors size].
            pep assert: [succ unresolvedPredecessors first = self].
            (structurePermitsAbsorptionOf: succ) ifFalse: [^ false].

            removeSuccessor: succ.   "Will remove the edge at both ends."
            nestedInstances at: (nestingIndexOf: succ) Put: succ.

            traceReduction ifTrue: [
                'bytecodeCount=' print. pep bytecodes print.
                ': absorbed ' print. succ print.
                ' into ' print. printLine.
            ].
            true).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: reduction\x7fCategory: promotion\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         tryPromotion: active SplitAllowed: split = ( |
             known.
             promo.
            | 
            fastCheckSkipPromotion ifTrue: [^ false].  "Among other things, prevents promotion
                                                        on entry basic block (makes it easier
                                                        to deal with jsr, if we know that their
                                                        targets have always been absorbed."
            "%%% What about loopSuccInstance?"
            hasNextInstance        ifTrue: [^ false].
            known: (findInstToPromoteImpossible: [^ false]).

            known foundAllPredecessors ifTrue: [
                promo: known instance.
            ] False: [|ki|
                "Found fewer paths to the instance than it has predecessors. Need to split 
                 the instance before it can be promoted since it has incoming edges from
                 other instances than this one."
                split ifFalse: [^ false].
                ki: known instance.   "Just a shorthand."
                ki canBeSplit ifFalse: [^ false].
                promo: (ki splitOff: known foundPreds asVector Into: active).
                pep assert: [promo unresolvedPredecessors asSet = known foundPreds asSet].
            ].
            promo unresolvedPredecessors do: [|:predInst|
                pep assert: [predInst unresolvedSuccessors = (sequence copy add: promo)].
                predInst unresolvedSuccessors removeAll.
            ].
            promo unresolvedPredecessors removeAll.
            setPromotedInstance: promo.

            traceReduction ifTrue: [
                'bytecodeCount=' print. pep bytecodes print.
                ': promoted ' print. promo print.
                ' into ' print. printLine.
            ].
            true.   "Indicate successful promotion by returning true.").
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: reduction\x7fCategory: promotion\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         tryTopDownPromotion: active SplitAllowed: split = ( |
            | 
            (tryPromotion: active SplitAllowed: split) ifTrue: [^ true].
            nestedAndNextInstancesDo: [|:inst|
                (inst tryTopDownPromotion: active
                             SplitAllowed: split) ifTrue: [^ true].
            ].
            false).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: state\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         unresolvedPredecessors.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: state\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         unresolvedSuccessors.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: exceptions\x7fComment: Verify that the exception handlers in the generated
code covers the right ranges of PC\'s.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         verifyExceptions = ( |
            | 
            hasExceptions ifTrue: [
                "The above test is just an optimization."
                verifyExceptions: thisBasicBlock myCodeAttribute Active: list copy.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: exceptions\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         verifyExceptions: ca Active: active = ( |
             bb.
             n <- 0.
             right.
            | 
            bb: thisBasicBlock.
            right: bb guardingExceptions.
            (right != active) && [bb isTrivial not] ifTrue: [
                bb isJsrTarget ifTrue: [
                    "I see no easy way to fix the problem. Luckily, with branch bytecodes
                     it becomes a non-issue. So ignore it for now."
                    warning: 'ignoring bad exception structure for jsr target BB'.
                    ^ self.
                ] False: [
                    'active:' printLine. active do: [|:exc| '    ' print. exc printLine].
                    'right:'  printLine. right  do: [|:exc| '    ' print. exc printLine].
                    error: 'bad exception structure at ', printString.
                ].
            ].
            nestedInstancesDo: [|:nest|
                (0 = n) && [bb isTryBB] ifTrue: [|grp|
                    grp: bb getExceptionsGrp.  "Careful about order we accumulate in 'active'."
                    grp reverseDo: [|:ex| active addFirst: ex].
                    nest verifyExceptions: ca Active: active.
                    grp size do: [active removeFirst].
                ] False: [
                    nest verifyExceptions: ca Active: active.
                ].
                n: 1 + n.
            ].
            pep assert: [bb isTryBB not || [2 <= n]].
            hasNextInstance ifTrue: [
                nextInstance verifyExceptions: ca Active: active.
            ].
            hasLoopSuccInstance ifTrue: [
                loopSuccInstance verifyExceptions: ca Active: active.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> () From: ( | {
         'Category: codeGen\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         wrapInLoop: bodyBlk Using: gen = ( |
             sel <- 'loop'.
            | 
            gen pushNewBlockDo: [
                bodyBlk value.
                needsExit ifTrue: [
                    pep assert: [thisBasicBlock hasLoopSuccessor].
                    sel: sel, 'Exit'.
                    gen addArg: loopExitName.
                ].
                needsRestart ifTrue: [
                    gen addArg: loopRestartName.
                    sel: sel, 'Continue'.
                ].
            ].
            gen generateSend: pep prefix, sel.
            gen pop1.   "Pop result of the loop send."
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: expressionTrees\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         buildExpTrees: stack = ( |
            | 
            entryStackHeight: stack size.
            stack myBasicBlock: self.
            instr do: [|:in|
                in interp: stack.
                false && pep debug ifTrue: [
                    traceInstruction: in StackHeight: stack size 
                                 Msg: '' OnFile: stdout.
                ].
            ].
            exitValues: stack contents.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: codeGen\x7fComment: How many byte codes we should at most compile into single
Self method body to avoid producing methods that are too
large for the Self compiler. To avoid exceeding the limit
we break up the method into several blocks, using code of 
the form: [...] value.
This limit is hard, but the actual break may happen a bit
sooner (to have it at a better place).\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         byteCodesPerMethodLimit = ( |
            | 
            pep countBytecodes || [pep traceMutator] ifTrue: 50 
                                                      False: 200).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: codeGen\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         codeGenEntryStackHeight = ( |
            | 
            isJsrTarget || [isExceptionHandler] ifTrue: [
                entryStackHeight - 1. "We don't push return addr./exception obj. on stack."
            ] False: [
                entryStackHeight.
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: reporting\x7fComment: Just use number of instructions. Could perhaps
obtain more accurate measure by considering
size of each instruction (i.e., pc advance over
the basic block).\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         codeSize = ( |
            | instr size).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: depthFirstTree\x7fComment: Number of instructions accumulated over all nodes in
depth-first tree rooted by this node.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         codeSizeInDFTree = ( |
             res <- 0.
            | 
            walkDFDescendants: [|:s| res: res + s codeSize].
            res).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: loops\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         computeLoopOnEdgeFrom: n = ( |
             todo.
            | 
            isLoopHeader ifFalse: [   "If it already is a loop header (from some other
                                       back edge), just add further nodes to the loop,
                                       effectively treating the whole pile as one big loop!"
                loopNodes: set copy.
                loopNodes add: self.
            ].
            todo: sequence copy.
            addLoopNode: n ToDo: todo.
            [todo isEmpty] whileFalse: [|m|
                m: todo removeLast.
                m predecessors do: [|:p| addLoopNode: p ToDo: todo].
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         copyInstr: ins CodeAttribute: ca = ( |
            | resend.copy initInstr: ins CodeAttribute: ca).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: instantiation\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         createFirstInstance = ( |
            | 
            firstInstance: (bbInstanceProto copyBasicBlock: self).
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: depthFirstTree\x7fComment: Depth-first number.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (-1)\x7fVisibility: public'
        
         dfNumber <- -1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: depthFirstTree\x7fComment: Parent of this basic block in depth-first tree.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         dfParent.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: depthFirstTree\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         dfVisit: num From: p = ( |
             n <- 0.
            | 
            n: num. 
            hasBeenVisited ifFalse: [
                dfNumber: n.
                dfParent: p.
                n: 1 + n.
                successors do: [|:bb| 
                    n: (bb dfVisit: n From: self).
                ].
            ].
            n).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: dominatorTree\x7fComment: The immediate dominator of this basic block
(i.e., this slot is the parent link in the 
dominator tree).\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         dominator.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: dumping\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         dumpOnFile: file = ( |
            | 
            instr do: [|:in| 
                traceWithSkipInstruction: in StackHeight: nil OnFile: file.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: loops\x7fComment: Evaluate \'blk\' on all loop headers of loops surrounding rcvr basic
block; from inner-most to outer-most. If the rcvr is itself a loop
header, blk will be evaluated on it first.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         enclosingLoopsDo: blk = ( |
            | 
            walkDFAncestors: [|:p|
                p isLoopHeader && [p loopNodes includes: self] ifTrue: [blk value: p].
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: pc\x7fComment: PC of last instruction\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         endPC = ( |
            | instr last pc).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: expressionTrees\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (-1)\x7fVisibility: public'
        
         entryStackHeight <- -1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: expressionTrees\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         exitStackHeight = ( |
            | exitValues size).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: expressionTrees\x7fComment: Values on expression stack on exit from
this basic block.
\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: public'
        
         exitValues <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: reporting\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         expandedSize = ( |
             s <- 0.
            | 
            s: instr size.
            successors do: [|:bb|
                (isBackEdgeTo: bb) ifFalse: [s: s + bb expandedSize].
            ].
            s).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: dominatorTree\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         findDominatorWith: testBlk = ( |
             d.
            | 
            d: self.
            [nil != d] whileTrue: [
                (testBlk value: d) ifTrue: [^ d].
                d: d dominator.
            ].
            nil).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: instantiation\x7fComment: The first instance created from this basic block.
Used when instantiating full control-flow graph.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         firstInstance.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: exceptions\x7fComment: Only invoke on bb for which
isTryBB = true.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         getExceptionsGrp = ( |
            | 
            pep assert: [isTryBB].
            instr last exceptionsGrp).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: codeGen\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         getFirstIdx = ( |
            | 
            shouldSkipFirstInstruction ifTrue: [
                pep debug ifTrue: [
                    traceWithSkipInstruction: instr first
                                 StackHeight: entryStackHeight
                                      OnFile: stdout.
                ].
                1.
            ] False: [
                0.
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: exceptions\x7fComment: The exceptions guarding this basic block.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: public'
        
         guardingExceptions <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: depthFirstTree\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         hasBeenVisited = ( |
            | 
            -1 != dfNumber).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: loops\x7fComment: Return true iff this loop has no successor, i.e., never exits 
(disregarding returns, exceptions, and exit/restarts of 
surrounding loops).\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         hasLoopSuccessor = ( |
            | 
            pep assert: [isLoopHeader].
            noLoopSuccessor != loopSuccessor).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: controlFlow\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         hasPredecessorOutside: bbs = ( |
            | 
            predecessors do: [|:p|
                (bbs includes: p) ifFalse: [^ true].
            ].
            false).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         initInstr: ins CodeAttribute: ca = ( |
            | 
            instr:               ins.
            myCodeAttribute:     ca.
            dfNumber:            -1.
            loopNodes:           nil.  "Not a loop header until proven so."
            loopSuccessor:       nil.
            firstInstance:       nil.
            entryStackHeight:    -1.
            exitValues:          nil.
            isExceptionHandler:  false.
            guardingExceptions:  (myCodeAttribute getExceptionsGuardingFrom: startPC
                                                                         To: endPC).
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: basics\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         instr.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: depthFirstTree\x7fComment: Return true iff the arc from \'bb\' to \'self\'
is a back arc in the DF tree.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isBackEdgeFrom: bb = ( |
            | bb isBackEdgeTo: self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: depthFirstTree\x7fComment: Return true iff the arc from \'self\' to \'bb\'
is a back arc in the DF tree.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isBackEdgeTo: bb = ( |
            | 
            pep assert: [successors includes: bb].  "Inappropriate to call on non-arc."
            "Note: the dfNumber comparison is '>=' to classify a single basic block
             with an edge back to itself as a loop."
            (dfNumber >= bb dfNumber) &&   "Quick and dirty elimination of
                                            forward and tree arcs."
            [isDFDescendantOf: bb]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: depthFirstTree\x7fComment: Return true if receiver basic block is
descendant of bb in depth-first spanning tree.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isDFDescendantOf: bb = ( |
            | 
            walkDFAncestors: [|:p|
                bb = p ifTrue: [^ true].
            ].
            false).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: dominatorTree\x7fComment: Return true iff b is a dominator
of the receiver.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isDominatedBy: b = ( |
            | 
            nil != (findDominatorWith: [|:d| d = b])).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: basics\x7fComment: Return true iff this is the unique entry block for
a given method.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isEntryBasicBlock = ( |
            | 
            instr first isStart).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: exceptions\x7fComment: True iff this block is the start of
an exception handler (i.e., a block that catches
an exception after it has been thrown).\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isExceptionHandler <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: codeGen\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         isGoodPointToSplit: gen = ( |
            | 
            0 = gen stackSize).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: basics\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isGotoOnly = ( |
            | 
            (1 = instr size) && [instr first isGoto]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: exceptions\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isGuardedByMoreExcThan: bb = ( |
             s1 <- 0.
             s2 <- 0.
            | 
            s1: startPC.
            s2: bb startPC.
            myCodeAttribute exceptions do: [|:ex|
                pep assert: [(ex guards: startPC) = (ex guards: endPC)].
                (ex guards: s2) && [(ex guards: s1) not] ifTrue: [
                    ^ false.
                ].
            ].
            true).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: loops\x7fComment: Return true iff an exception handler (try bb) installed
inside this loop guards the basic block \'et\'.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         isGuardedByOrHandlesExceptionInsideLoop: et = ( |
             etPC <- 0.
            | 
            pep assert: [isLoopHeader].
            etPC: et startPC.
            loopNodes do: [|:loopN|
                loopN isTryBB ifTrue: [|exGrp|
                    exGrp: loopN getExceptionsGrp.
                    (exGrp first guards: etPC) ifTrue: [^ true].
                    exGrp do: [|:ex|
                        ex handler_pc = etPC ifTrue: [^ true].
                    ].
                ].
            ].
            false).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: exceptions\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isGuardedBySameExcAs: bb = ( |
             s1 <- 0.
             s2 <- 0.
            | 
            s1: startPC.
            s2: bb startPC.
            myCodeAttribute exceptions do: [|:ex|
                pep assert: [(ex guards: startPC) = (ex guards: endPC)].
                (ex guards: s1) != (ex guards: s2) ifTrue: [^ false].
            ].
            true).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: exceptions\x7fComment: True iff there is a jsr which branches to 
the first isntruction of this basic block.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isJsrTarget <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: loops\x7fCategory: loopEdges\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         isLoopEdgeTo: to = ( |
            | 
            enclosingLoopsDo: [|:loopHeader| 
                (to = loopHeader) || [to = loopHeader loopSuccessor] ifTrue: [^ true].
            ].
            false).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: loops\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isLoopHeader = ( |
            | nil != loopNodes).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: basics\x7fComment: Return true iff this is the basic block with the first
regular instruction of the method (not the start basic
block, but the one with an instruction at pc = 0).\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isMainBasicBlock = ( |
            | 0 = instr first pc).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: basics\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isTrivial = ( |
            | 
            (1 = instr size) && [instr first isReturn "|| [instr first isGoto]"]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: exceptions\x7fComment: Return true iff this basic block represents
a point where exception handling starts.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isTryBB = ( |
            | 
            instr last isTryAndCatch).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: loops\x7fCategory: loopEdges\x7fComment: Iterate \'blk\' over all outgoing edges which *do* lead to loop
headers or successors of any loop enclosing this basic block.
This method and \'nonLoopEdgesDo:\' partition the outgoing edges 
from this basic block.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         loopEdgesDo: blk = ( |
            | 
            successors do: [|:to|
                (isLoopEdgeTo: to) ifTrue: [blk value: to].
            ].
             self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: loops\x7fComment: Used when selecting successors for loops.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         loopExitCounter <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: loops\x7fComment: Evaluate block on the edges (i.e., pairs (from,to)) 
that exit this loop from anywhere in its body.
Note: exit is taken in the unstructured sense of going to
any basic block not in this loop (i.e., does not have to
be an \"exit to the bottom of the loop\").\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         loopExitEdgesDo: blk = ( |
            | 
            pep assert: [isLoopHeader].
            loopNodes do: [|:from|
                from successors do: [|:to|
                    (loopNodes includes: to) ifFalse: [blk value: from With: to].
                ].
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: loops\x7fComment: Return set of blocks that this loop may exit to.
At this point we are not considering any structural
restrictions imposed by surrounding loops. However, we
do account for the exception structure.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         loopExitTargets = ( |
             targets.
            | 
            "NB: don't optimize this method to cache the set without
             changing code in callers (some caller is presently mutating
             the set returned by this method)."
            targets: set copy.
            loopExitEdgesDo: [|:from. :to|
                "A bb which is guarded by an exception handler inside the loop
                 should not be chosen as exit target (since it cannot be both
                 inside the exception handler's try part and outside the loop). 
                 Likewise, the handler BB of an exception handler that guards
                 basic blocks inside the loop should not be chosen as the loop
                 successor."
                (isGuardedByOrHandlesExceptionInsideLoop: to) ifFalse: [targets add: to].
            ].
            targets).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: loops\x7fComment: Nil if this is not a loop header. Else it is the set
of basic blocks in the loop, including any loops nested 
inside it and including the loop header (this node). \x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         loopNodes.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: loops\x7fComment: Only set if this basic block is a loop header;
then loopSuccessor is either \'noSuccessor\' or the basic block chosen
to follow after the last iteration of the loop.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         loopSuccessor.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: basics\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         myCodeAttribute.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: loops\x7fComment: Marker used to indicate that a loop has no successor,
see \'hasLoopSuccessor\'.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         noLoopSuccessor = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'noLoopSuccessor' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute blockSetProto basicBlockProto noLoopSuccessor.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'noLoopSuccessor' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'traits' -> 'oddball' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: loops\x7fCategory: loopEdges\x7fComment: Iterate \'blk\' over all outgoing edges which do not lead to 
loop headers or successors of any loop enclosing this basic block.
This method and \'loopEdgesDo:\' partition the outgoing edges 
from this basic block.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         nonLoopEdgesDo: blk = ( |
            | 
            successors do: [|:to|
                (isLoopEdgeTo: to) ifFalse: [blk value: to].
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'traits' -> 'clonable' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: pc\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         pcRange = ( |
            | 
            startPC printString, '-', 
            endPC   printString).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: controlFlow\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: public'
        
         predecessors <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: dumping\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         print: i Width: n OnFile: file = ( |
             str <- ''.
            | 
            str: i printString.
            str size < n ifTrue: [
                file write: ('' copySize: n - str size).
            ].
            file write: str).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: basics\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         printString = ( |
            | 
            isEntryBasicBlock ifTrue: ['start'] False: [pcRange]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: loops\x7fComment: Call this method (once) on loop header basic block to 
select which basic block follows the loop.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         selectLoopSuccessor = ( |
             eTargets.
            | 
            isLoopHeader ifFalse: [^ self].     "Nothing to do in this case."
            pep assert: [nil = loopSuccessor].  "Shouldn't already be set."
            eTargets: loopExitTargets.
            dfParent enclosingLoopsDo: [|:enclHdr|  "Start in 'dfParent' to avoid the
                                                     current basic block, which is itself 
                                                     a loop header."
                pep assert: [nil != enclHdr loopSuccessor "Check processing order"].
                eTargets remove: enclHdr               IfAbsent: nil.
                eTargets remove: enclHdr loopSuccessor IfAbsent: nil.
            ].
            loopSuccessor: (selectLoopSuccessorAmong: eTargets).
            pep debug ifTrue: [
                'loop header ' print. print. ' has successor ' print. loopSuccessor printLine.
            ].
            pep assert: [nil != loopSuccessor].   "Make sure it was set!"
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: loops\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         selectLoopSuccessorAmong2: eTargets0 = ( |
             choice.
             codeAmount <- -1.
             eTargets.
             maxCount <- 0.
             n <- 0.
             nonLoopIncoming.
            | 
            "Pick a successor. Try to do better than picking an arbitrary one by
             using three criteria for ranking the possible successors:
                1. Try to pick a successor that has incoming edges from nodes *not* in
                   this loop. (Motivation: if a successor only has incoming edges from
                   within a loop, we may as well absorb it into the loop; no opportunity
                   for merging branches with non-loop nodes exist anyway).
                2. Minimize the number of edges from within the loop going to the
                   successor (most persons prefer loops with only one exit).
                3. Maximize the amount of code in the depth-first tree of the successor
                   (non-successor nodes will be absorbed into the loop, so it is better
                   to have a large successor node, since this gives *less* code in the
                   loop).
             First apply the former criteria, then use the second to break ties, then
             the third."
            eTargets: eTargets0.
            nonLoopIncoming: (eTargets filterBy: [|:et| 
                (et hasPredecessorOutside: loopNodes)
            ] Into: sequence copy).
            n: nonLoopIncoming size.
            1 = n ifTrue: [^ nonLoopIncoming first].
            1 < n ifTrue: [eTargets: nonLoopIncoming.   "Apply remaining criteria." ].
            eTargets do: [|:et| et loopExitCounter: 0].
            loopExitEdgesDo: [|:from. :to| to loopExitCounter: 1 + to loopExitCounter].
            eTargets do: [|:et| maxCount: (maxCount max: et loopExitCounter)].
            eTargets: (eTargets filterBy: [|:et| maxCount = et loopExitCounter]
                                    Into: sequence copy).
            pep assert: [eTargets isEmpty not].
            1 = eTargets size ifTrue: [^ eTargets first].
            "Still not a uniquely best one. Look at code size."
            eTargets do: [|:et. m <- 0. |
                m: et codeSizeInDFTree.
                m > codeAmount ifTrue: [codeAmount: m. choice: et].
            ].
            choice).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: loops\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         selectLoopSuccessorAmong: eTargets = ( |
             n <- 0.
            | 
            n: eTargets size.
            0 = n ifTrue: [^ noLoopSuccessor].
            1 = n ifTrue: [^ eTargets first].
            "More than one candiate for the successor. First try
             to see if we can make the loop look like a while loop.
             This is possible if the loop header has two
             successors, one of which is in the loop.
             ------ currently commented out, since code
                    generator doesn't emit while loops anyway.
            2 = successors size ifTrue: [|b1. b2|
                b1: (eTargets includes: successors first).
                b2: (eTargets includes: successors last).
                b1 != b2 ifTrue: [
                    b1 ifTrue: [^ successors last]
                        False: [^ successors first].
                ].
            ].  "
            selectLoopSuccessorAmong2: eTargets).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: controlFlow\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         setSuccessors: nextBB BlockSet: bs = ( |
             last.
             succs.
            | 
            succs: sequence copy.
            last: instr last.
            last targetPCsDo: [|:tpc|
                succs add: (bs getBasicBlockAt: tpc)
            ].
            last fallsThrough ifTrue: [
                nil = nextBB ifTrue: [
                    bs myCodeAttribute raiseError: 'control falls through to nowhere'
                                               PC: instr last pc.
                ] False: [
                    succs add: nextBB.
                ].
            ].
            successors: succs asVector.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: codeGen\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         shouldSkipFirstInstruction = ( |
            | isJsrTarget).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: dumping\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         skippedMsg = ' (skipped; is jsr/ret control stack manipulation)'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: pc\x7fComment: PC of first instruction.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         startPC = ( |
            | 
            instr first pc).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: controlFlow\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: public'
        
         successors <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: dumping\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         traceInstruction: in StackHeight: h Msg: m OnFile: file = ( |
            | 
            nil != h ifTrue: [print: h Width: 3 OnFile: file].
            file write: ' '.
            in fullTraceOnFile: file.
            file writeLine: m.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: dumping\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         traceWithSkipInstruction: in StackHeight: h OnFile: file = ( |
             msg <- ''.
            | 
            isJsrTarget && [in = instr first] ifTrue: [
                msg: skippedMsg.
            ].
            traceInstruction: in
                 StackHeight: h
                         Msg: msg
                      OnFile: file).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: depthFirstTree\x7fComment: Walk the depth-first tree from this node up to the root.
Note: the receiver node is considered an ancestor.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         walkDFAncestors: blk = ( |
             p.
            | 
            p: self.
            [nil != p] whileTrue: [
                blk value: p. 
                p: p dfParent.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> () From: ( | {
         'Category: depthFirstTree\x7fComment: Walk the depth-first tree from this node and down in the depth-first
order. Note: the receiver node is considered a descendant.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         walkDFDescendants: blk = ( |
            | 
            blk value: self.
            successors do: [|:s|
                "self" = s dfParent ifTrue: [s walkDFDescendants: blk].
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: state\x7fComment: sorted by (start) pc\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: private'
        
         basicBlocks <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: buildBasicBlocks\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         buildBasicBlocks: instr = ( |
             bbs.
             i <- 0.
             lim <- 0.
            | 
            markHeaders: instr.
            bbs: sequence copy.
            lim: instr size.
            [i < lim] whileTrue: [| j <- 0. |
                j: 1 + i.
                [(j < lim) && [(instr at: j) isBBHeader not]] whileTrue: [
                    j: 1 + j.
                ].
                bbs add: (newBasicBlockInstr: (instr copyFrom: i UpTo: j)).
                i: j.
            ].
            basicBlocks: bbs asVector.
            pep debug ifTrue: [traceBasicBlocks].
            linkBasicBlocks.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: expressionTrees\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         buildExpTrees = ( |
             eh <- 0.
             stack.
            | 
            stackRegisters: sequence copy.
            stack: (stackProto copyCodeAttribute: myCodeAttribute).
            dfBasicBlocks do: [|:bb. entryStk <- 0. |
                nil != bb dfParent ifTrue: [
                    entryStk: bb dfParent exitStackHeight.
                ].
                bb isExceptionHandler ifTrue: [
                    entryStk: 1 + entryStk.   "Account for ref. that athrow
                                               instr. pushes on stack."
                ].
                bb isJsrTarget ifTrue: [
                    entryStk: 1 + entryStk. "The return addr."
                ].
                primeStack: stack ToHeight: entryStk.
                bb buildExpTrees: stack.
            ].
            verifyPathInvariant.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: buildBasicBlocks\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         checkPCs: instr = ( |
             jt1.
             jt2.
            | 
            pep assert: [
                jt1: set copy.
                jt2: set copy.
                instr do: [|:in| in targetPCsDo: [|:t| jt1 add: t]].
                jt2 add: 0.  "For the start instr."
                myCodeAttribute allBranchButJsrReturnPCsDo: [|:t| jt2 add: t].
                myCodeAttribute exceptions do: [|:ex|
                    jt2 add: ex start_pc.
                    jt2 add: ex handler_pc.
                ].
                jt1: jt1 asVector copy sort.
                jt2: jt2 asSet asVector sort.
                jt1 = jt2.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: dumping\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         colorStringFor: bb = ( |
             col <- ''.
            | 
            bb isTryBB            ifTrue: [col: 'green'].
            bb isExceptionHandler ifTrue: [col: 'red'].
            '' = col ifTrue: ''
                      False: ['textcolor: ', col, 'bordercolor: ', col]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: controlStructures\x7fComment: \"Use the algorithm from the Dragon book to compute
 the dominators for all nodes (sets of nodes). 
 Store the final result as the dominator tree.\"\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         computeDominatorTree = ( |
             change <- bootstrap stub -> 'globals' -> 'true' -> ().
            | 
            basicBlocks do: [|:bb. dom|
                dom: (pep bitVector copyCapacity: noOfBasicBlocks).
                nil = bb dfParent ifTrue: [   "Entry node and unreachable nodes!"
                    bb dominator: (dom add: bb dfNumber).
                ] False: [
                    bb dominator: dom setAll.
                ].
            ].
            [change] whileTrue: [
                change: false.
                dfBasicBlocks do: [|:b1|
                    nil = b1 dfParent ifFalse: [|new| "Again test for entry node and unreachable ones."
                        b1 predecessors do: [|:b2| 
                            nil = new ifTrue: [new: b2 dominator copy]
                                       False: [new intersect: b2 dominator].
                        ].
                        new add: b1 dfNumber.
                        new != b1 dominator ifTrue: [change: true. b1 dominator: new].
                    ].
                ].
            ].
            "Now get rid of the sets and just store the immediate dominator."
            dfBasicBlocks do: [|:bb. dom|
                dom: bb dfParent.
                [(nil != dom) && [(bb dominator includes: dom dfNumber) not]] whileTrue: [
                    dom: dom dfParent.
                ].
                bb dominator: dom.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         copy = ( |
            | error: 'use copyCodeAttribute:').
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         copyCodeAttribute: ca Instructions: instr = ( |
            | 
            resend.copy initCodeAttribute: ca Instructions: instr).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: controlStructures\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         depthFirstTraversal = ( |
             n <- 0.
            | 
            n: (entryBasicBlock dfVisit: 0 From: nil).
            n != basicBlocks size ifTrue: [
                'Warning: method has ' print.
                (basicBlocks size - n)  print.
                ' unreachable basic blocks: ' print.
                basicBlocks do: [|:bb|
                    bb hasBeenVisited ifFalse: [bb print. ' ' print].
                ].
                '' printLine.
                "Make sure to assign DF numbers to all the blocks, even unreachable
                 ones so that we don't break our neck on these blocks later."
                basicBlocks do: [|:bb| n: (bb dfVisit: n From: nil)].
            ].
            "Now store basic blocks in DF order in addition to what we already have."
            dfBasicBlocks: (vector copySize: noOfBasicBlocks).
            basicBlocks do: [|:bb| dfBasicBlocks at: bb dfNumber Put: bb].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: state\x7fComment: The basic blocks stored in depth-first order (for efficiency
of some algorithms).\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: private'
        
         dfBasicBlocks <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: dumping\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         dumpDominators = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: dumping\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         dumpLinearlyOnFile: file = ( |
             allBBs.
            | 
            allBBs: basicBlocks, gotoOnlyBasicBlocks.
            allBBs sortBy: (|
                element: e1 Precedes: e2 = ( e1 startPC < e2 startPC. )
            |).
            allBBs do: [|:bb| 
                (gotoOnlyBasicBlocks includes: bb) ifTrue: [
                    file write: 'short circuited: '.
                ].
                bb dumpOnFile: file.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: controlStructures\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         dumpLoops = ( |
             i <- 0.
            | 
            basicBlocks do: [|:bb|
                bb isLoopHeader ifTrue: [
                    'Loop ' print. i print. ': ' print.
                    i: 1 + i.
                    bb print. ' ' print.
                    bb loopNodes do: [|:b|
                        b != bb ifTrue: [b print. ' ' print].
                    ].
                    '' printLine.
                    'exit targets: ' print.
                    bb loopExitEdgesDo: [|:from. :to| to print. ' ' print].
                    '' printLine.
                ].
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: dumping\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         dumpStringFor: bb = ( |
            | 
            bb printString, 
            (dumpDominators ifTrue: ['\\ndom=', bb dominator printString] False: '')).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: dumping\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         dumpToVCG = ( |
             f.
             name <- ''.
            | 
            name: myCodeAttribute myMethod nonVirtualName.
            f: (os_file openForWriting: '~/self/objects/vcg/', name, '.vcg').
            f writeLine: 'graph: { '.
            f writeLine: '  layoutalgorithm: dfs'.
            basicBlocks do: [|:bb. :i. str <- ''. |
                str: (dumpStringFor: bb).
                f writeLine: '  node: { title: "', str,
                                   '" \tlabel: "', 
                                   (0 = i ifTrue: ['method: ',name, '\\n'] False: ''),
                                   str, '" ', (colorStringFor: bb), ' }'.
            ].
            basicBlocks do: [|:fromBB|
                fromBB successors do: [|:toBB. back <- false. |
                    back: (fromBB isBackEdgeTo: toBB).
                    f write: '  '.         
                    back ifTrue: [f write: 'backedge']
                          False: [f write: 'edge'].
                    f write: ': { sourcename: "', (dumpStringFor: fromBB), '" ',
                                 'targetname: "', (dumpStringFor: toBB),   '" '.
                    back ifTrue: [f write: 'linestyle: dashed '].
                    f writeLine: '}'.
                ].
            ].
            f writeLine: '}'.
            f close.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: basics\x7fComment: The basic block which represents method entry.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         entryBasicBlock = ( |
            | 
            basicBlocks first).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: controlStructures\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         findLoops = ( |
            | 
            basicBlocks do: [|:b1|
                b1 successors do: [|:b2|
                    (b1 isBackEdgeTo: b2) ifTrue: [
                        (b1 isDominatedBy: b2) ifFalse: [
                            error: 'loop edge ', b1 printString, 
                                   '->', b2 printString,
                                   ': tail not dominated by head ',
                                   '(currently not supported)'.
                        ].
                        pep debug ifTrue: [
                            'Loop edge: ' print. b1 print. '->' print. b2 printLine.
                        ].
                        b2 computeLoopOnEdgeFrom: b1.
                    ].
                ].
            ].
            pep debug ifTrue: [dumpLoops].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: codeGen\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generateCode = ( |
            | 
            pep withCodeGeneratorFor: myCodeAttribute Do: [|:gen|
                generateUsing: gen.
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: codeGen\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         generateUsing: gen = ( |
             name <- ''.
            | 
            name: myCodeAttribute nameOfResult.
            gen finishGenName: name Of: (gen inNewBlockDo: [
                makeArgsAssignable: gen.
                pep traceCalls ifTrue: [gen traceMethodEntry].
                entryBasicBlock firstInstance generate0Using: gen.
            ])).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: basics\x7fComment: Get the basic block whose first instruction has given PC.
Should primarily use this method when linking basic blocks
in the building phase.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         getBasicBlockAt: startPC = ( |
             n <- 0.
            | 
            n: noOfBasicBlocks.
            10 < n ifTrue: [
                "When there are only a few bb's it is faster to use a linear search."
                basicBlocks do: [|:bb|
                    startPC = bb startPC ifTrue: [^ bb].
                ].
                error: 'should have found basic block(1)'
            ] False: [
                basicBlocks at: 
                    (0 to: -1 + n
                     BinarySearchBySignOf: [|:i| startPC - (basicBlocks at: i) startPC]
                                 IfAbsent: [error: 'should have found basic block(2)']).
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: state\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: private'
        
         gotoOnlyBasicBlocks <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         initCodeAttribute: ca Instructions: instr = ( |
            | 
            myCodeAttribute:  ca.
            dfBasicBlocks:    nil.  "To catch errors."
            buildBasicBlocks: instr.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: controlStructures\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         instantiateFlowGraph = ( |
            | 
            "Create and finish separately to handle forward references."
            dfBasicBlocks do: [|:bb| bb createFirstInstance].
            dfBasicBlocks do: [|:bb| bb firstInstance finishFirstInstance].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: buildBasicBlocks\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         linkBasicBlocks = ( |
            | 
            setSuccessorLinks.
            markExceptionHandlers.  "Do before short-circuiting!"
            shortCircuitTrivialBBs.
            setPredecessorLinks.
            markJsrTargets.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: codeGen\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         makeArgsAssignable: gen = ( |
            | 
            "Note: synchronization and other facilities may introduce blocks
             so that at this point we are not at the generated method's outermost
             scope, but nested in some block. We prefer to have the locals at the
             innermost scope to have fewer (deep) lexical accesses. For arg's,
             however, we must put them at the outermost scope, since else they are
             args of the not the method itself. Ole, 190696."

            myCodeAttribute myMethod
                defineLocalSlotsAddArg: [|:name| gen addArg: name To: gen outermostBlock]
                              AddLocal: [|:name| gen addLocal: name]
                              Transfer: [|:fromName. :toName|
                                          gen pushLocalVarNamed: fromName.
                                          gen setLocalVarNamed:  toName.
                                          gen pop1. "Pop result of assignment."].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: controlStructures\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         makeControlStructures = ( |
            | 
            depthFirstTraversal.
            computeDominatorTree.
            findLoops.
            selectLoopSuccessors.
            false ifTrue: [
                'isPrime' = myCodeAttribute myMethod nameAsAscii ifTrue: [
                    dumpToVCG.
                ].
            ].
            instantiateFlowGraph.
            reduceFlowGraph1.
            addLoopEdges.
            entryBasicBlock firstInstance verifyExceptions.
            pep debug ifTrue: [entryBasicBlock firstInstance dump].
            "printExpansion."
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: buildBasicBlocks\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         markExceptionHandlers = ( |
            | 
            "Note: this method runs before short-circuiting of tivial 
             basic blocks. Else the PC of an exception handler will 
             be one greater than indicated by the exception object when 
             the handler code starts with a trivial BB that has been 
             short-circuited."
            myCodeAttribute exceptions do: [|:ex|
                (getBasicBlockAt: ex handler_pc) isExceptionHandler: true.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: buildBasicBlocks\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         markHeaders: instr = ( |
             ca.
             fellThrough <- bootstrap stub -> 'globals' -> 'true' -> ().
            | 
            ca: myCodeAttribute.
            instr first isBBHeader: true.  "Need to special-case the start
                                            instruction to avoid error below."
            ca exceptions do: [|:ex|
                (ca instructionAtPC: ex start_pc  ) isBBHeader: true.
                (ca instructionAtPC: ex end_pc    ) isBBHeader: true.
                (ca instructionAtPC: ex handler_pc) isBBHeader: true.
            ].
            "Note that fellThrough is 'true' the first time to avoid troubles with
             the special start instruction."
            checkPCs: instr.  "Check that the cached PC's match those in the instructions."
            "Mark headers using the cached jump addresses. More efficient than the alternative
             found below."
            ca allBranchButJsrReturnPCsDo: [|:pc|
                (ca instructionAtPC: pc) isBBHeader: true.
            ].
            instr do: [|:in|
                false ifTrue: [
                    "The following code marks bb header based on the PC's found in the
                     instructions. It is less efficient than the above alternative."
                    in targetPCsDo: [|:pc| (ca instructionAtPC: pc) isBBHeader: true].
                ].
                fellThrough ifFalse: [in isBBHeader: true].
                fellThrough: in fallsThrough.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: buildBasicBlocks\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         markJsrTargets = ( |
             entry.
             startInstr.
            | 
            entry: entryBasicBlock.
            startInstr: entry instr first.
            entry successors do: [|:succ|
                (startInstr isJsrTargetPC: succ startPC) ifTrue: [
                    succ isJsrTarget: true.
                ].
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: state\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         myCodeAttribute.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: buildBasicBlocks\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         newBasicBlockInstr: instr = ( |
            | 
            basicBlockProto copyInstr: instr CodeAttribute: myCodeAttribute).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: basics\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         noOfBasicBlocks = ( |
            | basicBlocks size).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'traits' -> 'clonable' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: expressionTrees\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         primeStack: stack ToHeight: h = ( |
            | 
            stack clear.
            h do: [|:i|
                stack push: (stackRegisters at: i IfAbsent: [|r|
                                 r: (stackRegisterProto copyLocation: i).
                                 stackRegisters add: r.
                                 r.
                             ]).
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: controlStructures\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         printExpansion = ( |
             s1 <- 0.
             s2 <- 0.
            | 
            basicBlocks do: [|:bb| s1: s1 + bb instr size].
            s2: entryBasicBlock expandedSize.
            'Number of instructions in method:                     ' print. 
            s1 printLine.
            'Number of instructions with raw expansion (no merge): ' print.
            s2 printLine.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: controlStructures\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         reduceFlowGraph1 = ( |
             e <- 0.
            | 
            e: pep splitExpansion.
            reduceFlowGraph2.
            false ifTrue: [
                e < pep splitExpansion ifTrue: [
                    'Needed splitting (' print.
                    basicBlocks size print. 
                    ' BBs): ' print.
                    myCodeAttribute myMethod nonVirtualName printLine.
                ].
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: controlStructures\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         reduceFlowGraph2 = ( |
             active.
            | 
            active: sequence copy.
            active desiredMinCapacity: dfBasicBlocks size.
            dfBasicBlocks do: [|:bb. inst|
                "Test for reducedness; some nodes are created in reduced
                 state, e.g., some loop successors (since in this phase 
                 we discount loop exit edges)."
                inst: bb firstInstance.
                inst isReduced ifFalse: [active add: inst].
            ].
            [0 < active size] whileTrue: [
                tryPromotion: active SplitAllowed: false IfNone: [
                    tryAbsorption: active IfNone: [
                        trySimpleSplitForAbsorption: active IfNone: [
                            tryPromotion: active SplitAllowed: true IfNone: [
                                splitOne: active.  "Panic. Just do something!"
                            ].
                        ].
                    ].
                ].
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: controlStructures\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         selectLoopSuccessors = ( |
            | 
            "Process basic blocks in depth-first order so that outer loops are 
             handled before inner loops. This order ensures that when processing
             an inner loop, the exit and restart points of outer loops are known,
             and we can do a better job of selecting exit points for the inner
             loop."
            dfBasicBlocks do: [|:bb| bb selectLoopSuccessor].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: buildBasicBlocks\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         setPredecessorLinks = ( |
            | 
            "Compute reverse links from forward links.
             The 'predecessors' field has already been allocated
             as a sequence, see 'setSuccessorLinks'."
            basicBlocks do: [|:bb|
                bb successors do: [|:s| s predecessors add: bb].
            ].
            basicBlocks do: [|:bb|
                bb predecessors: bb predecessors asVector.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: buildBasicBlocks\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         setSuccessorLinks = ( |
            | 
            basicBlocks do: [|:bb. :i|
                bb predecessors: sequence copy.  "Do now to avoid extra
                                                  pass over basic blocks."
                bb setSuccessors: (basicBlocks at: 1 + i IfAbsent: nil)
                        BlockSet: self.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: buildBasicBlocks\x7fComment: This method eliminates any basic block which consists only
of an unconditional goto. These trivial basic blocks sometimes
creates uncertainty when dealing with exceptions (javac appears 
to be fuzzy about whether to include them in the ranges of
instructions guarded by exception handlers). It is easy to
elimiante such basic blocks up front, and it makes things easier 
down the line.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         shortCircuitTrivialBBs = ( |
             nontriv.
             triv.
            | 
            nontriv: sequence copy.
            triv:    sequence copy.
            basicBlocks do: [|:bb|
                bb isGotoOnly ifTrue: [
                    triv add: bb.
                ] False: [
                    nontriv add: bb.
                    bb successors mapBy: [|:succ. s|
                        s: succ.
                        [s isGotoOnly] whileTrue: [
                            pep assert: [1 = s successors size].
                            s: s successors first.
                        ].
                        s.
                    ].
                ].
            ].
            pep assert: [basicBlocks size = (triv size + nontriv size)].
            basicBlocks size = nontriv size ifTrue: [
                gotoOnlyBasicBlocks: vector.
            ] False: [
                gotoOnlyBasicBlocks: triv asVector.
                basicBlocks:      nontriv asVector.
                pep debug ifTrue: [
                    'Short circuited ' print.
                    triv size print.
                    ' trivial BBs: ' print.
                    triv do: [|:bb| bb print. ' ' print].
                    '' printLine.
                ].
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: controlStructures\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         splitOne: active = ( |
             choice.
             csize <- 0.
             incoming <- 0.
             outgoing <- 0.
            | 
            active isEmpty ifTrue: [^ self].
            "Use heuristic to pick instance to split. In order of importance:
              1. must have at least 2 incoming edges (else no gain from splitting)
              2. no nested instances or nextInstance is unreduced (this requirement
                 makes splitting easier, but may ultimately have to be removed to always
                 ensure that reductions terminate?)
              3. minimize # incoming edges
              4. minimize code size of split instance
              5. minimize # outgoing edges.
            This heuristic is probably not always optimal. Should probably apply
            a structural criteria, but this will do for a start. If less than the
            full split (see below) is implemented, it may be worth lowering the
            priority of criteria #3."
            csize: maxSmallInt. 
            unreducedIn: active Do: [|:inst. i <- 0. |
                i: inst unresolvedPredecessors size.
                (1 < i) && [inst canBeSplit] ifTrue: [| s <- 0. o <- 0. |
                    o: inst unresolvedSuccessors size.
                    s: inst currentCodeSize.
                    (s < csize) || 
                    [(s = csize) && [i < incoming]] ||
                    [(s = csize) && [i = incoming] && [o < outgoing]] ifTrue: [
                        choice: inst.
                        csize: s.
                        incoming: i.
                        outgoing: o.
                    ].
                ].
            ].
            nil = choice ifTrue: [error: 'found no instance to split'].
            2 = choice unresolvedPredecessors size ifTrue: [
                "No need to be fancy in this case. Just split in two."
                choice splitFullyInto: active.
            ] False: [
                "See if less drastic split is possible (to enable promotion; the
                 full split enables absorption). For now just do the full split, since
                 it is the only one implemented!"
                choice splitFullyInto: active.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: expressionTrees\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         stackProto = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'stackProto' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute blockSetProto stackProto.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'stackProto' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         atDepth: i = ( |
            | elms at: (size - 1 - i) IfAbsent: [raiseError: 'stack underflow']).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'stackProto' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         clear = ( |
            | size: 0).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'stackProto' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         contents = ( |
            | 
            elms copySize: size).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'stackProto' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         copy = ( |
             r.
            | 
            r: resend.copy.
            r elms: elms copy.
            r).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'stackProto' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         copyCodeAttribute: ca = ( |
            | copy initCodeAttribute: ca).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'stackProto' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: private'
        
         elms <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'stackProto' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         initCodeAttribute: ca = ( |
            | 
            myCodeAttribute: ca.
               "Note: we need two extra stack locations because we expand away 
                certain instructions and uses the stack in the process, e.g.,
                iinc -> push const; push var; add; set var."
            elms: (vector copySize: 2 + myCodeAttribute max_stack).
            size: 0).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'stackProto' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isEmpty = ( |
            | 0 = size).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'stackProto' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         myBasicBlock.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'stackProto' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         myCodeAttribute.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'stackProto' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'traits' -> 'clonable' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'stackProto' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         pop = ( |
            | 
            size: -1 + size.
            elms at: size IfAbsent: [raiseError: 'stack empty']).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'stackProto' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         pop: n = ( |
            | size: size - n).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'stackProto' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         push: v = ( |
             s <- 0.
            | 
            s: size.
            elms at: s Put: v IfAbsent: [
                0 > s ifTrue: [raiseError: 'stack underflow']
                       False: [raiseError: 'stack overflow'].
            ].
            size: 1 + s.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'stackProto' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         raiseError: e = ( |
            | 
            myCodeAttribute raiseError: e).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'stackProto' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         size <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'stackProto' -> () From: ( | {
         'Comment: Return top element from stack 
without popping it.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         top = ( |
            | 
            atDepth: 0).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: expressionTrees\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         stackRegisterProto = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'stackRegisterProto' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute blockSetProto stackRegisterProto.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'stackRegisterProto' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         copyLocation: i = ( |
            | 
            resend.copy initLocation: i).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'stackRegisterProto' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         initLocation: i = ( |
            | 
            location: i).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'stackRegisterProto' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (-1)\x7fVisibility: public'
        
         location <- -1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'stackRegisterProto' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'traits' -> 'clonable' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: expressionTrees\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (sequence)\x7fVisibility: private'
        
         stackRegisters <- bootstrap stub -> 'globals' -> 'sequence' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: dumping\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         traceBasicBlocks = ( |
            | 
            noOfBasicBlocks print. ' basic blocks' print.
            "': ' print.
            basicBlocks do: [|:bb. :i|
                bb print.
                i != (basicBlocks size - 1) ifTrue: [', ' print].
            ]."
            '' printLine.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: controlStructures\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         tryAbsorption: active IfNone: noneBlk = ( |
            | 
            unreducedIn: active Do: [|:instance|
                1 = instance unresolvedPredecessors size ifTrue: [|pred|
                    pred: instance unresolvedPredecessors first.
                    (pred tryAbsorb: instance) ifTrue: [^ self].
                ].
            ].
            noneBlk value).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: controlStructures\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         tryPromotion: active SplitAllowed: split IfNone: noneBlk = ( |
             change <- bootstrap stub -> 'globals' -> 'false' -> ().
            | 
            split ifTrue: [
                "If we are allowed to split, it is best to work top down to minimize
                 code expansion. The higher up we promote to, the more incoming edges
                 we can eliminate from the instance being promoted.
                 If the top-down doesn't succeed (e.g., because the promotable instances
                 are still not reachable from the topmost instance), try the other 
                 approach. It may increase code size more, but this is still better than
                 being stuck."
                (entryBasicBlock firstInstance tryTopDownPromotion: active
                                                      SplitAllowed: split) ifTrue: [^ self].
            ].
            unreducedIn: active Do: [|:instance|
                (instance tryPromotion: active SplitAllowed: split) ifTrue: [
                    split ifTrue: [^ self].   "When splitting do only one promotion now."
                    change: true.
                ].
            ].
            change ifFalse: noneBlk).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: controlStructures\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         trySimpleSplitForAbsorption: active IfNone: noneBlk = ( |
            | 
            unreducedIn: active Do: [|:inst|
                inst canBeSplitAbsorbed ifTrue: [
                    inst splitFullyInto: active.
                    "The absorption of the resulting instances
                     will happen in the next round."
                    ^ self.
                ].
            ].
            noneBlk value).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: controlStructures\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         unreducedIn: active Do: blk = ( |
             i <- 0.
            | 
            [i < active size] whileTrue: [|instance|
                instance: (active at: i).
                instance isReduced ifTrue: [
                    active at: i Put: active last.    "Faster to remove last one."
                    active removeLast.
                    "Don't increment counter, since we just removed i'th element."
                ] False: [
                    blk value: instance.
                    i: 1 + i.
                ].
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> () From: ( | {
         'Category: expressionTrees\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         verifyPathInvariant = ( |
            | 
            "For now just verify stack heights are the same along all paths.
             Really should also verify types of expressions on stack."
            dfBasicBlocks do: [|:bb. ex <- 0. |
                ex: bb entryStackHeight.
                bb isExceptionHandler || [bb isJsrTarget] ifTrue: [ex: ex - 1].
                bb predecessors do: [|:p|
                    ex != p exitStackHeight ifTrue: [
                        myCodeAttribute raiseError: 'unbalanced stack, pc=',
                                                    bb startPC printString.
                    ].
                ].
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: instructions\x7fCategory: branch and jsr PCs\x7fComment: PC\'s mentioned by a branch (goto, if, switch,
but not jsr or falling through a conditional
branch).\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         branchPCs.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: instructions\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         buildInstructions = ( |
             i <- 1.
             indices.
             instr.
            | 
            needsDup2Analysis: false.
            createPCCollections.
            assignedLocals: (vector copySize: max_locals FillingWith: false).
            instr: (vector copySize: 1 + code size).  "Size is probably slightly overkill, but OK."
            instr at: 0 Put: (start copy myCodeAttribute: self). "Add the special start instruction."
            indices: (vector copySize: code size).
            pcToIndex: indices.
            opcodesDo: [|:op|
                "Sometimes the pc to index mapping may be invalidated, when we fiddle with
                 exceptions. It will then be rebuild. Still, we build it here since not all
                 methods contain exception handlers (and it is cheaper to build here)."
                instr   at: i      Put: ((instructions at: op) buildFromCA: self).
                indices at: lastPC Put: i.  "'lastPC' is index of 'op'."
                i: 1 + i.
            ].
            finishPCCollections.
            pep incBytecodeCount: -1 + i.  "Don't count the start instruction."
            myInstructions: (instr copySize: i)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         caTranslateIfFail: eb = ( |
             mirWithMethod.
            | 
            errBlk: [|:e| ^ eb value: e].
            pep debug ifTrue: [checkExceptionTableAssumptions].
            usingBranches: pep useBranches && [hasExceptions not].
            buildInstructions.

            false && hasExceptions ifTrue: [      "Just to try it."
                'double-translating method with exceptions' printLine.
                usingBranches: true.
                translateWithBranches.
                usingBranches: false.
                myInstructions do: [|:in| in isBBHeader: false].  "Clean up."
            ].

            usingBranches ifTrue: [mirWithMethod: translateWithBranches]
                           False: [mirWithMethod: translateWithoutBranches].
            errBlk: nil.  "To catch wrong-use errors."
            myMethod setUnsyncCategory: mirWithMethod Name: nameOfResult).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         caload = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'caload' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute caload.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'caload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         arrayref.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'caload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'caload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         index.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'caload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'caload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'caload'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'caload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 52.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'caload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'arrayLoad' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'caload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         castore = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'castore' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute castore.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'castore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         arrayref.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'castore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'castore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         index <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'castore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'castore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'castore'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'castore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 85.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'castore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'arrayStore' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'castore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'castore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: exceptions\x7fComment: Verify that if e1 and e2 are exceptions, such that e1 occurs earlier than e2 in the
exception table, then e1 and e2 either have disjoint coverage ranges or e2\'s range
is a superset of e1\'s.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         checkExceptionTableAssumptions = ( |
            | 
            exceptions do: [|:ex2. :i2|
                i2 do: [|:i1. ex1|
                    ex1: (exceptions at: i1).
                    (ex1 disjointRangeFrom: ex2) not && [(ex2 rangeIsSupersetOf: ex1) not] ifTrue: [
                        error: 'unexpected structure of exception table:\n',
                               '  ', ex1 printString, '\n  ', ex2 printString.
                    ].
                ].
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         checkcast = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'checkcast' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute checkcast.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'checkcast' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         classRef.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'checkcast' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'checkcast' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generateUsingBr: gen = ( |
             bcg.
             castOkLabel.
             local <- ''.
            | 
            bcg: gen bytecodeGen.
            castOkLabel: bcg newLabel.

            "Transfer the object to a local slot."
            local: gen setNewLocalVarAndPop.

            "Test for null."
            gen pushLocalVarNamed: local.
            gen generateSend: pep prefix, 'ifnull'.
            bcg branchIfTrue: castOkLabel.

            gen pushLocalVarNamed: local.
            generateTypeTestUsing: gen.
            bcg branchIfTrue: castOkLabel.

            "The cast failed."
            gen pushLocalVarNamed: local.
            gen generateSend: 'failed_checkcast'.  "Throw the exception."
            gen pop1.   "Pop result of previous send, even though it never
                         returns (need to do this for stack balancing)."

            bcg defineLabel: castOkLabel.
            gen pushLocalVarNamed: local.  "Must leave reference on stack."
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'checkcast' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'checkcast' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'checkcast'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'checkcast' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         objectRef.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'checkcast' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 192.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: abstract\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         typeTest = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'typeTest' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute typeTest.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'checkcast' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'typeTest' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'checkcast' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: basic\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (byteVector)\x7fVisibility: public'
        
         code <- bootstrap stub -> 'globals' -> 'byteVector' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'constImplicit' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'constTop' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'constTop' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generateUsing: gen = ( |
             c.
             cmir.
            | 
            c: constValue.
            cmir: (reflect: c).
            "Special case for smallInts and floats. Can go inline in code
             (maybe floats shouldn't for accuracy?). 
             All the rest are installed in class."
            cmir isReflecteeInteger ifTrue: [gen pushInteger: c. ^ self].
            cmir isReflecteeFloat   ifTrue: [gen   pushFloat: c. ^ self].
            loadConstantFromPath: (gen myCodeAttribute myClassFile pathForConstant: c)
                           Using: gen).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'constTop' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         loadConstantFromPath: path Using: gen = ( |
            | 
            path do: [|:pathComponent. :i|
                0 = i ifTrue: [ 
                    [this_class. "For senders."].
                    gen generateSend: pathComponent DelegateThrough: 'this_class'.
                ] False: [
                    gen generateSend: pathComponent.
                ].
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: abstract\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         loadLocalOrConst = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'loadLocalOrConst' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute loadLocalOrConst.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'constTop' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'loadLocalOrConst' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: abstract\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         conv = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'conv' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute conv.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'conv' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'unaryOp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: instructions\x7fCategory: branch and jsr PCs\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         createPCCollections = ( |
            | 
            branchPCs:      set copy.
            jsrTargetPCs:   set copy.
            jsrReturnPCs:   sequence copy.  "No duplicates will appear here."
            usingBranches ifTrue: [
                fallThroughPCs: dummyCollection.  "Don't need them in this case."
            ] False: [
                fallThroughPCs: sequence copy.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: translating with branches\x7fCategory: exceptions\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         currentAlert <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         d2f = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'd2f' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute d2f.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'd2f' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'd2f' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'd2f' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'd2f'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'd2f' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 144.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'd2f' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'conv' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'd2f' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'd2f' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         d2i = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'd2i' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute d2i.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'd2i' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'd2i' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'd2i' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'd2i'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'd2i' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 142.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'd2i' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'conv' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'd2i' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'd2i' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         d2l = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'd2l' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute d2l.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'd2l' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'd2l' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'd2l' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'd2l'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'd2l' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 143.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'd2l' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'conv' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'd2l' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'd2l' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'd2l' -> () From: ( | {
         'Comment: Whether this instruction produces
a 64 bit value (long or double).
Needed to implement the \"dup2\" etc
instructions.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         yields64Bits = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         dadd = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dadd' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute dadd.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dadd' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dadd' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dadd' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'dadd'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dadd' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 99.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dadd' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'binaryOp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dadd' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dadd' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dadd' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dadd' -> () From: ( | {
         'Comment: Whether this instruction produces
a 64 bit value (long or double).
Needed to implement the \"dup2\" etc
instructions.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         yields64Bits = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         daload = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'daload' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute daload.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'daload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         arrayref.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'daload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'daload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         index.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'daload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'daload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'daload'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'daload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 49.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'daload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'arrayLoad' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'daload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'daload' -> () From: ( | {
         'Comment: Whether this instruction produces
a 64 bit value (long or double).
Needed to implement the \"dup2\" etc
instructions.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         yields64Bits = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         dastore = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dastore' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute dastore.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         arrayref.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         index <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'dastore'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 82.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'arrayStore' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         dcmpg = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dcmpg' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute dcmpg.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dcmpg' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dcmpg' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dcmpg' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'dcmpg'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dcmpg' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 152.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dcmpg' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'binaryOp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dcmpg' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dcmpg' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dcmpg' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         dcmpl = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dcmpl' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute dcmpl.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dcmpl' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dcmpl' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dcmpl' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'dcmpl'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dcmpl' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 151.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dcmpl' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'binaryOp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dcmpl' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dcmpl' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dcmpl' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         dconst_0 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dconst_0' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute dconst_0.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dconst_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         constValue = 0.0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dconst_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dconst_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dconst_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'dconst_0'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dconst_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 14.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dconst_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'constImplicit' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dconst_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dconst_0' -> () From: ( | {
         'Comment: Whether this instruction produces
a 64 bit value (long or double).
Needed to implement the \"dup2\" etc
instructions.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         yields64Bits = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         dconst_1 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dconst_1' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute dconst_1.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dconst_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         constValue = 1.0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dconst_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dconst_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dconst_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'dconst_1'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dconst_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 15.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dconst_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'constImplicit' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dconst_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dconst_1' -> () From: ( | {
         'Comment: Whether this instruction produces
a 64 bit value (long or double).
Needed to implement the \"dup2\" etc
instructions.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         yields64Bits = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         ddiv = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ddiv' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute ddiv.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ddiv' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ddiv' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ddiv' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'ddiv'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ddiv' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 111.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ddiv' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'binaryOp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ddiv' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ddiv' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ddiv' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ddiv' -> () From: ( | {
         'Comment: Whether this instruction produces
a 64 bit value (long or double).
Needed to implement the \"dup2\" etc
instructions.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         yields64Bits = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: translating with branches\x7fCategory: exceptions\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         defineExcRegions: bcg = ( |
            | 
            exceptionGroups do: [|:exGrp. ex|
                ex: exGrp first.
                bcg from: (ex   startLabel: self)
                      To: (ex     endLabel: self)
                 TrapNLR: (ex handlerLabel: self).
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         dload = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dload' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute dload.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         index <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'dload'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 24.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'load' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dload' -> () From: ( | {
         'Comment: Whether this instruction produces
a 64 bit value (long or double).
Needed to implement the \"dup2\" etc
instructions.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         yields64Bits = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         dload_0 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dload_0' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute dload_0.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dload_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dload_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         index = 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dload_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dload_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'dload_0'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dload_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 38.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dload_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'load_n' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dload_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dload_0' -> () From: ( | {
         'Comment: Whether this instruction produces
a 64 bit value (long or double).
Needed to implement the \"dup2\" etc
instructions.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         yields64Bits = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         dload_1 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dload_1' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute dload_1.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dload_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dload_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         index = 1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dload_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dload_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'dload_1'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dload_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 39.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dload_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'load_n' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dload_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dload_1' -> () From: ( | {
         'Comment: Whether this instruction produces
a 64 bit value (long or double).
Needed to implement the \"dup2\" etc
instructions.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         yields64Bits = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         dload_2 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dload_2' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute dload_2.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dload_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dload_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         index = 2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dload_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dload_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'dload_2'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dload_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 40.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dload_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'load_n' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dload_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dload_2' -> () From: ( | {
         'Comment: Whether this instruction produces
a 64 bit value (long or double).
Needed to implement the \"dup2\" etc
instructions.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         yields64Bits = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         dload_3 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dload_3' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute dload_3.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dload_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dload_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         index = 3.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dload_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dload_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'dload_3'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dload_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 41.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dload_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'load_n' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dload_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dload_3' -> () From: ( | {
         'Comment: Whether this instruction produces
a 64 bit value (long or double).
Needed to implement the \"dup2\" etc
instructions.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         yields64Bits = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         dmul = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dmul' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute dmul.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dmul' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dmul' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dmul' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'dmul'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dmul' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 107.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dmul' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'binaryOp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dmul' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dmul' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dmul' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dmul' -> () From: ( | {
         'Comment: Whether this instruction produces
a 64 bit value (long or double).
Needed to implement the \"dup2\" etc
instructions.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         yields64Bits = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         dneg = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dneg' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute dneg.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dneg' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dneg' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dneg' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'dneg'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dneg' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 119.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dneg' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'unaryOp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dneg' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dneg' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dneg' -> () From: ( | {
         'Comment: Whether this instruction produces
a 64 bit value (long or double).
Needed to implement the \"dup2\" etc
instructions.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         yields64Bits = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         drem = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'drem' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute drem.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'drem' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'drem' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'drem' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'drem'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'drem' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 115.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'drem' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'binaryOp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'drem' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'drem' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'drem' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'drem' -> () From: ( | {
         'Comment: Whether this instruction produces
a 64 bit value (long or double).
Needed to implement the \"dup2\" etc
instructions.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         yields64Bits = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         dreturn = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dreturn' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute dreturn.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dreturn' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dreturn' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dreturn' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'dreturn'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dreturn' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 175.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dreturn' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'returns' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dreturn' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dreturn' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         returnValue.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         dstore = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dstore' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute dstore.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dstore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dstore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         index.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dstore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dstore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'dstore'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dstore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 57.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dstore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'store' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dstore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dstore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         dstore_0 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dstore_0' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute dstore_0.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dstore_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dstore_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         index = 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dstore_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dstore_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'dstore_0'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dstore_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 71.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dstore_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'store_n' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dstore_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dstore_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         dstore_1 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dstore_1' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute dstore_1.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dstore_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dstore_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         index = 1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dstore_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dstore_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'dstore_1'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dstore_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 72.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dstore_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'store_n' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dstore_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dstore_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         dstore_2 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dstore_2' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute dstore_2.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dstore_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dstore_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         index = 2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dstore_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dstore_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'dstore_2'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dstore_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 73.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dstore_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'store_n' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dstore_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dstore_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         dstore_3 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dstore_3' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute dstore_3.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dstore_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dstore_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         index = 3.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dstore_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dstore_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'dstore_3'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dstore_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 74.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dstore_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'store_n' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dstore_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dstore_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         dsub = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dsub' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute dsub.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dsub' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dsub' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dsub' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'dsub'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dsub' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 103.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dsub' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'binaryOp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dsub' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dsub' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dsub' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dsub' -> () From: ( | {
         'Comment: Whether this instruction produces
a 64 bit value (long or double).
Needed to implement the \"dup2\" etc
instructions.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         yields64Bits = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: instructions\x7fCategory: branch and jsr PCs\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         dummyCollection = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dummyCollection' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute dummyCollection.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dummyCollection' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         add: x = ( |
            | self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dummyCollection' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         asVector = ( |
            | 
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dummyCollection' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         do: blk = ( |
            | self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dummyCollection' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         mapBy: blk = ( |
            | self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: dumping\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         dumpExceptionsOnFile: file = ( |
            | 
            exceptions isEmpty ifTrue: [^ self].
            file writeLine: 'Exception table:'.
            file writeLine: '   from   to  target type'.
            exceptions do: [|:exc| exc dumpOnFile: file].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: dumpHierarchy\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         dumpHierarchy = ( |
             s.
            | 
            s: sequence copy.
            javaInstructionsDo: [|:in| s add: in].
            dumpHierarchyFrom: s On: 'instr-types.vcg').
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: dumpHierarchy\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         dumpHierarchy123 = ( |
             s.
            | 
            s: sequence copy.
            javaInstructionsDo: [|:instr. mir|
                mir: (reflect: instr).
                (instr = topExp) || [instr = topStmt] ||
                [(mir inheritsFrom: (reflect: topExp)) not &&
                 (mir inheritsFrom: (reflect: topStmt)) not] ifTrue: [s add: instr].
            ].
            s add: topExp.
            s add: topStmt.
            dumpHierarchyFrom: s On: 'hierarchy-top.vcg'.

            s removeAll.
            javaInstructionsDo: [|:instr|
                ((reflect: instr) inheritsFrom: (reflect: topExp)) ifTrue: [s add: instr].
            ].
            dumpHierarchyFrom: s On: 'hierarchy-exp.vcg'.

            s removeAll.
            javaInstructionsDo: [|:instr|
                ((reflect: instr) inheritsFrom: (reflect: topStmt)) ifTrue: [s add: instr].
            ].
            dumpHierarchyFrom: s On: 'hierarchy-stmt.vcg'.

            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: dumpHierarchy\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         dumpHierarchyFrom: instrs On: filename = ( |
             done.
             f.
             groups.
            | 
            groups: (getGroupsForDump: instrs).
            f: (os_file openForWriting: filename).
            'Dumping java instruction hierarchy to ' print. filename print. '... ' print.
            done: set copy.
            done add: (reflect: top parent).
            f writeLine: 'graph: {'.
            f writeLine: '  layoutalgorithm: tree'.
            f writeLine: '  edge.arrowstyle: none'.
            groups do: [|:g. :k. n <- ''. pn <- ''. mir. pmir. |
                n: '"', (getDumpNameForGroup: g), '"'.
                f writeLine: '  node: {title: ', n, ' label: ', n, ' }'.
                g do: [|:in| done add: (reflect: in)].
                pmir: (reflect: g first parent).   "They should all have the same parent."
                [|:exit|
                    pmir = (reflect: traits clonable) ifTrue: exit.
                    pn: '"', pmir reflectee dumpName, '"'.
                    f writeLine: '  edge: { sourcename: ', pn, 
                                          ' targetname: ', n, ' }'.
                    (done includes: pmir) ifTrue: exit.
                    done add: pmir.
                    f writeLine: '  node: { title: ', pn, ' label: ', pn, ' }'.
                    mir: pmir.
                    n:   pn.
                    pmir: (reflect: pmir reflectee parent).
                ] loopExit.
            ].
            f writeLine: '}'.
            f close.
            'done.' printLine.
            'Print command:' printLine.
            '   xvcg -landscape -paper letter -psoutput fisk.ps ' print.
            filename printLine.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: dumping\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         dumpOnFile: file = ( |
            | 
            myBlockSet dumpLinearlyOnFile: file.
            dumpExceptionsOnFile: file.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         dup = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute dup.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: private'
        
         buf <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: private'
        
         dup <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'dup'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 89.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: abstract\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         dup1s = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup1s' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute dup1s.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup1s' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         xdepth = 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup1s' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (1)\x7fVisibility: private'
        
         dupCount = 1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup1s' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         noOfValuesToDuplicate: stack = ( |
            | 
            1).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: abstract\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         dups = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dups' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute dups.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup1s' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dups' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup1s' -> () From: ( | {
         'Category: dup2 analysis\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         setDupCount: stack = ( |
            | 
            stack top isDoubleWord ifTrue: [splitError: stack].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         dup2 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup2' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute dup2.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: private'
        
         buf <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: private'
        
         dup <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (1)\x7fVisibility: private'
        
         dupCount <- 1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'dup2'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 92.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: abstract\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         dup2s = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup2s' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute dup2s.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup2s' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         xdepth = 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         dup2_x1 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup2_x1' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute dup2_x1.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup2_x1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: private'
        
         buf <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup2_x1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: private'
        
         dup <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup2_x1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (1)\x7fVisibility: private'
        
         dupCount <- 1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup2_x1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup2_x1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup2_x1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'dup2_x1'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup2_x1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 93.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup2_x1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup2s' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup2_x1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup2_x1' -> () From: ( | {
         'Category: dup2 analysis\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         setXdepth: stack = ( |
            | 
            "Just verify that we don't have a double word below
             the words we are duplicating."
            (stack atDepth: dupCount) isDoubleWord ifTrue: [splitError: stack].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup2_x1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         xdepth = 1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         dup2_x2 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup2_x2' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute dup2_x2.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup2_x2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: private'
        
         buf <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup2_x2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: private'
        
         dup <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup2_x2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (1)\x7fVisibility: private'
        
         dupCount <- 1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup2_x2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup2_x2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         interp: stack = ( |
            | 
            stack top yields64Bits ifTrue: [xdepth: 1] 
                                    False: [xdepth: 2].
            resend.interp: stack).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup2_x2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup2_x2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'dup2_x2'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup2_x2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 94.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup2_x2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup2s' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup2_x2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup2_x2' -> () From: ( | {
         'Category: dup2 analysis\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         setXdepth: stack = ( |
            | 
            "Look at the stack entry below the one being duplicated
             to figure out what xdepth should be."
            (stack atDepth: dupCount) isDoubleword ifTrue: [
                xdepth: 1.
            ] False: [
                (stack atDepth: 1 + dupCount) isDoubleWord ifTrue: [splitError: stack].
                xdepth: 2.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup2_x2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (2)\x7fVisibility: private'
        
         xdepth <- 2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup2s' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         buildCA: ca = ( |
            | 
            ca needsDup2Analysis: true.
            resend.buildCA: ca).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup2s' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         interp: stack = ( |
            | 
            dupCount: (noOfValuesToDuplicate: stack).
            resend.interp: stack).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup2s' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         noOfValuesToDuplicate: stack = ( |
            | 
            stack top yields64Bits ifTrue: 1
                                    False: 2).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup2s' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dups' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup2s' -> () From: ( | {
         'Category: dup2 analysis\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         setDupCount: stack = ( |
            | 
            stack top isDoubleWord ifTrue: [
                dupCount: 1.
            ] False: [
                (stack atDepth: 1) isDoubleWord ifTrue: [splitError: stack].
                dupCount: 2.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         dup_x1 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup_x1' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute dup_x1.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup_x1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: private'
        
         buf <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup_x1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: private'
        
         dup <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup_x1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup_x1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup_x1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'dup_x1'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup_x1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 90.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup_x1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup1s' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup_x1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup_x1' -> () From: ( | {
         'Category: dup2 analysis\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         setXdepth: stack = ( |
            | 
            (stack atDepth: dupCount) isDoubleWord ifTrue: [splitError: stack].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup_x1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         xdepth = 1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         dup_x2 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup_x2' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute dup_x2.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup_x2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: private'
        
         buf <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup_x2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: private'
        
         dup <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup_x2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup_x2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         interp: stack = ( |
            | 
            "Figure out if xdepth is 1 or 2."
            stack top yields64Bits ifTrue: [
                xdepth: 1.  "The two words are really one object."
            ] False: [
                (stack atDepth: 1) yields64Bits ifTrue: [
                    error: 'dup_x2 splits double word'.
                ].
                xdepth: 2.
            ].
            resend.interp: stack).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup_x2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup_x2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'dup_x2'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup_x2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 91.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup_x2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup1s' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup_x2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup_x2' -> () From: ( | {
         'Category: dup2 analysis\x7fComment: Used for dup2 analysis.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         setXdepth: stack = ( |
            | 
            "Figure out if xdepth is 1 or 2 (code generation needs to know)."
            (stack atDepth: dupCount) isDoubleWord ifTrue: [
                xdepth: 1.  "The two words are really one object."
            ] False: [
                (stack atDepth: 1 + dupCount) isDoubleWord ifTrue: [splitError: stack].
                xdepth: 2.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dup_x2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (2)\x7fVisibility: private'
        
         xdepth <- 2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dups' -> () From: ( | {
         'Category: dup2 analysis\x7fComment: Used for dup2 analysis.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fastInterp: stack = ( |
             b.
             d.
            | 
            setDupCount: stack.
            setXdepth:   stack.
            d: (vector copySize: dupCount).
            b: (vector copySize: xdepth).
            d mapBy: [stack pop].
            b mapBy: [stack pop].
            d reverseDo: [|:w| stack push: w].
            b reverseDo: [|:w| stack push: w].
            d reverseDo: [|:w| stack push: w].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dups' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generateUsing: gen = ( |
             names <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
             total <- 0.
            | 
            "Batch-transfer to a single vector to get nicer 
             sequencing of assignments (srcCodeGenerator only)."
            total: dupCount + xdepth.
            names: (gen useTmpNamesUpTo: total).
            "Note: this vector of names may be longer than 'total'."

            gen popCount: total TransferToLocals: names.
            xdepth upTo: total Do: [|:i| gen pushLocalVarNamed: (names at: i)].
            total do: [|:i| gen pushLocalVarNamed: (names at: i)].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dups' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         interp: stack = ( |
            | 
            dup: (vector copySize: dupCount).
            buf: (vector copySize: xdepth).
            dup mapBy: [stack pop getDuplicate].
            buf mapBy: [stack pop].
            dup reverseDo: [|:e| stack push: e].
            buf reverseDo: [|:e| stack push: e].
            dup reverseDo: [|:e| stack push: e].
            resend.interp: stack).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: abstract\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         stackOp = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'stackOp' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute stackOp.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dups' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'stackOp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dups' -> () From: ( | {
         'Category: dup2 analysis\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         setXdepth: stack = ( |
            | self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'dups' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         yields64Bits = ( |
            | 
            error: 'dont ask me (I should never be on expression stack)').
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: errorHandling\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         errBlk.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: errorHandling\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         errorPrefix = ( |
            | 
            'class=',   myClassFile classNameWithDots,
            ', method=', myMethod nameAsAscii).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: translating with branches\x7fCategory: exceptions\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         excAlertIndices.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: exceptions\x7fComment: A group of exceptions is all the exceptions with the same coverage range.
Return a vector of all groups from this exception table.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         exceptionGroups = ( |
             g.
             grps.
             i <- 0.
             lim <- 0.
            | 
            grps: sequence copy.  "A group is all exceptions with the exact same range."
            g: sequence copy.
            lim: exceptions size.
            [i < lim] whileTrue: [
                g removeAll.
                g add: (exceptions at: i).
                i: 1 + i.
                [(i < lim) && [(exceptions at: i) sameRangeAs: g last]] whileTrue: [
                    g add: (exceptions at: i).
                    i: 1 + i.
                ].
                grps add: g asVector.
            ].
            grps asVector).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: exceptions\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: public'
        
         exceptions <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         f2d = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'f2d' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute f2d.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'f2d' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'f2d' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'f2d' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'f2d'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'f2d' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 141.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'f2d' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'conv' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'f2d' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'f2d' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'f2d' -> () From: ( | {
         'Comment: Whether this instruction produces
a 64 bit value (long or double).
Needed to implement the \"dup2\" etc
instructions.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         yields64Bits = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         f2i = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'f2i' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute f2i.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'f2i' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'f2i' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'f2i' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'f2i'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'f2i' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 139.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'f2i' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'conv' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'f2i' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'f2i' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         f2l = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'f2l' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute f2l.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'f2l' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'f2l' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'f2l' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'f2l'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'f2l' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 140.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'f2l' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'conv' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'f2l' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'f2l' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'f2l' -> () From: ( | {
         'Comment: Whether this instruction produces
a 64 bit value (long or double).
Needed to implement the \"dup2\" etc
instructions.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         yields64Bits = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fadd = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fadd' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute fadd.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fadd' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fadd' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fadd' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'fadd'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fadd' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 98.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fadd' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'binaryOp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fadd' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fadd' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fadd' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: instructions\x7fCategory: branch and jsr PCs\x7fComment: PC\'s that we fall through to, when a conditional
branch is not taken.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         fallThroughPCs.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         faload = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'faload' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute faload.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'faload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         arrayref.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'faload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'faload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         index.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'faload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'faload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'faload'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'faload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 48.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'faload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'arrayLoad' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'faload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fastore = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fastore' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute fastore.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         arrayref.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         index <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'fastore'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 81.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'arrayStore' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fcmpg = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fcmpg' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute fcmpg.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fcmpg' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fcmpg' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fcmpg' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'fcmpg'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fcmpg' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 150.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fcmpg' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'binaryOp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fcmpg' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fcmpg' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fcmpg' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fcmpl = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fcmpl' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute fcmpl.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fcmpl' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fcmpl' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fcmpl' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'fcmpl'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fcmpl' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 149.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fcmpl' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'binaryOp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fcmpl' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fcmpl' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fcmpl' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fconst_0 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fconst_0' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute fconst_0.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fconst_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         constValue = 0.0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fconst_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fconst_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fconst_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'fconst_0'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fconst_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 11.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fconst_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'constImplicit' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fconst_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fconst_1 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fconst_1' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute fconst_1.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fconst_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         constValue = 1.0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fconst_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fconst_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fconst_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'fconst_1'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fconst_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 12.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fconst_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'constImplicit' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fconst_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fconst_2 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fconst_2' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute fconst_2.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fconst_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         constValue = 2.0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fconst_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fconst_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fconst_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'fconst_2'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fconst_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 13.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fconst_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'constImplicit' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fconst_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fdiv = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fdiv' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute fdiv.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fdiv' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fdiv' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fdiv' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'fdiv'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fdiv' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 110.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fdiv' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'binaryOp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fdiv' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fdiv' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fdiv' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: instructions\x7fCategory: branch and jsr PCs\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         finishPCCollections = ( |
            | 
            jsrTargetPCs: jsrTargetPCs asVector.
            jsrReturnPCs: jsrReturnPCs asVector.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: translating with branches\x7fCategory: exceptions\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         firstExcAlertIdx = ( |
            | 
            hasExceptions ifFalse: [^ -1].
            excAlertIndices: (exceptions copy mapBy: [|:ex|
                pcToIndex at: ex handler_pc.
            ]) sort.

            "Multiple exception handlers with same handler_pc not supported."
            pep assert: [excAlertIndices asSet size = excAlertIndices size].

            currentAlert: 0.
            excAlertIndices first).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fload = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fload' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute fload.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         index <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'fload'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 23.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'load' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fload_0 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fload_0' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute fload_0.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fload_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fload_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         index = 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fload_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fload_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'fload_0'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fload_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 34.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fload_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'load_n' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fload_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fload_1 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fload_1' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute fload_1.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fload_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fload_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         index = 1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fload_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fload_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'float_1'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fload_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 35.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fload_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'load_n' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fload_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fload_2 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fload_2' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute fload_2.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fload_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fload_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         index = 2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fload_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fload_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'fload_2'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fload_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 36.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fload_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'load_n' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fload_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fload_3 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fload_3' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute fload_3.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fload_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fload_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         index = 3.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fload_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fload_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'fload_3'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fload_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 37.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fload_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'load_n' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fload_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fmul = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fmul' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute fmul.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fmul' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fmul' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fmul' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'fmul'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fmul' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 106.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fmul' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'binaryOp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fmul' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fmul' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fmul' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fneg = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fneg' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute fneg.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fneg' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fneg' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fneg' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'fneg'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fneg' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 118.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fneg' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'unaryOp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fneg' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fneg' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         frem = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'frem' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute frem.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'frem' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'frem' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'frem' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'frem'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'frem' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 114.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'frem' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'binaryOp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'frem' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'frem' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'frem' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         freturn = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'freturn' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute freturn.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'freturn' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'freturn' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'freturn' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'freturn'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'freturn' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 174.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'freturn' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'returns' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'freturn' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'freturn' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         returnValue.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fstore = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fstore' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute fstore.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fstore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fstore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         index <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fstore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fstore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'fstore'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fstore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 56.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fstore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'store' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fstore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fstore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fstore_0 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fstore_0' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute fstore_0.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fstore_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fstore_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         index = 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fstore_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fstore_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'fstore_0'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fstore_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 67.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fstore_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'store_n' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fstore_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fstore_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fstore_1 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fstore_1' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute fstore_1.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fstore_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fstore_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         index = 1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fstore_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fstore_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'fstore_1'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fstore_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 68.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fstore_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'store_n' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fstore_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fstore_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fstore_2 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fstore_2' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute fstore_2.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fstore_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fstore_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         index = 2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fstore_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fstore_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'fstore_2'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fstore_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 69.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fstore_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'store_n' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fstore_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fstore_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fstore_3 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fstore_3' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute fstore_3.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fstore_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fstore_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         index = 3.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fstore_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fstore_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'fstore_3'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fstore_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 70.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fstore_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'store_n' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fstore_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fstore_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fsub = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fsub' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute fsub.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fsub' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fsub' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fsub' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'fsub'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fsub' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 102.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fsub' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'binaryOp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fsub' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fsub' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'fsub' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: dumpHierarchy\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         getDumpNameForGroup: g = ( |
             n <- ''.
             v.
             widest <- 0.
            | 
            v: g asVector.
            v sortBy: (|
                element: in1 Precedes: in2 = ( in1 dumpName < in2 dumpName. ).
            |).

            v do: [|:in| n: n, in dumpName, '\\n'].
            n: (n copySize: n size - 2).  "Get rid of extra '\n' at end."
            n).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: exceptions\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         getExcForHandlerPC: hpc = ( |
            | getExcForHandlerPC: hpc IfAbsent: raiseError).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: exceptions\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         getExcForHandlerPC: hpc IfAbsent: aBlk = ( |
            | 
            exceptions do: [|:ex| hpc = ex handler_pc ifTrue: [^ ex]].
            aBlk value).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: exceptions\x7fComment: Return sequence of exceptions (same order as
in exception table) of those exceptions guarding
given PC range.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         getExceptionsGuardingFrom: startPC To: endPC = ( |
             guarding.
            | 
            hasExceptions ifFalse: [^ vector].   "Optim."
            guarding: sequence copy.
            exceptions do: [|:exc. g1 <- false. |
                g1: (exc guards: startPC).
                startPC != endPC ifTrue: [| g2 <- false. |
                    g2: (exc guards: endPC).
                    g1 != g2 ifTrue: [
                        error: 'range ', startPC printString, '-', endPC printString,
                               ' cuts exception: ', exc printString.
                    ].
                ].
                g1 ifTrue: [guarding add: exc].
            ].
            guarding asVector).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: abstract\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         getFieldStatic = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'getFieldStatic' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute getFieldStatic.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'getFieldStatic' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         buildCA: ca = ( |
            | 
            fieldRef: (ca myClassFile constantPoolAt: ca getUnsignedShort)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'getFieldStatic' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         interp: stack = ( |
            | 
            setObjectRef: stack.
            stack push: self.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'getFieldStatic' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         lateTraceOnFile: file = ( |
            | 
            file write: fieldRef printString, ' '.
            resend.lateTraceOnFile: file).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'getFieldStatic' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'loadTop' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'getFieldStatic' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         transSel = ( |
            | 
            fieldRef mangledFieldName).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'getFieldStatic' -> () From: ( | {
         'Comment: Whether this instruction produces
a 64 bit value (long or double).
Needed to implement the \"dup2\" etc
instructions.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         yields64Bits = ( |
            | 
            fieldRef name_and_type signatureYields64Bits).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: dumpHierarchy\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         getGroupsForDump: instrs = ( |
             groups.
            | 
            groups: dictionary copy.
            instrs do: [|:instr|
               "Only group concrete nodes (for cases where a subgraph is folded).
                This is a hack."
                ((reflect: instr) includesKey: 'opcode') ifTrue: [  "Concrete."
                    groups if: (reflect: instr parent) IsPresentDo: [|:g| g add: instr]
                                                       IfAbsentPut: [set copy add: instr]
                                                             AndDo: [].
                ] False: [
                    groups at: (reflect: instr) Put: (set copy add: instr).  "Use itself as key."
                ].
            ].
            groups).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: codeAccess\x7fComment: Get and opcode (and record the PC for debugging).\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         getOpcode = ( |
            | 
            lastPC: pc.
            getUnsignedByte).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: codeAccess\x7fComment: Get signed byte from current PC value and increment PC.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         getSignedByte = ( |
             res <- 0.
            | 
            res: (code javaByteAt: pc).
            pc: 1 + pc.
            res).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: codeAccess\x7fComment: Get signed short (16 bits) from current PC value
and increment PC.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         getSignedShort = ( |
             res <- 0.
            | 
            res: (code javaShortAt: pc).
            pc: 2 + pc.
            res).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: codeAccess\x7fComment: Get unsigned word from current PC value and increment PC.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         getSignedWord = ( |
             res <- 0.
            | 
            res: (code javaIntAt: pc).
            pc: 4 + pc.
            res).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: exceptions\x7fComment: Get the next enclosing exception handler
from exc. If none such exists, return \'nil\'.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         getSurroundingExceptionOf: exc = ( |
             i <- 0.
            | 
            i: (exceptions keyOf: exc).
            1 + i upTo: exceptions size Do: [|:j. e|
                e: (exceptions at: j).
                (e guards: exc start_pc) && [e guards: exc end_pc - 1] ifTrue: [^ e].
            ].
            nil.    "None found.").
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: codeAccess\x7fComment: Get unsigned byte from current PC value and increment PC.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         getUnsignedByte = ( |
             res <- 0.
            | 
            res: (code javaUnsignedByteAt: pc).
            pc: 1 + pc.
            res).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: codeAccess\x7fComment: Get unsigned short from current PC value and increment PC.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         getUnsignedShort = ( |
             res <- 0.
            | 
            res: (code javaUnsignedShortAt: pc).
            pc: 2 + pc.
            res).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: codeAccess\x7fComment: Get unsigned word (32 bits) from current PC value and increment PC.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         getUnsignedWord = ( |
             res <- 0.
            | 
            res: (code javaUnsignedIntAt: pc).
            pc: 4 + pc.
            res).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         getfield = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'getfield' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute getfield.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'getfield' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'getfield' -> () From: ( | {
         'Category: dup2 analysis\x7fComment: Used for dup2 analysis.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fastInterp: stack = ( |
            | 
            stack pop: 1.
            stack push: defaultResult.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'getfield' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         fieldRef.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'getfield' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'getfield' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'getfield'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'getfield' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         objectRef.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'getfield' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 180.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'getfield' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'getFieldStatic' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'getfield' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'getfield' -> () From: ( | {
         'Comment: invokestatic overrides this method to do nothing
since they run with no receiver object.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         setObjectRef: stack = ( |
            | 
            objectRef: stack pop).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         getstatic = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'getstatic' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute getstatic.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'getstatic' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'getstatic' -> () From: ( | {
         'Category: dup2 analysis\x7fComment: Used for dup2 analysis.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fastInterp: stack = ( |
            | 
            stack push: defaultResult.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'getstatic' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         fieldRef.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'getstatic' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generateUsing: gen = ( |
            | 
            generateStaticFieldAccessUsing: gen
                                ClassDepth: 0).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'getstatic' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'getstatic' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'getstatic'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'getstatic' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 178.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'getstatic' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'getFieldStatic' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'getstatic' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'getstatic' -> () From: ( | {
         'Comment: Static methods have no receiver so there
is no objectRef to set.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         setObjectRef: stack = ( |
            | 
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         goto = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'goto' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute goto.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'goto' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'goto' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         getBranch: ca = ( |
            | 
            ca getSignedShort).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'goto' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'goto' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'goto'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'goto' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 167.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: abstract\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         gotoTop = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'gotoTop' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute gotoTop.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'goto' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'gotoTop' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'goto' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'goto' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         targetPC <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'gotoTop' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generateUsing: gen = ( |
            | 
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'gotoTop' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generateUsingBr: gen = ( |
            | 
            gen bytecodeGen branchAlways: (getLabelForJavaPC: targetPC UsingBr: gen).
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'gotoTop' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isGoto = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: abstract\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         jumpSingle = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jumpSingle' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute jumpSingle.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'gotoTop' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jumpSingle' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         goto_w = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'goto_w' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute goto_w.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'goto_w' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'goto_w' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         getBranch: ca = ( |
            | 
            ca getSignedWord asInteger).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'goto_w' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'goto_w' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'goto_w'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'goto_w' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 200.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'goto_w' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'gotoTop' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'goto_w' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'goto_w' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         targetPC <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: private'
        
         hasBeenTranslated <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: exceptions\x7fComment: Return true if there is an exception handler that guards
the given pc.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         hasExceptionGuarding: pc = ( |
            | 
            exceptions do: [|:exc|
                (exc guards: pc) ifTrue: [^ true].
            ].
            false).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: exceptions\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         hasExceptions = ( |
            | exceptions isEmpty not).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: instructions\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         hasSwitch = ( |
            | 
            myInstructions do: [|:in| 
                ('lookupswitch' = in name) || ['tableswitch' = in name] ifTrue: [^ true].
            ].
            false).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         i2b = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'i2b' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute i2b.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'i2b' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'i2b' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'i2b' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'i2b'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'i2b' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 145.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'i2b' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'conv' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'i2b' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'i2b' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         i2c = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'i2c' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute i2c.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'i2c' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'i2c' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'i2c' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'i2c'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'i2c' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 146.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'i2c' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'conv' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'i2c' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'i2c' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         i2d = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'i2d' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute i2d.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'i2d' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'i2d' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'i2d' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'i2d'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'i2d' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 135.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'i2d' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'conv' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'i2d' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'i2d' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'i2d' -> () From: ( | {
         'Comment: Whether this instruction produces
a 64 bit value (long or double).
Needed to implement the \"dup2\" etc
instructions.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         yields64Bits = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         i2f = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'i2f' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute i2f.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'i2f' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'i2f' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'i2f' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'i2f'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'i2f' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 134.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'i2f' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'conv' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'i2f' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'i2f' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         i2l = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'i2l' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute i2l.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'i2l' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'i2l' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'i2l' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'i2l'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'i2l' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 133.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'i2l' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'conv' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'i2l' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'i2l' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'i2l' -> () From: ( | {
         'Comment: Whether this instruction produces
a 64 bit value (long or double).
Needed to implement the \"dup2\" etc
instructions.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         yields64Bits = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         i2s = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'i2s' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute i2s.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'i2s' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'i2s' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'i2s' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'i2s'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'i2s' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 147.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'i2s' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'conv' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'i2s' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'i2s' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         iadd = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iadd' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute iadd.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iadd' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iadd' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iadd' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'iadd'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iadd' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 96.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iadd' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'binaryOp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iadd' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iadd' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         primSelector = '_IntAdd:IfFail:'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iadd' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iadd' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         iaload = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iaload' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute iaload.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iaload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         arrayref.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iaload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iaload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         index <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iaload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iaload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'iaload'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iaload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 46.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iaload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'arrayLoad' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iaload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         iand = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iand' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute iand.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iand' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iand' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iand' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'iand'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iand' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 126.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iand' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'binaryOp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iand' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iand' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         primSelector = '_IntAnd:IfFail:'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iand' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iand' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         iastore = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iastore' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute iastore.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         arrayref.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         index <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'iastore'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 79.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'arrayStore' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         iconst_0 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_0' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute iconst_0.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         constValue = 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'iconst_0'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 3.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'constImplicit' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         iconst_1 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_1' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute iconst_1.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         constValue = 1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'iconst_1'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 4.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'constImplicit' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         iconst_2 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_2' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute iconst_2.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         constValue = 2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'iconst_2'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 5.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'constImplicit' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         iconst_3 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_3' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute iconst_3.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         constValue = 3.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'iconst_3'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 6.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'constImplicit' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         iconst_4 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_4' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute iconst_4.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_4' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         constValue = 4.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_4' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_4' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_4' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'iconst_4'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_4' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 7.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_4' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'constImplicit' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_4' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         iconst_5 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_5' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute iconst_5.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_5' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         constValue = 5.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_5' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_5' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_5' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'iconst_5'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_5' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 8.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_5' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'constImplicit' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_5' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         iconst_m1 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_m1' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute iconst_m1.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_m1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         constValue = -1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_m1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_m1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_m1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'iconst_m1'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_m1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_m1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'constImplicit' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iconst_m1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         idiv = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'idiv' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute idiv.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'idiv' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'idiv' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'idiv' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'idiv'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'idiv' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 108.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'idiv' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'binaryOp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'idiv' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'idiv' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         primSelector = '_IntDiv:IfFail:'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'idiv' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'idiv' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: abstract\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         ifBinary = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifBinary' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute ifBinary.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifBinary' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         comparisonOperation = ( |
            | pep prefix, name, ':').
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifBinary' -> () From: ( | {
         'Category: dup2 analysis\x7fComment: Used for dup2 analysis.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fastInterp: stack = ( |
            | 
            stack pop: 2.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifBinary' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         interp: stack = ( |
            | 
            val2: stack pop.
            val1: stack pop.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: abstract\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         ifTop = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifTop' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute ifTop.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifBinary' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifTop' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifBinary' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         pushFailBlock: gen = ( |
             names.
            | 
            names: (stuffIntoTmps: 2 Using: gen).
            gen pushNewBlockDo: [
                gen pushLocalVarNamed: (names at: 0).
                gen pushLocalVarNamed: (names at: 1).
                gen generateSend: comparisonOperation.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifBinary' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         pushSecondArgumentUsing: gen = ( |
            | self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifTop' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         adjustPCsFor: ex = ( |
            | 
            targetPCTrue: (ex adjustTargetPC: targetPCTrue RefPC: pc).
            resend.adjustPCsFor: ex.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifTop' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         buildCA: ca = ( |
             t <- 0.
            | 
            t: pc + ca getSignedShort.
            targetPCTrue: t.
            ca branchPCs      add: t.
            ca fallThroughPCs add: targetPCFalse.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifTop' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         finishTransferUsing: gen = ( |
             sel <- ''.
            | 
            (canDrop: (gen stackAt: 1)) ifTrue: [gen dropStackAt: 1] 
                                         False: [sel: sel, 'True:'].
            (canDrop: (gen stackAt: 0)) ifTrue: [gen dropStackAt: 0]
                                         False: [sel: sel, 'False:'].
            '' != sel ifTrue: [gen generateSend: 'if', sel].
            gen pop1.   "Pop result of if stmt or the condition,
                         in case we dropped both true and false blk."
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifTop' -> () From: ( | {
         'Category: primitive inlining\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         finishUpPrimitive: gen = ( |
            | self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifTop' -> () From: ( | {
         'Comment: This method produces the true/false value on the stack top.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         generateConditionUsing: gen = ( |
             psel <- ''.
            | 
            pep inlinePrims && [psel: primSelector. '' != psel] ifTrue: [
                pushSecondArgumentUsing: gen.
                ('IfFail:' isSuffixOf: psel) ifTrue: [pushFailBlock: gen].
                gen generateSend: psel.
                finishUpPrimitive: gen.
            ] False: [
                gen generateSend: comparisonOperation.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifTop' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generateUsing: gen = ( |
            | 
            "Just compute the boolean result here. Compile the actual
             transfer when 'finishTransferUsing:' is called."
            generateConditionUsing: gen.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifTop' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generateUsingBr: gen = ( |
            | 
            generateConditionUsing: gen.
            gen bytecodeGen branchIfTrue: (getLabelForJavaPC: targetPCTrue UsingBr: gen).
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifTop' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         lateTraceOnFile: file = ( |
            | 
            file write: targetPCTrue printString.
            resend.lateTraceOnFile: file).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifTop' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         noOfExpsConsumedForTransfer = 3.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: abstract\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         jumpMultiple = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jumpMultiple' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute jumpMultiple.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifTop' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jumpMultiple' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifTop' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         targetPCFalse = ( |
            | 3 + pc).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifTop' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         targetPCsDo: blk = ( |
            | 
            blk value: targetPCTrue.
            blk value: targetPCFalse. 
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: abstract\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         ifUnary = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifUnary' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute ifUnary.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifUnary' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         comparisonOperation = ( |
            | 
            pep prefix, name).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifUnary' -> () From: ( | {
         'Category: dup2 analysis\x7fComment: Used for dup2 analysis.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fastInterp: stack = ( |
            | 
            stack pop: 1.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifUnary' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         interp: stack = ( |
            | 
            val: stack pop).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifUnary' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifTop' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifUnary' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         pushFailBlock: gen = ( |
             names.
            | 
            names: (stuffIntoTmps: 1 Using: gen).
            gen pushNewBlockDo: [
                gen pushLocalVarNamed: names first.
                gen generateSend: comparisonOperation.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifUnary' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         pushSecondArgumentUsing: gen = ( |
            | 
            gen pushInteger: 0.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         if_acmpeq = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_acmpeq' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute if_acmpeq.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_acmpeq' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_acmpeq' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_acmpeq' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'if_acmpeq'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_acmpeq' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 165.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_acmpeq' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifBinary' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_acmpeq' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_acmpeq' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         primSelector = '_Eq:'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_acmpeq' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         targetPCTrue <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_acmpeq' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_acmpeq' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         if_acmpne = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_acmpne' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute if_acmpne.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_acmpne' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_acmpne' -> () From: ( | {
         'Category: primitive inlining\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         finishUpPrimitive: gen = ( |
            | 
            gen generateSend: 'not'.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_acmpne' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_acmpne' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'if_acmpne'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_acmpne' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 166.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_acmpne' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifBinary' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_acmpne' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_acmpne' -> () From: ( | {
         'Category: primitive inlining\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         primSelector = '_Eq:'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_acmpne' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         targetPCTrue <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_acmpne' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_acmpne' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         if_icmpeq = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmpeq' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute if_icmpeq.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmpeq' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmpeq' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmpeq' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'if_icmpeq'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmpeq' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 159.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmpeq' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifBinary' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmpeq' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmpeq' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         primSelector = '_IntEQ:IfFail:'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmpeq' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         targetPCTrue <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmpeq' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmpeq' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         if_icmpge = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmpge' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute if_icmpge.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmpge' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmpge' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmpge' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'if_icmpge'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmpge' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 162.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmpge' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifBinary' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmpge' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmpge' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         primSelector = '_IntGE:IfFail:'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmpge' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         targetPCTrue <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmpge' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmpge' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         if_icmpgt = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmpgt' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute if_icmpgt.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmpgt' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmpgt' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmpgt' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'if_icmpgt'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmpgt' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 163.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmpgt' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifBinary' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmpgt' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmpgt' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         primSelector = '_IntGT:IfFail:'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmpgt' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         targetPCTrue <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmpgt' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmpgt' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         if_icmple = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmple' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute if_icmple.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmple' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmple' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmple' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'if_icmple'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmple' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 164.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmple' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifBinary' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmple' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmple' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         primSelector = '_IntLE:IfFail:'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmple' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         targetPCTrue <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmple' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmple' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         if_icmplt = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmplt' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute if_icmplt.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmplt' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmplt' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmplt' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'if_icmplt'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmplt' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 161.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmplt' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifBinary' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmplt' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmplt' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         primSelector = '_IntLT:IfFail:'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmplt' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         targetPCTrue <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmplt' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmplt' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         if_icmpne = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmpne' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute if_icmpne.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmpne' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmpne' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmpne' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'if_icmpne'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmpne' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 160.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmpne' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifBinary' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmpne' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmpne' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         primSelector = '_IntNE:IfFail:'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmpne' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         targetPCTrue <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmpne' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'if_icmpne' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         ifeq = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifeq' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute ifeq.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifeq' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifeq' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifeq' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'ifeq'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifeq' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 153.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifeq' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifUnary' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifeq' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifeq' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         primSelector = '_IntEQ:IfFail:'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifeq' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         targetPCTrue <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifeq' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         ifge = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifge' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute ifge.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifge' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifge' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifge' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'ifge'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifge' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 156.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifge' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifUnary' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifge' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifge' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         primSelector = '_IntGE:IfFail:'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifge' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         targetPCTrue <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifge' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         ifgt = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifgt' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute ifgt.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifgt' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifgt' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifgt' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'ifgt'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifgt' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 157.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifgt' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifUnary' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifgt' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifgt' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         primSelector = '_IntGT:IfFail:'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifgt' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         targetPCTrue <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifgt' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         ifle = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifle' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute ifle.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifle' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifle' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifle' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'ifle'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifle' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 158.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifle' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifUnary' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifle' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifle' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         primSelector = '_IntLE:IfFail:'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifle' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         targetPCTrue <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifle' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         iflt = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iflt' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute iflt.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iflt' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iflt' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iflt' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'iflt'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iflt' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 155.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iflt' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifUnary' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iflt' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iflt' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         primSelector = '_IntLT:IfFail:'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iflt' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         targetPCTrue <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iflt' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         ifne = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifne' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute ifne.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifne' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifne' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifne' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'ifne'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifne' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 154.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifne' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifUnary' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifne' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifne' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         primSelector = '_IntNE:IfFail:'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifne' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         targetPCTrue <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifne' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         ifnonnull = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifnonnull' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute ifnonnull.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifnonnull' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifnonnull' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifnonnull' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'ifnonnull'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifnonnull' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 199.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifnonnull' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifUnary' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifnonnull' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifnonnull' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         targetPCTrue <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifnonnull' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         ifnull = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifnull' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute ifnull.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifnull' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifnull' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifnull' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'ifnull'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifnull' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 198.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifnull' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifUnary' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifnull' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifnull' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         targetPCTrue <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ifnull' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         iinc = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iinc' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute iinc.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iinc' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         buildCA: ca = ( |
            | 
            buildCA: ca Wide: false).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iinc' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         buildCA: ca Wide: bool = ( |
            | 
            bool ifTrue: [
                index: ca getUnsignedShort.
                const: ca getSignedShort.
            ] False: [
                index: ca getUnsignedByte.
                const: ca getSignedByte.
            ].
            ca assignedLocals at: index Put: true.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iinc' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         const <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iinc' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iinc' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generateUsing: gen = ( |
            | 
            gen pushInteger: const asInt32.
            gen pushLocalVarNumber: index.
            gen generateSend: pep prefix, 'iadd:'.
            gen setLocalVarNumber: index.
            gen pop1.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iinc' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generateUsingBr: gen = ( |
             i32 <- 0.
            | 
            pep inlinePrims ifFalse: [^ resend.generateUsingBr: gen].
            i32: const asInt32.
            gen pushInteger: i32.
            gen pushLocalVarNumber: index.
            "Now generate a fail-block for the case that the _IntAdd:
             primitive fails. The fail-block just invokes the regular
             java integer addition method, which can cope with overflow."
            gen pushNewBlockDo: [
                gen pushInteger: i32.
                gen pushLocalVarNumber: index.
                gen generateSend: pep prefix, 'iadd:'.
            ].
            gen generateSend: '_IntAdd:IfFail:'.
            gen setLocalVarNumber: index.
            gen pop1.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iinc' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         index <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iinc' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iinc' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         lateTraceOnFile: file = ( |
            | 
            file write: index printString, ' ', const printString, ' '.
            resend.lateTraceOnFile: file).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iinc' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'iinc'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iinc' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 132.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iinc' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'topStmt' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iinc' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         iload = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iload' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute iload.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         index <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'iload'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 21.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'load' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         setIndex: i = ( |
            | index: i).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         iload_0 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iload_0' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute iload_0.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iload_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iload_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         index = 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iload_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iload_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'iload_0'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iload_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 26.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iload_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'load_n' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iload_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         iload_1 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iload_1' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute iload_1.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iload_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iload_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         index = 1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iload_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iload_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'iload_1'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iload_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 27.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iload_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'load_n' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iload_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         iload_2 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iload_2' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute iload_2.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iload_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iload_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         index = 2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iload_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iload_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'iload_2'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iload_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 28.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iload_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'load_n' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iload_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         iload_3 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iload_3' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute iload_3.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iload_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iload_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         index = 3.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iload_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iload_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'iload_3'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iload_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 29.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iload_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'load_n' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iload_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         imul = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'imul' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute imul.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'imul' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'imul' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'imul' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'imul'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'imul' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 104.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'imul' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'binaryOp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'imul' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'imul' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         primSelector = '_IntMul:IfFail:'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'imul' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'imul' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: programCounter\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         incPC: i = ( |
            | 
            pc: pc + i).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         ineg = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ineg' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute ineg.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ineg' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ineg' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ineg' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'ineg'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ineg' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 116.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ineg' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'unaryOp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ineg' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ineg' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         initClassFile: cf = ( |
            | 
            hasBeenTranslated: false.
            resend.initClassFile: cf).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         initInstructions = ( |
            | 
            instructions size <= maxOpcode ifTrue: [
                error: 'the "instructions" vector must be at least ',
                       maxOpcode printString, ' long'.
            ].
            instructions mapBy: nil.
            javaInstructionsDo: [|:instr|
                nil != (instructions at: instr opcode) ifTrue: [
                    error: 'two instructions with same opcode: ',
                           (instructions at: instr opcode) name, ' ', instr name.
                ].
                instructions at: instr opcode Put: instr.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: exceptions\x7fComment: When translating a method using the old sourceCodeGenerator,
exception handlers are inserted into the instruction stream
as special \'tryAndCatch\' instructions. This facilitates
control-flow analysis. The present method does this insertion,
and renumbers all PC references accordingly.
When translating with the binCodeGenerator, which does less
control-flow analysis, we don\'t need to insert \'tryAndCatch\'
instructions. Instead we deal with the exceptions from their
primary representation.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         insertExceptions = ( |
            | 
            exceptions isEmpty ifTrue: [^ self].   "The easy case."
            insertExceptions2.  "Do it."
            mapPCToIndices.  "Rebuild mapping."
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: exceptions\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         insertExceptions2 = ( |
             exGrps.
             instr.
             instr2.
             nextTryPC <- 0.
            | 
            instr: myInstructions.
            nextTryPC: (nextExceptionStartPCAfter: -1).
            instr2: sequence copy.
            instr2 desiredMinCapacity: instr size + exceptions size.
            exGrps: exceptionGroups.
            instr do: [|:in. :idx|
                in pc = nextTryPC ifTrue: [|selGrps|
                    "Subtle point: we must select all the exceptions up front before we start
                     processing them, since the processing may change their startPC."
                    selGrps: (exGrps filterBy: [|:exGrp| exGrp first start_pc = nextTryPC]
                                         Into: sequence copy) asVector.
                    "Use a reverse iterator since an exception group with same start_pc that we
                     install later will be enclosed in previously installed exception groups 
                     (see 'checkExceptionTableAssumptions')."
                    selGrps reverseDo: [
                        |:exGrp. :grpNo. ex. pc <- 0. |
                        ex: exGrp first.
                        pc: in pc.   "Save pc, because we may modify pc in 'in'. But note 
                                      that we reload it for each exception group we process!."
                        "We are about to squeeze in an instruction, so adjust all PCs to account
                         for this. Yes, it's ugly but better to do it now than having to juggle 
                         a lot of structure which we later build!"
                        instr2               do: [|:in|           in adjustPCsFor: ex].
                        idx upTo: instr size Do: [|:i| (instr at: i) adjustPCsFor: ex].
                        exceptions do: [|:e|
                            "Subtle point: use of 'reverseDo:' above implies that if an exception
                             group is aready installed, it is one that should enclose the current
                             exception group. So, for handlers not installed in the code yet, we 
                             subtract 1 from the threshold for pc adjustments."
                            e isInstalledInCode ifTrue: [e incPCsAbove: pc]
                                                 False: [e incPCsAbove: pc -1].
                        ].
                        pep assert: [in pc = (1 + pc). "Sanity check."].
                        "The PCs have been adjusted so insert new instruction."
                        instr2 add: (tryAndCatch copy initPC: pc ExGrp: exGrp).
                    ].
                    nextTryPC: (nextExceptionStartPCAfter: in pc).
                ].
                instr2 add: in.
            ].
            pep debug ifTrue: [
                exceptions do: [|:ex| pep assert: [ex isInstalledInCode]].
            ].
            myInstructions: instr2 asVector.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         instanceof = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'instanceof' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute instanceof.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'instanceof' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         classRef.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'instanceof' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'instanceof' -> () From: ( | {
         'Category: dup2 analysis\x7fComment: Used for dup2 analysis.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fastInterp: stack = ( |
            | 
            stack pop: 1.
            stack push: singleWord.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'instanceof' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generateUsingBr: gen = ( |
             bcg.
             endLabel.
             local <- ''.
             nonnullLabel.
            | 
            bcg: gen bytecodeGen.
            nonnullLabel: bcg newLabel.
            endLabel:     (nextInstructionLabel: gen).

            "Transfer the object to a local slot."
            local: gen setNewLocalVarAndPop.

            "Test for null."
            gen pushLocalVarNamed: local.
            gen generateSend: pep prefix, 'ifnonnull'.
            bcg branchIfTrue: nonnullLabel.
            gen pushJavaFalse.
            bcg branchAlways: endLabel.
            bcg pop.  "Fake pop, following the branch. Will never be executed
                       but needed to balance stack."

            bcg defineLabel: nonnullLabel.
            gen pushLocalVarNamed: local.
            generateTypeTestUsing: gen.
            gen generateSend: 'java_inst_asJavaBoolean'.
            [java_inst_asJavaBoolean.  "For senders."].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'instanceof' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'instanceof' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'instanceof'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'instanceof' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         objectRef.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'instanceof' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 193.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'instanceof' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'typeTest' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'instanceof' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: instructions\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         instructionAtPC: pc = ( |
            | 
            myInstructions at: (pcToIndex at: pc)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: instructions\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         instructionFollowing: pc = ( |
            | 
            myInstructions at: 1 + (pcToIndex at: pc)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fComment: All the java instructions, indexed by opcode.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector copySize: 256)\x7fVisibility: public'
        
         instructions = vector copySize: 256.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: abstract\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         invokeNoninterf = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokeNoninterf' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute invokeNoninterf.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: abstract\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         invokes = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokes' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute invokes.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokeNoninterf' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokes' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokeNoninterf' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         setNargs: ca = ( |
            | nargs: getNargsFromSignature).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         invokeinterface = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokeinterface' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute invokeinterface.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokeinterface' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: private'
        
         actualArgs <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokeinterface' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokeinterface' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokeinterface' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         methodRef.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokeinterface' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'invokeinterface'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokeinterface' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         nargs <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokeinterface' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         objectRef.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokeinterface' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 185.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokeinterface' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokes' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokeinterface' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokeinterface' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         setNargs: ca = ( |
             nargsFromCode <- 0.
            | 
            nargsFromCode: ca getUnsignedByte - 1.   "We don't count the rcvr!"
            ca getUnsignedByte.                      "Skip 'reserved' byte."
            "We also don't count a single double/long as two arguments..."
            methodRef name_and_type signatureArgTypesDo: [|:ty|
                (methodRef name_and_type is64BitType: ty) ifTrue: [
                    nargsFromCode: nargsFromCode - 1.
                ].
            ].
            nargsFromCode != getNargsFromSignature ifTrue: [
                ca raiseError: 'arg count in bytecode (nargs) does not match signature'.
            ].
            nargs: nargsFromCode).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokes' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         buildCA: ca = ( |
            | 
            methodRef: (ca myClassFile constantPoolAt: ca getUnsignedShort).
            pep assert: [methodRef is_Methodref || [methodRef is_InterfaceMethodref]].
            setNargs: ca.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokes' -> () From: ( | {
         'Category: dup2 analysis\x7fComment: Used for dup2 analysis.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fastInterp: stack = ( |
            | 
            "Add one to also pop receiver (unless invokestatic)."
            stack pop: receiverPopCount + nargs.
            hasResult ifTrue: [
                stack push: defaultResult.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokes' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generateUsing: gen = ( |
            | 
            "Must do this at every call to ensure valid exp. stacks for frames
             deep in stack."
            pep ifTraceMutator: [gen traceExpStack].
            resend.generateUsing: gen).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokes' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         getNargsFromSignature = ( |
            | 
            methodRef name_and_type signatureNoOfArgs).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokes' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         hasResult = ( |
            | 
            methodRef name_and_type signatureHasVoidResult not).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokes' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         interp: stack = ( |
            | 
            actualArgs: (vector copySize: nargs).
            nargs reverseDo: [|:i| actualArgs at: i Put: stack pop].
            setObjectRef: stack.  "Static methods override this to do nothing."
            hasResult ifTrue: [stack push: self].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokes' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         lateTraceOnFile: file = ( |
            | 
            file write: methodRef printString, ' '.
            resend.lateTraceOnFile: file).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: abstract\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         topEither = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'topEither' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute topEither.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokes' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'topEither' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokes' -> () From: ( | {
         'Category: dup2 analysis\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         receiverPopCount = 1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokes' -> () From: ( | {
         'Comment: invokestatic overrides this method to do nothing
since they run with no receiver object.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         setObjectRef: stack = ( |
            | 
            objectRef: stack pop).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokes' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         transSel = ( |
            | 
            methodRef virtualName).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokes' -> () From: ( | {
         'Comment: Whether this instruction produces
a 64 bit value (long or double).
Needed to implement the \"dup2\" etc
instructions.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         yields64Bits = ( |
            | 
            methodRef name_and_type signatureYields64Bits).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         invokespecial = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokespecial' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute invokespecial.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokespecial' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: private'
        
         actualArgs <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokespecial' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokespecial' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokespecial' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         methodRef.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokespecial' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'invokespecial'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokespecial' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         nargs <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokespecial' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         objectRef.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokespecial' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 183.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokespecial' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokeNoninterf' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokespecial' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokespecial' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         transSel = ( |
            | 
            methodRef nonVirtualName).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         invokestatic = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokestatic' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute invokestatic.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokestatic' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: private'
        
         actualArgs <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokestatic' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokestatic' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generateUsing: gen = ( |
            | 
            pep ifTraceMutator: [
                traceExpStackIfNewClass: methodRef class nameAsAscii
                                  Using: gen.
            ].
            gen whileRetaining: nargs Do: [
                gen pushJavaClass: methodRef class nameAsAscii.
            ].
            resend.generateUsing: gen).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokestatic' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokestatic' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         methodRef.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokestatic' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'invokestatic'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokestatic' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         nargs <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokestatic' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 184.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokestatic' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokeNoninterf' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokestatic' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokestatic' -> () From: ( | {
         'Category: dup2 analysis\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         receiverPopCount = 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokestatic' -> () From: ( | {
         'Comment: Static methods have no receiver so there
is no objectRef to set.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         setObjectRef: stack = ( |
            | 
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         invokevirtual = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokevirtual' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute invokevirtual.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokevirtual' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: private'
        
         actualArgs <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokevirtual' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokevirtual' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokevirtual' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         methodRef.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokevirtual' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'invokevirtual'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokevirtual' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         nargs <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokevirtual' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         objectRef.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokevirtual' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 182.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokevirtual' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokeNoninterf' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'invokevirtual' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         ior = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ior' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute ior.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ior' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ior' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ior' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'ior'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ior' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 128.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ior' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'binaryOp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ior' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ior' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         primSelector = '_IntOr:IfFail:'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ior' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ior' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         irem = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'irem' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute irem.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'irem' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'irem' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'irem' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'irem'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'irem' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 112.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'irem' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'binaryOp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'irem' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'irem' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'irem' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         ireturn = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ireturn' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute ireturn.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ireturn' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ireturn' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ireturn' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'ireturn'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ireturn' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 172.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ireturn' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'returns' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ireturn' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ireturn' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         returnValue.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: typeTesting\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         is_code = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         ishl = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ishl' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute ishl.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ishl' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ishl' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ishl' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'ishl'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ishl' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 120.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ishl' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'binaryOp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ishl' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ishl' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ishl' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         ishr = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ishr' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute ishr.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ishr' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ishr' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ishr' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'ishr'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ishr' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 122.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ishr' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'binaryOp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ishr' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ishr' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ishr' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         istore = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'istore' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute istore.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'istore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'istore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         index <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'istore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'istore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'istore'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'istore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 54.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'istore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'store' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'istore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'istore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         setIndex: i = ( |
            | index: i).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'istore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         istore_0 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'istore_0' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute istore_0.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'istore_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'istore_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         index = 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'istore_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'istore_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'istore_0'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'istore_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 59.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'istore_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'store_n' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'istore_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'istore_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         istore_1 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'istore_1' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute istore_1.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'istore_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'istore_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         index = 1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'istore_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'istore_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'istore_1'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'istore_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 60.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'istore_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'store_n' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'istore_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'istore_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         istore_2 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'istore_2' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute istore_2.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'istore_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'istore_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         index = 2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'istore_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'istore_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'istore_2'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'istore_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 61.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'istore_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'store_n' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'istore_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'istore_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         istore_3 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'istore_3' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute istore_3.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'istore_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'istore_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         index = 3.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'istore_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'istore_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'istore_3'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'istore_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 62.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'istore_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'store_n' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'istore_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'istore_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         isub = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'isub' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute isub.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'isub' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'isub' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'isub' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'isub'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'isub' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 100.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'isub' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'binaryOp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'isub' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'isub' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         primSelector = '_IntSub:IfFail:'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'isub' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'isub' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         iushr = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iushr' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute iushr.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iushr' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iushr' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iushr' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'iushr'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iushr' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 124.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iushr' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'binaryOp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iushr' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iushr' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'iushr' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         ixor = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ixor' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute ixor.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ixor' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ixor' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ixor' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'ixor'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ixor' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 130.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ixor' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'binaryOp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ixor' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ixor' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         primSelector = '_IntXor:IfFail:'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ixor' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ixor' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         javaInstructionsDo: blk = ( |
            | 
            blk value: aaload.
            blk value: aastore.
            blk value: aconst_null.
            blk value: aload.
            blk value: aload_0.
            blk value: aload_1.
            blk value: aload_2.
            blk value: aload_3.
            blk value: anewarray.
            blk value: areturn.
            blk value: arraylength.
            blk value: astore.
            blk value: astore_0.
            blk value: astore_1.
            blk value: astore_2.
            blk value: astore_3.
            blk value: athrow.
            blk value: baload.
            blk value: bastore.
            blk value: bipush.
            blk value: caload.
            blk value: castore.
            blk value: checkcast.
            blk value: d2f.
            blk value: d2i.
            blk value: d2l.
            blk value: dadd.
            blk value: daload.
            blk value: dastore.
            blk value: dcmpg.
            blk value: dcmpl.
            blk value: dconst_0.
            blk value: dconst_1.
            blk value: ddiv.
            blk value: dload.
            blk value: dload_0.
            blk value: dload_1.
            blk value: dload_2.
            blk value: dload_3.
            blk value: dmul.
            blk value: dneg.
            blk value: drem.
            blk value: dreturn.
            blk value: dstore.
            blk value: dstore_0.
            blk value: dstore_1.
            blk value: dstore_2.
            blk value: dstore_3.
            blk value: dsub.
            blk value: dup.
            blk value: dup2.
            blk value: dup2_x1.
            blk value: dup2_x2.
            blk value: dup_x1.
            blk value: dup_x2.
            blk value: f2d.
            blk value: f2i.
            blk value: f2l.
            blk value: fadd.
            blk value: faload.
            blk value: fastore.
            blk value: fcmpg.
            blk value: fcmpl.
            blk value: fconst_0.
            blk value: fconst_1.
            blk value: fconst_2.
            blk value: fdiv.
            blk value: fload.
            blk value: fload_0.
            blk value: fload_1.
            blk value: fload_2.
            blk value: fload_3.
            blk value: fmul.
            blk value: fneg.
            blk value: frem.
            blk value: freturn.
            blk value: fstore.
            blk value: fstore_0.
            blk value: fstore_1.
            blk value: fstore_2.
            blk value: fstore_3.
            blk value: fsub.
            blk value: getfield.
            blk value: getstatic.
            blk value: goto.
            blk value: goto_w.
            blk value: i2b.
            blk value: i2c.
            blk value: i2d.
            blk value: i2f.
            blk value: i2l.
            blk value: i2s.
            blk value: iadd.
            blk value: iaload.
            blk value: iand.
            blk value: iastore.
            blk value: iconst_0.
            blk value: iconst_1.
            blk value: iconst_2.
            blk value: iconst_3.
            blk value: iconst_4.
            blk value: iconst_5.
            blk value: iconst_m1.
            blk value: idiv.
            blk value: if_acmpeq.
            blk value: if_acmpne.
            blk value: if_icmpeq.
            blk value: if_icmpge.
            blk value: if_icmpgt.
            blk value: if_icmple.
            blk value: if_icmplt.
            blk value: if_icmpne.
            blk value: ifeq.
            blk value: ifge.
            blk value: ifgt.
            blk value: ifle.
            blk value: iflt.
            blk value: ifne.
            blk value: ifnonnull.
            blk value: ifnull.
            blk value: iinc.
            blk value: iload.
            blk value: iload_0.
            blk value: iload_1.
            blk value: iload_2.
            blk value: iload_3.
            blk value: imul.
            blk value: ineg.
            blk value: instanceof.
            blk value: invokeinterface.
            blk value: invokespecial.
            blk value: invokestatic.
            blk value: invokevirtual.
            blk value: ior.
            blk value: irem.
            blk value: ireturn.
            blk value: ishl.
            blk value: ishr.
            blk value: istore.
            blk value: istore_0.
            blk value: istore_1.
            blk value: istore_2.
            blk value: istore_3.
            blk value: isub.
            blk value: iushr.
            blk value: ixor.
            blk value: jsr.
            blk value: jsr_w.
            blk value: l2d.
            blk value: l2f.
            blk value: l2i.
            blk value: ladd.
            blk value: laload.
            blk value: land.
            blk value: lastore.
            blk value: lcmp.
            blk value: lconst_0.
            blk value: lconst_1.
            blk value: ldc.
            blk value: ldc2_w.
            blk value: ldc_w.
            blk value: ldiv.
            blk value: lload.
            blk value: lload_0.
            blk value: lload_1.
            blk value: lload_2.
            blk value: lload_3.
            blk value: lmul.
            blk value: lneg.
            blk value: lookupswitch.
            blk value: lor.
            blk value: lrem.
            blk value: lreturn.
            blk value: lshl.
            blk value: lshr.
            blk value: lstore.
            blk value: lstore_0.
            blk value: lstore_1.
            blk value: lstore_2.
            blk value: lstore_3.
            blk value: lsub.
            blk value: lushr.
            blk value: lxor.
            blk value: monitorenter.
            blk value: monitorexit.
            blk value: multianewarray.
            blk value: new.
            blk value: newarray.
            blk value: nop.
            blk value: pop.
            blk value: pop2.
            blk value: putfield.
            blk value: putstatic.
            blk value: ret.
            blk value: return.
            blk value: saload.
            blk value: sastore.
            blk value: sipush.
            blk value: swap.
            blk value: tableswitch.
            blk value: wide).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         jsr = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jsr' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute jsr.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jsr' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jsr' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         getBranch: ca = ( |
            | ca getSignedShort).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jsr' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jsr' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         jsrNumber <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jsr' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'jsr'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jsr' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 168.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: abstract\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         jsrs = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jsrs' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute jsrs.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jsr' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jsrs' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jsr' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jsr' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         targetPC <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: instructions\x7fCategory: branch and jsr PCs\x7fComment: PC\'s to which we must be able to return after
a JSR.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         jsrReturnPCs.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: translating with branches\x7fComment: Used when generating code for a \'ret\' (to get back
to the calling jsr).\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: public'
        
         jsrReturnVectorOfLabels <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: instructions\x7fCategory: branch and jsr PCs\x7fComment: PC\'s to which a jsr instruction may jump.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         jsrTargetPCs.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         jsr_w = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jsr_w' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute jsr_w.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jsr_w' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jsr_w' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         getBranch: ca = ( |
            | 
            ca getSignedWord asInteger).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jsr_w' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jsr_w' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         jsrNumber <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jsr_w' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'jsr_w'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jsr_w' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 201.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jsr_w' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jsrs' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jsr_w' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jsr_w' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         targetPC <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jsrs' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         adjustPCsFor: ex = ( |
            | 
            targetPC: (ex adjustTargetPC: targetPC RefPC: pc).
            resend.adjustPCsFor: ex.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jsrs' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         buildCA: ca = ( |
            | 
            targetPC: pc + (getBranch: ca).
            jsrNumber: (ca registerJSRTargetPC: targetPC).
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jsrs' -> () From: ( | {
         'Category: dup2 analysis\x7fComment: Used for dup2 analysis.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fastInterp: stack = ( |
            | 
            stack push: singleWord.  "This is the return address."
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jsrs' -> () From: ( | {
         'Category: dup2 analysis\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fastInterpBranchPCsDo: blk = ( |
            | 
            blk value: targetPC.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jsrs' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generateUsing: gen = ( |
            | 
            gen pushLocalVarNamed:
              (gen myCodeAttribute myMethod nameForJsrToPC: targetPC).
            gen generateSend: 'value'.
            gen pop1.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jsrs' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generateUsingBr: gen = ( |
            | 
            gen pushInteger: jsrNumber.  "Push my jsr number - specifies the return address
                                          when used as index into vector of labels."
            gen bytecodeGen branchAlways: (getLabelForJavaPC: targetPC UsingBr: gen).
            gen pop1.   "Balance stack by popping the integer we pushed above. This instr.
                         will never be executed because it is preceeded by an unconditional
                         branch."
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jsrs' -> () From: ( | {
         'Category: dup2 analysis\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         jsrHook: stack = ( |
            | 
            stack pop: 1. "The word is no longer there when we fall through."
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jsrs' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         lateTraceOnFile: file = ( |
            | 
            file write: targetPC printString, ' '.
            resend.lateTraceOnFile: file).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jsrs' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'topStmt' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jumpMultiple' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         canDrop: exp = ( |
            | 
            exp isBlock && [exp isEmpty]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: abstract\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         jumps = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jumps' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute jumps.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jumpMultiple' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jumps' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jumpSingle' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         adjustPCsFor: ex = ( |
            | 
            targetPC: (ex adjustTargetPC: targetPC RefPC: pc).
            resend.adjustPCsFor: ex.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jumpSingle' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         buildCA: ca = ( |
             t <- 0.
            | 
            t: pc + (getBranch: ca).
            targetPC: t.
            ca branchPCs add: t.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jumpSingle' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         lateTraceOnFile: file = ( |
            | 
            file write: targetPC printString, ' '.
            resend.lateTraceOnFile: file).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jumpSingle' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jumps' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jumpSingle' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         targetPCsDo: blk = ( |
            | blk value: targetPC).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jumps' -> () From: ( | {
         'Comment: Whether control flow continues onto next instruction
(usually true, but not for jumps and returns).\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         fallsThrough = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jumps' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'topStmt' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jumps' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         targetPCsDo: blk = ( |
            | 
            error: 'childShouldImplement').
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         l2d = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'l2d' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute l2d.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'l2d' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'l2d' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'l2d' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'l2d'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'l2d' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 138.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'l2d' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'conv' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'l2d' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'l2d' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'l2d' -> () From: ( | {
         'Comment: Whether this instruction produces
a 64 bit value (long or double).
Needed to implement the \"dup2\" etc
instructions.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         yields64Bits = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         l2f = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'l2f' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute l2f.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'l2f' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'l2f' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'l2f' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'l2f'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'l2f' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 137.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'l2f' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'conv' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'l2f' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'l2f' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         l2i = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'l2i' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute l2i.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'l2i' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'l2i' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'l2i' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'l2i'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'l2i' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 136.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'l2i' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'conv' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'l2i' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'l2i' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         ladd = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ladd' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute ladd.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ladd' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ladd' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ladd' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'ladd'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ladd' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 97.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ladd' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'binaryOp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ladd' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ladd' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         primSelector = '_IntAdd:IfFail:'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ladd' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ladd' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ladd' -> () From: ( | {
         'Comment: Whether this instruction produces
a 64 bit value (long or double).
Needed to implement the \"dup2\" etc
instructions.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         yields64Bits = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         laload = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'laload' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute laload.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'laload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         arrayref.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'laload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'laload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         index <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'laload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'laload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'laload'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'laload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 47.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'laload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'arrayLoad' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'laload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'laload' -> () From: ( | {
         'Comment: Whether this instruction produces
a 64 bit value (long or double).
Needed to implement the \"dup2\" etc
instructions.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         yields64Bits = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         land = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'land' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute land.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'land' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'land' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'land' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'land'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'land' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 127.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'land' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'binaryOp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'land' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'land' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         primSelector = '_IntAnd:IfFail:'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'land' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'land' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'land' -> () From: ( | {
         'Comment: Whether this instruction produces
a 64 bit value (long or double).
Needed to implement the \"dup2\" etc
instructions.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         yields64Bits = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: instructions\x7fComment: Used for testing when we hit the end of the method
during code generation.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         lastInstruction = ( |
            | myInstructions last).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: programCounter\x7fComment: PC when last opcode was fetched.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         lastPC <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         lastore = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lastore' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute lastore.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         arrayref.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         index <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'lastore'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 80.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'arrayStore' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         lcmp = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lcmp' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute lcmp.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lcmp' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lcmp' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lcmp' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'lcmp'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lcmp' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 148.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lcmp' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'binaryOp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lcmp' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lcmp' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lcmp' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         lconst_0 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lconst_0' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute lconst_0.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lconst_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         constValue = 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lconst_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lconst_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lconst_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'lconst_0'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lconst_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 9.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lconst_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'constImplicit' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lconst_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lconst_0' -> () From: ( | {
         'Comment: Whether this instruction produces
a 64 bit value (long or double).
Needed to implement the \"dup2\" etc
instructions.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         yields64Bits = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         lconst_1 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lconst_1' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute lconst_1.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lconst_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         constValue = 1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lconst_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lconst_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lconst_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'lconst_1'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lconst_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 10.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lconst_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'constImplicit' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lconst_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lconst_1' -> () From: ( | {
         'Comment: Whether this instruction produces
a 64 bit value (long or double).
Needed to implement the \"dup2\" etc
instructions.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         yields64Bits = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         ldc = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldc' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute ldc.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldc' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         constStruct.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldc' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldc' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         getIndex: ca = ( |
            | ca getUnsignedByte).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldc' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldc' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         isValidConstantType = ( |
            | 
            constStruct  is_Integer || 
            [constStruct is_String] || 
            [constStruct is_Float]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldc' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'ldc'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldc' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 18.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: abstract\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         ldcTop = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldcTop' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute ldcTop.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldc' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldcTop' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldc' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         ldc2_w = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldc2_w' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute ldc2_w.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldc2_w' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         constStruct.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldc2_w' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldc2_w' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         getIndex: ca = ( |
            | ca getUnsignedShort).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldc2_w' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldc2_w' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         isValidConstantType = ( |
            | 
            constStruct is_Long || [constStruct is_Double]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldc2_w' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'ldc2_w'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldc2_w' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 20.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldc2_w' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldcTop' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldc2_w' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldc2_w' -> () From: ( | {
         'Comment: Whether this instruction produces
a 64 bit value (long or double).
Needed to implement the \"dup2\" etc
instructions.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         yields64Bits = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldcTop' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         buildCA: ca = ( |
            | 
            constStruct: (ca myClassFile constantPoolAt: (getIndex: ca)).
            isValidConstantType ifFalse: [
                ic raiseError: 'bad constant type: ', constStruct printString.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldcTop' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         canBuildStringsEagerly = ( |
            | pep loader hasBeenLoadedClassString && [pep loader hasBeenLoadedClassSystem]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldcTop' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         constValue = ( |
            | 
            constStruct translateConstantValue).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldcTop' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generateUsing: gen = ( |
            | 
            "String constants are tricky to get right,  timing-wise.
             An earlier version of Pep deferred building the string objects until
             execution of the method containing the string constant.
             This behavior, however, had incorrect semantics that could be detected
             by Java programs by comparing _identity_ of string constants.

             An alternative would be to build the string objects at compile time.
             Then we would have to catch and store any exceptions that occurs during
             the building and hand them over to the first thread that tries to access
             the string. This idea is fine. Unfortunately (!!!) it encounters a
             circularity problem: the class java.lang.String contains strings, which
             cannot be build while the class is being loaded. 

             Therefore, we have adopted a third solution. We build a small method,
             which upon its first invokation will construct the string object. The
             method is inserted in the constant object of the class (under the name
             where the translated Java code) expects to find the string. The method 
             will replace itself with the string, once it has been constructed, so that
             only the first access to the string causes the method to run. Of course,
             once class java.lang.String has been loaded, we may as well construct
             the string objects at compile time."

            constStruct is_String && [canBuildStringsEagerly not] ifTrue: [
                "This is the lazy case."
                loadConstantFromPath: constStruct string pathForConstant
                               Using: gen.
            ] False: [
                resend.generateUsing: gen.
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldcTop' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         lateTraceOnFile: file = ( |
            | 
            file write: constStruct printString, ' '.
            resend.lateTraceOnFile: file).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldcTop' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'constTop' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         ldc_w = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldc_w' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute ldc_w.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldc_w' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         constStruct.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldc_w' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldc_w' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         getIndex: ca = ( |
            | ca getUnsignedShort).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldc_w' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldc_w' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         isValidConstantType = ( |
            | 
            constStruct  is_Integer || 
            [constStruct is_String] || 
            [constStruct is_Float]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldc_w' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'ldc_w'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldc_w' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 19.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldc_w' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldcTop' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldc_w' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         ldiv = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldiv' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute ldiv.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldiv' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldiv' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldiv' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'ldiv'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldiv' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 109.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldiv' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'binaryOp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldiv' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldiv' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         primSelector = '_IntDiv:IfFail:'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldiv' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldiv' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ldiv' -> () From: ( | {
         'Comment: Whether this instruction produces
a 64 bit value (long or double).
Needed to implement the \"dup2\" etc
instructions.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         yields64Bits = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         lload = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lload' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute lload.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         index <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'lload'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 22.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'load' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lload' -> () From: ( | {
         'Comment: Whether this instruction produces
a 64 bit value (long or double).
Needed to implement the \"dup2\" etc
instructions.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         yields64Bits = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         lload_0 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lload_0' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute lload_0.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lload_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lload_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         index = 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lload_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lload_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'lload_0'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lload_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 30.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lload_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'load_n' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lload_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lload_0' -> () From: ( | {
         'Comment: Whether this instruction produces
a 64 bit value (long or double).
Needed to implement the \"dup2\" etc
instructions.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         yields64Bits = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         lload_1 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lload_1' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute lload_1.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lload_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lload_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         index = 1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lload_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lload_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'lload_1'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lload_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 31.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lload_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'load_n' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lload_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lload_1' -> () From: ( | {
         'Comment: Whether this instruction produces
a 64 bit value (long or double).
Needed to implement the \"dup2\" etc
instructions.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         yields64Bits = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         lload_2 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lload_2' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute lload_2.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lload_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lload_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         index = 2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lload_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lload_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'lload_2'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lload_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 32.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lload_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'load_n' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lload_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lload_2' -> () From: ( | {
         'Comment: Whether this instruction produces
a 64 bit value (long or double).
Needed to implement the \"dup2\" etc
instructions.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         yields64Bits = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         lload_3 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lload_3' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute lload_3.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lload_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lload_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         index = 3.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lload_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lload_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'lload_3'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lload_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 33.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lload_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'load_n' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lload_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lload_3' -> () From: ( | {
         'Comment: Whether this instruction produces
a 64 bit value (long or double).
Needed to implement the \"dup2\" etc
instructions.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         yields64Bits = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         lmul = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lmul' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute lmul.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lmul' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lmul' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lmul' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'lmul'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lmul' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 105.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lmul' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'binaryOp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lmul' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lmul' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         primSelector = '_IntMul:IfFail:'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lmul' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lmul' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lmul' -> () From: ( | {
         'Comment: Whether this instruction produces
a 64 bit value (long or double).
Needed to implement the \"dup2\" etc
instructions.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         yields64Bits = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         lneg = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lneg' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute lneg.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lneg' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lneg' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lneg' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'lneg'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lneg' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 117.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lneg' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'unaryOp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lneg' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lneg' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lneg' -> () From: ( | {
         'Comment: Whether this instruction produces
a 64 bit value (long or double).
Needed to implement the \"dup2\" etc
instructions.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         yields64Bits = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'load' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         buildCA: ca = ( |
            | 
            buildCA: ca Wide: false).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'load' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         buildCA: ca Wide: bool = ( |
            | 
            bool ifTrue: [index: ca getUnsignedShort]
                  False: [index: ca getUnsignedByte].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'load' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         lateTraceOnFile: file = ( |
            | 
            file write: index printString,' '.
            resend.lateTraceOnFile: file).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: abstract\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         loadLocal = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'loadLocal' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute loadLocal.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'load' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'loadLocal' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'loadLocal' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generateUsing: gen = ( |
            | 
            gen pushLocalVarNumber: index).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'loadLocal' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isLocalLoad = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'loadLocal' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'loadLocalOrConst' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'loadLocalOrConst' -> () From: ( | {
         'Category: dup2 analysis\x7fComment: Used for dup2 analysis.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fastInterp: stack = ( |
            | 
            stack push: defaultResult.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'loadLocalOrConst' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         interp: stack = ( |
            | 
            stack push: self.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'loadLocalOrConst' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'loadTop' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'loadTop' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'topExp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'load_n' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         interp: stack = ( |
            | 
            stack push: self.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'load_n' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'loadLocal' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         lookupswitch = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lookupswitch' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute lookupswitch.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lookupswitch' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         adjustPCsFor: ex = ( |
            | 
            default: (ex adjustTargetPC: default RefPC: pc).
            matchTargetPairs do: [|:mt| mt adjustPCsFor: ex RefPC: pc].
            resend.adjustPCsFor: ex.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lookupswitch' -> () From: ( | {
         'Category: blcokClone\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         adjustedMatchTargetPairsDo: blk = ( |
            | 
            "NB: also implemented by tableswitch instruction."
            matchTargetPairs do: [|:mt| blk value: mt match With: mt target].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lookupswitch' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         buildCA: ca = ( |
             npairs <- 0.
             pairs.
            | 
            ca alignPCToWord.
            default: pc + ca getSignedWord asInteger.
            ca branchPCs add: default.
            npairs:  ca getSignedWord asInteger.
            pairs: sequence copy.
            npairs do: [| m. t. |
                m: ca getSignedWord asInteger.
                t: pc + ca getSignedWord asInteger.
                t != default ifTrue: [     "Don't want the default in the match vector also!"
                    low:  (low  min: m).
                    high: (high max: m).
                    pairs add: (matchTargetPair copyMatch: m Target: t).
                    ca branchPCs add: t.
                ].
            ].
            matchTargetPairs: pairs asVector.
            setUniqueTargets: ca.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lookupswitch' -> () From: ( | {
         'Category: vectorOfClosures\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         compileUsingVectorOfClosures: gen = ( |
            | 
            makeVectorOfTargetsUsing: gen.
            "Now make vector of matches."
            matchTargetPairs do: [|:mt| gen pushInteger: mt match asInt32].
            gen makeVectorCounts: matchTargetPairs size asVector.
            gen generateSend: pep prefix, name, 'Targets:Matches:'.
            gen pop1.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lookupswitch' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         default <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lookupswitch' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lookupswitch' -> () From: ( | {
         'Category: match boundaries\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         high <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lookupswitch' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         interp: stack = ( |
            | 
            key: stack pop).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lookupswitch' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lookupswitch' -> () From: ( | {
         'Category: branches\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         isDense = ( |
            | 
            20 > (high - low) ifTrue: [^ true].
            0.5 > ((high - low) asFloat /  matchTargetPairs size)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lookupswitch' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         key.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lookupswitch' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         keysForTarget: target = ( |
             keys.
            | 
            keys: sequence copy.
            matchTargetPairs do: [|:mt|
                target = mt target ifTrue: [keys add: mt match].
            ].
            keys).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lookupswitch' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         lateTraceOnFile: file = ( |
            | 
            file writeLine: matchTargetPairs size printString, ': default=', default printString.
            matchTargetPairs do: [|:mt|
                14 - (mt match printString size) do: [file write: ' '].
                file write: mt match printString, ': '.
                file writeLine: mt target printString.
            ].
            resend.lateTraceOnFile: file).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lookupswitch' -> () From: ( | {
         'Category: match boundaries\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         low <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lookupswitch' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         matchTargetPair = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lookupswitch' -> 'matchTargetPair' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute lookupswitch matchTargetPair.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lookupswitch' -> 'matchTargetPair' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         adjustPCsFor: ex RefPC: pc = ( |
            | 
            target: (ex adjustTargetPC: target RefPC: pc)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lookupswitch' -> 'matchTargetPair' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         copyMatch: m Target: t = ( |
            | copy initMatch: m Target: t).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lookupswitch' -> 'matchTargetPair' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         initMatch: m Target: t = ( |
            | 
            match:  m.
            target: t.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lookupswitch' -> 'matchTargetPair' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         match <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lookupswitch' -> 'matchTargetPair' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'traits' -> 'clonable' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lookupswitch' -> 'matchTargetPair' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         target <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lookupswitch' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: private'
        
         matchTargetPairs <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lookupswitch' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'lookupswitch'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lookupswitch' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         noOfNonUniqueTargets = ( |
            | 
            1 + matchTargetPairs size).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lookupswitch' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         nonUniqueTargetPCsDo: blk = ( |
            | 
            matchTargetPairs do: [|:mt| blk value: mt target].
            blk value: default.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lookupswitch' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 171.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: abstract\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         switches = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'switches' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute switches.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lookupswitch' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'switches' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lookupswitch' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lookupswitch' -> () From: ( | {
         'Category: branches\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         reduceSwitchValueUsingBr: gen = ( |
             r.
             sel <- ''.
            | 
            isDense ifTrue: [|jumpVector|
                jumpVector: (vector copySize: 1 + (high - low) FillingWith: default).
                matchTargetPairs do: [|:mt|
                    jumpVector at: mt match - low Put: mt target.
                ].
                0 != low ifTrue: [makeZeroBasedUsingBr: gen].
                ^ jumpVector.
            ].
            30 < matchTargetPairs size ifTrue: [  "Use dictionary."
                r: dictionary copy.
                matchTargetPairs do: [|:mt. :i| r at: mt match Put: i].
                sel: 'at:IfAbsent:'.
            ] False: [
                r: matchTargetPairs copy.
                r mapBy: [|:mt. :i| mt match].
                sel: 'keyOf:IfAbsent:'.
            ].
            gen whileRetaining: 1 Do: [gen bytecodeGen literal: r].
            gen pushInteger: -1.   "Default."
            gen generateSend: sel.
            matchTargetPairs copy mapBy: [|:mt| mt target].  "Return jump vector.").
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lookupswitch' -> () From: ( | {
         'Category: blcokClone\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         switchStmtNo <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lookupswitch' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: private'
        
         uniqueTargets <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: translating without branches\x7fComment: Used to distinguish loops.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         loopCounter <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         lor = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lor' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute lor.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lor' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lor' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lor' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'lor'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lor' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 129.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lor' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'binaryOp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lor' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lor' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         primSelector = '_IntOr:IfFail:'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lor' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lor' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lor' -> () From: ( | {
         'Comment: Whether this instruction produces
a 64 bit value (long or double).
Needed to implement the \"dup2\" etc
instructions.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         yields64Bits = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         lrem = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lrem' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute lrem.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lrem' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lrem' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lrem' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'lrem'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lrem' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 113.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lrem' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'binaryOp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lrem' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lrem' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lrem' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lrem' -> () From: ( | {
         'Comment: Whether this instruction produces
a 64 bit value (long or double).
Needed to implement the \"dup2\" etc
instructions.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         yields64Bits = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         lreturn = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lreturn' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute lreturn.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lreturn' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lreturn' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lreturn' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'lreturn'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lreturn' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 173.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lreturn' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'returns' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lreturn' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lreturn' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         returnValue.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         lshl = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lshl' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute lshl.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lshl' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lshl' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lshl' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'lshl'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lshl' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 121.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lshl' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'binaryOp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lshl' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lshl' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lshl' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lshl' -> () From: ( | {
         'Comment: Whether this instruction produces
a 64 bit value (long or double).
Needed to implement the \"dup2\" etc
instructions.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         yields64Bits = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         lshr = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lshr' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute lshr.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lshr' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lshr' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lshr' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'lshr'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lshr' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 123.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lshr' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'binaryOp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lshr' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lshr' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lshr' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lshr' -> () From: ( | {
         'Comment: Whether this instruction produces
a 64 bit value (long or double).
Needed to implement the \"dup2\" etc
instructions.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         yields64Bits = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         lstore = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lstore' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute lstore.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lstore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lstore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         index <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lstore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lstore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'lstore'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lstore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 55.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lstore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'store' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lstore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lstore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         lstore_0 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lstore_0' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute lstore_0.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lstore_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lstore_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         index = 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lstore_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lstore_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'lstore_0'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lstore_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 63.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lstore_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'store_n' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lstore_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lstore_0' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         lstore_1 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lstore_1' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute lstore_1.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lstore_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lstore_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         index = 1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lstore_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lstore_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'lstore_1'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lstore_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 64.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lstore_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'store_n' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lstore_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lstore_1' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         lstore_2 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lstore_2' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute lstore_2.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lstore_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lstore_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         index = 2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lstore_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lstore_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'lstore_2'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lstore_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 65.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lstore_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'store_n' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lstore_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lstore_2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         lstore_3 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lstore_3' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute lstore_3.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lstore_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lstore_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         index = 3.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lstore_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lstore_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'lstore_3'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lstore_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 66.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lstore_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'store_n' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lstore_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lstore_3' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         lsub = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lsub' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute lsub.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lsub' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lsub' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lsub' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'lsub'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lsub' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 101.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lsub' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'binaryOp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lsub' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lsub' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         primSelector = '_IntSub:IfFail:'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lsub' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lsub' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lsub' -> () From: ( | {
         'Comment: Whether this instruction produces
a 64 bit value (long or double).
Needed to implement the \"dup2\" etc
instructions.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         yields64Bits = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         lushr = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lushr' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute lushr.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lushr' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lushr' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lushr' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'lushr'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lushr' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 125.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lushr' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'binaryOp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lushr' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lushr' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lushr' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lushr' -> () From: ( | {
         'Comment: Whether this instruction produces
a 64 bit value (long or double).
Needed to implement the \"dup2\" etc
instructions.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         yields64Bits = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         lxor = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lxor' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute lxor.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lxor' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lxor' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lxor' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'lxor'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lxor' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 131.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lxor' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'binaryOp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lxor' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lxor' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         primSelector = '_IntXor:IfFail:'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lxor' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lxor' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'lxor' -> () From: ( | {
         'Comment: Whether this instruction produces
a 64 bit value (long or double).
Needed to implement the \"dup2\" etc
instructions.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         yields64Bits = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: instructions\x7fComment: Must be called after we are done fiddling with the instructions.
See also the comment in \'buildInstructions\'.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         mapPCToIndices = ( |
             v.
            | 
            v: (vector copySize: 1 + lastInstruction pc).
            myInstructions do: [|:in. :idx. pc <- 0. |
                pc: in pc.
                -1 != pc ifTrue: [ "Start instruction has dumb pc!"
                    v at: pc Put: idx.
                ].
            ].
            pcToIndex: v.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: translating with branches\x7fCategory: exp stack\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         matchStacks: javaStackHeight FellThrough: fellThrough Instr: in BCG: bcg = ( |
             selfStackHeight <- 0.
            | 
            selfStackHeight: bcg stackHeight.
            fellThrough ifTrue: [
                "This is a BIG invariant: the Self stack height must be exactly the
                 same as the (calculated) Java stack height at each instruction."
                 pep debug ifTrue: [verifyStackHeightSelf: selfStackHeight
                                    Java: javaStackHeight Instr: in].
            ] False: [
                adjustStackHeightTo: javaStackHeight From: selfStackHeight BCG: bcg.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         maxOpcode = ( |
             m <- 0.
            | 
            javaInstructionsDo: [|:instr| m: (m max: instr opcode)].
            m).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: basic\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         max_locals <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: basic\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         max_stack <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: abstract\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         monitorOp = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'monitorOp' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute monitorOp.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'monitorOp' -> () From: ( | {
         'Category: dup2 analysis\x7fComment: Used for dup2 analysis.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fastInterp: stack = ( |
            | 
            stack pop: 1.
            resend.fastInterp: stack).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'monitorOp' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         interp: stack = ( |
            | 
            objectref: stack pop).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'monitorOp' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'topStmt' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'monitorOp' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         transSel = ( |
            | pep prefix, name).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         monitorenter = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'monitorenter' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute monitorenter.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'monitorenter' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'monitorenter' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'monitorenter' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'monitorenter'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'monitorenter' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         objectref.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'monitorenter' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 194.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'monitorenter' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'monitorOp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'monitorenter' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         monitorexit = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'monitorexit' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute monitorexit.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'monitorexit' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'monitorexit' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'monitorexit' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'monitorexit'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'monitorexit' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         objectref.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'monitorexit' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 195.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'monitorexit' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'monitorOp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'monitorexit' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         multianewarray = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'multianewarray' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute multianewarray.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'multianewarray' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         arrayType.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'multianewarray' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         buildCA: ca = ( |
            | 
            arrayType: (ca myClassFile constantPoolAt: ca getUnsignedShort).
            "Note: 'arrayType' may be '[[I'  etc. for an 'int [][]' array. I.e., it is
             not strictly a class."
            arrayType is_Class ifFalse: [ca raiseError: 'multinewarray: bad element type'].
            dimensions: ca getUnsignedByte.
            0 = dimensions ifTrue: [ca raiseError: 'multinewarray: zero dimensions'].
            ('' copySize: dimensions FillingWith: '[') != 
            (arrayType nameAsAscii copySize: dimensions) ifTrue: [
                ca raiseError: 'mutinewarray: element type (', arrayType nameAsAscii, 
                               ') does not match dimensions (', dimensions printString, ')'.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'multianewarray' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: private'
        
         counts <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'multianewarray' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         depth = ( |
             d <- 0.
            | 
            d: (countBracketsIn: arrayType nameAsAscii).
            "Be sure that we are not requested to allocated more dimensions
             than the array depth."
            pep assert: [d >= dimensions].
            d).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'multianewarray' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         dimensions <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'multianewarray' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'multianewarray' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         interp: stack = ( |
            | 
            counts: (vector copySize: dimensions).
            dimensions reverseDo: [|:i| 
                counts at: i Put: stack pop.
            ].
            stack push: self.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'multianewarray' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'multianewarray' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'multianewarray'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'multianewarray' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 197.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'multianewarray' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'newArrays' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'multianewarray' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'multianewarray' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         rawName = ( |
            | arrayType nameAsAscii).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: translating without branches\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         myBlockSet.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: basic\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (pep classFile)\x7fVisibility: public'
        
         myClassFile <- bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: instructions\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         myInstructions.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: basic\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         myMethod.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (\'\')\x7fVisibility: public'
        
         nameOfResult <- ''.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: instructions\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         needsDup2Analysis <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         new = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'new' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute new.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'new' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         buildCA: ca = ( |
            | 
            classRef: (ca myClassFile constantPoolAt: ca getUnsignedShort).
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'new' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         classRef <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'new' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'new' -> () From: ( | {
         'Category: dup2 analysis\x7fComment: Used for dup2 analysis.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fastInterp: stack = ( |
            | 
            stack push: singleWord.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'new' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generateUsing: gen = ( |
            | 
            pep ifTraceMutator: [gen traceExpStack].
            gen pushInstanceOfJavaClass: classRef nameAsAscii.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'new' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         interp: stack = ( |
            | 
            stack push: self.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'new' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'new' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         lateTraceOnFile: file = ( |
            | 
            file write: classRef printString, ' '.
            resend.lateTraceOnFile: file).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'new' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'new'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'new' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 187.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: abstract\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         newTop = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'newTop' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute newTop.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'new' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'newTop' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'new' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'newArrays' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         baseClassName = ( |
             i <- 0.
             j <- 0.
             s.
            | 
            s: rawName.   "This name may contain brackets etc.
                           For example: '[[Ljava.lang.Object;'.
                           We want:     'java.lang.Object'."
            ['[' = (s at: i)] whileTrue: [
                i: 1 + i.
            ].
            j: s size.
            ('L' = (s at: i)) && [';' = (s at: j - 1)] ifTrue: [
                i:  1 + i.
                j: -1 + j.
            ].
            s: (s copyFrom: i UpTo: j).
            1 < s size ifTrue: [^ s].
            pep fakeClassNameFor: (typeNameForPrimitiveTypeLetter: s IfFail: [
                error: 'unexpected array class name: ', rawName.
            ])).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'newArrays' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         countBracketsIn: str = ( |
            | 
            str do: [|:ch. :i| 
                ch = '[' ifFalse: [^ i].
            ].
            str size).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'newArrays' -> () From: ( | {
         'Category: dup2 analysis\x7fComment: Used for dup2 analysis.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fastInterp: stack = ( |
            | 
            stack pop: dimensions.
            stack push: singleWord.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'newArrays' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generateUsing: gen = ( |
            | 
            pep ifTraceMutator: [gen traceExpStack].

            "'For all array creation byte codes, dimensions' is the number of 
             dimensions we allocate. 'depth' is the depth of the array's type 
             (in the sense of 'array of array of ...')."
            pep assert: [dimensions <= depth].
            gen whileRetaining: dimensions Do: [
                gen pushJavaClass: baseClassName.
                gen generateSend: 'array_', depth printString.
                [array_1. "For senders"].
            ].
            gen generateSend: newArraySelector.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'newArrays' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         newArraySelector = ( |
             sel <- ''.
            | 
            sel: pep prefix, 'newArray'.
            dimensions do: [sel: sel, 'Size:'].
            sel).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'newArrays' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'newTop' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: mixins\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         signatureMixin = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'signatureMixin' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep signatureMixin.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'newArrays' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         signatureMixin* = bootstrap stub -> 'globals' -> 'pep' -> 'signatureMixin' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'newTop' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'topExp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         newarray = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'newarray' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute newarray.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'newarray' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         atype <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'newarray' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         buildCA: ca = ( |
            | 
            atype: ca getUnsignedByte.
            (isValidAType: atype) ifFalse: [
                ca raiseError: 'bad array type: ', atype printString.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'newarray' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         count.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'newarray' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         depth = 1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'newarray' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         dimensions = 1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'newarray' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'newarray' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         interp: stack = ( |
            | 
            count: stack pop.
            stack push: self.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'newarray' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'newarray' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         isValidAType: a = ( |
            | 
            (4 <= a) && [11 >= a]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'newarray' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         lateTraceOnFile: file = ( |
            | 
            file write: rawName printString, ' '.
            resend.lateTraceOnFile: file).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'newarray' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'newarray'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'newarray' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 188.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'newarray' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'newArrays' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'newarray' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'newarray' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         rawName = ( |
             a <- 0.
            | 
            a: atype.
            (4 > a) || [11 < a] ifTrue: [
                error: 'bad array type: ', a printString.
            ].
            '????ZCFDBSIJ' at: a).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: translating with branches\x7fCategory: exceptions\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         nextExcAlertIdx = ( |
            | 
            currentAlert: 1 + currentAlert.
            excAlertIndices at: currentAlert IfAbsent: -1).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: exceptions\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         nextExceptionStartPCAfter: pc = ( |
             res <- 0.
            | 
            res: maxSmallInt.
            exceptions do: [|:ex|
                pc < ex start_pc ifTrue: [
                    res: (res min: ex start_pc).
                ].
            ].
            res).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         nop = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'nop' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute nop.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'nop' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'nop' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generateUsing: gen = ( |
            | self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'nop' -> () From: ( | {
         'Category: testing\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'nop' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'nop'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'nop' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'nop' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'topEither' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'nop' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: codeAccess\x7fComment: Iterate \'blk\' over the opcodes in the code. It is the
responsibility of \'blk\' to advance the PC over any operands
that the opcode may have.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcodesDo: blk = ( |
             maxPC <- 0.
            | 
            maxPC: code size.
            pc: 0.
            [pc < maxPC] whileTrue: [
                blk value: getOpcode.   "'blk' must advance pc over any operands."
            ].
            pc: -1.   "Make invalid."
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: structDefs\x7fCategory: attributeStructs\x7fCategory: abstractTypes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         topAttribute = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topAttribute' -> () From: ( |
             {} = 'Comment: Common supertype of all attribute types.\x7fModuleInfo: Creator: globals pep classFile topAttribute.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topAttribute' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: basic\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         parseNameIdx: idx AttrLen: len = ( |
             parseIdx0 <- 0.
            | 
            attribute_name_index: idx.
            parseIdx0:  myClassFile parseIdx.
            max_stack:  myClassFile parseU2.
            max_locals: myClassFile parseU2.
            code:       (myClassFile parseNBytes: myClassFile parseU4).
            exceptions: myClassFile parseExceptions.
            attributes: myClassFile parseAttributes.
            len != (myClassFile parseIdx - parseIdx0) ifTrue: [
                myClassFile abortParse: 'class file: could not parse code (length check failed)'.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: programCounter\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: instructions\x7fComment: Set by mapPCToInstr.
Index by PC to get instruction.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         pcToIndex.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         pop = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'pop' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute pop.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'pop' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'pop' -> () From: ( | {
         'Category: dup2 analysis\x7fComment: Used for dup2 analysis.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fastInterp: stack = ( |
            | 
            stack pop isDoubleWord ifTrue: [splitError: stack].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'pop' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'pop' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'pop'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'pop' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 87.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: abstract\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         pops = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'pops' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute pops.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'pop' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'pops' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'pop' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'pop' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (1)\x7fVisibility: private'
        
         popCount = 1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'pop' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: private'
        
         poppedExps <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'pop' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         setPopCount: stack = ( |
            | self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         pop2 = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'pop2' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute pop2.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'pop2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         buildCA: ca = ( |
            | 
            ca needsDup2Analysis: true.
            resend.buildCA: ca).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'pop2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'pop2' -> () From: ( | {
         'Category: dup2 analysis\x7fComment: Used for dup2 analysis.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fastInterp: stack = ( |
            | 
            stack pop isDoubleWord ifTrue: [
                popCount: 1.
            ] False: [
                stack pop isSingleWord ifFalse: [splitError: stack].
                popCount: 2.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'pop2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'pop2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'pop2'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'pop2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 88.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'pop2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'pops' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'pop2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'pop2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (1)\x7fVisibility: private'
        
         popCount <- 1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'pop2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: private'
        
         poppedExps <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'pop2' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         setPopCount: stack = ( |
            | 
            stack top yields64Bits ifTrue: [popCount: 1]
                                    False: [popCount: 2]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'pops' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generateUsing: gen = ( |
            | 
            gen popCount: popCount.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'pops' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         interp: stack = ( |
            | 
            setPopCount: stack.
            poppedExps: (vector copySize: popCount).
            poppedExps mapBy: [stack pop].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'pops' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'stackOp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: translating with branches\x7fCategory: exceptions\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         processExcInstr: in Using: gen = ( |
            | 
            (getExcForHandlerPC: in pc) generateExcHandlerUsingBr: gen.
            nextExcAlertIdx).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: abstract\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         putFieldStatic = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'putFieldStatic' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute putFieldStatic.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'putFieldStatic' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         buildCA: ca = ( |
            | 
            fieldRef: (ca myClassFile constantPoolAt: ca getUnsignedShort)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'putFieldStatic' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         interp: stack = ( |
            | 
            val: stack pop.
            setObjectRef: stack.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'putFieldStatic' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         lateTraceOnFile: file = ( |
            | 
            file write: fieldRef printString, ' '.
            resend.lateTraceOnFile: file).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'putFieldStatic' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'stores' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'putFieldStatic' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         transSel = ( |
            | 
            fieldRef mangledFieldName, ':').
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         putfield = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'putfield' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute putfield.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'putfield' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'putfield' -> () From: ( | {
         'Category: dup2 analysis\x7fComment: Used for dup2 analysis.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fastInterp: stack = ( |
            | 
            stack pop: 2.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'putfield' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         fieldRef.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'putfield' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'putfield' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'putfield'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'putfield' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         objectRef.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'putfield' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 181.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'putfield' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'putFieldStatic' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'putfield' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'putfield' -> () From: ( | {
         'Comment: invokestatic overrides this method to do nothing
since they run with no receiver object.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         setObjectRef: stack = ( |
            | 
            objectRef: stack pop).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'putfield' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         putstatic = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'putstatic' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute putstatic.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'putstatic' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'putstatic' -> () From: ( | {
         'Category: dup2 analysis\x7fComment: Used for dup2 analysis.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fastInterp: stack = ( |
            | 
            stack pop: 1.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'putstatic' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         fieldRef.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'putstatic' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generateUsing: gen = ( |
            | 
            generateStaticFieldAccessUsing: gen
                                ClassDepth: 1).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'putstatic' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'putstatic' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'putstatic'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'putstatic' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 179.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'putstatic' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'putFieldStatic' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'putstatic' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'putstatic' -> () From: ( | {
         'Comment: Static methods have no receiver so there
is no objectRef to set.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         setObjectRef: stack = ( |
            | 
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'putstatic' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: errorHandling\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         raiseError: e = ( |
            | 
            errBlk value: errorPrefix, ': ', e).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: errorHandling\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         raiseError: e PC: errPC = ( |
            | 
            errBlk value: errorPrefix, ', pc=', errPC printString, ': ', e).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: instructions\x7fCategory: branch and jsr PCs\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         registerJSRTargetPC: tpc = ( |
             jsrNumber <- 0.
            | 
            jsrNumber: jsrReturnPCs size.  "Use return PC's size since it is a sequence."
            jsrTargetPCs add: tpc.
            jsrReturnPCs add: pc.  "Current PC is where we should return
                                    after jsr routine is complete."
            jsrNumber.     "Tell him which number he is; he will need it for code generation.").
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         ret = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ret' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute ret.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ret' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         buildCA: ca = ( |
            | 
            buildCA: ca Wide: false).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ret' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         buildCA: ca Wide: bool = ( |
            | 
            bool ifTrue: [index: ca getUnsignedShort]
                  False: [index: ca getUnsignedByte].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ret' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ret' -> () From: ( | {
         'Comment: Whether control flow continues onto next instruction
(usually true, but not for jumps and returns).\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         fallsThrough = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ret' -> () From: ( | {
         'Category: dup2 analysis\x7fComment: Used for dup2 analysis.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fastInterp: stack = ( |
            | 
            stack clear.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ret' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generateUsing: gen = ( |
            | self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ret' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generateUsingBr: gen = ( |
            | 
            gen pushLocalVarNumber: index.
            gen bytecodeGen branchIndexed: gen myCodeAttribute jsrReturnVectorOfLabels.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ret' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         index <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ret' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ret' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'ret'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ret' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 169.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ret' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'topStmt' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'ret' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         return = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'return' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute return.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'return' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'return' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         handleVoid: gen = ( |
            | 
            gen pushSelf).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'return' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'return' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'return'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'return' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 177.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'return' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'returns' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'return' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'return' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         setReturnValue: stack = ( |
            | self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'returns' -> () From: ( | {
         'Comment: Whether control flow continues onto next instruction
(usually true, but not for jumps and returns).\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         fallsThrough = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'returns' -> () From: ( | {
         'Category: dup2 analysis\x7fComment: Used for dup2 analysis.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fastInterp: stack = ( |
            | 
            stack clear.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'returns' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generateUsing: gen = ( |
            | 
            handleVoid: gen.
            pep traceCalls ifTrue: [gen traceMethodExit].
            gen generateReturn.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'returns' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generateUsingBr: gen = ( |
            | 
            handleVoid: gen.
            pep traceCalls ifTrue: [gen traceMethodExit].
            != gen myCodeAttribute lastInstruction ifTrue: [|bcg|
                "At the end of a method, we don't need to do
                 anything to return."
                bcg: gen bytecodeGen.
                bcg branchAlways: bcg returnLabel.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'returns' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         handleVoid: gen = ( |
            | self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'returns' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         interp: stack = ( |
            | 
            setReturnValue: stack.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'returns' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isReturn = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'returns' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'topStmt' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'returns' -> () From: ( | {
         'Comment: The \"void return\" instruction overrides
this method to do nothing.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         setReturnValue: stack = ( |
            | returnValue: stack pop).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         saload = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'saload' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute saload.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'saload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         arrayref.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'saload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'saload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         index <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'saload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'saload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'saload'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'saload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 53.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'saload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'arrayLoad' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'saload' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         sastore = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'sastore' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute sastore.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'sastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         arrayref.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'sastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'sastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         index <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'sastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'sastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'sastore'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'sastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 86.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'sastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'arrayStore' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'sastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'sastore' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         val.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: translating with branches\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         setFinalResult: hasSH BCG: bcg = ( |
            | 
            (hasSH && [0 = bcg stackHeight]) || 
            [hasSH not && ['athrow' = lastInstruction name]] ifTrue: [
                "Can't finish with empty stack in Self. Even if the end of the 
                 method can't be reached (such as if the last instruction is athrow).
                 The second test above (hasSH not ...) is a hack: when we didn't do the
                 dup2 analysis, we have no stack heights available. Instead, we take a
                 quick look at the last instruction: if it is athrow, we push something
                 on the stack."
                bcg pushSelf.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         sipush = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'sipush' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute sipush.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'sipush' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         buildCA: ca = ( |
            | 
            constValue: ca getSignedShort).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'sipush' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         constValue <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'sipush' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'sipush' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'sipush' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'sipush'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'sipush' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 17.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'sipush' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'constTop' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'sipush' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'sipush' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         setConst: c = ( |
            | constValue: c).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'stackOp' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'topStmt' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: special\x7fComment: Special instruction we insert at
the start of every method. To ensure
connectivity of basic blocks of method.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         start = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'start' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute start.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'start' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         adjustPCsFor: ex = ( |
            | 
            myCodeAttribute adjustAllBranchPCsUsing: [|:jpc|
                ex adjustTargetPC: jpc RefPC: pc.
            ].
            resend.adjustPCsFor: ex.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'start' -> () From: ( | {
         'Category: dup2 analysis\x7fComment: Used for dup2 analysis.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         fastInterp: stack BranchPCsDo: blk = ( |
            | 
            blk value: 0.   "The main entry into the method."

            "Now do exception handlers."
            stack push: singleWord.   "The exception object."
            stack myCodeAttribute exceptions do: [|:ex|
                blk value: ex handler_pc.
            ].
            stack pop: 1.  "Pop exception object."
            false.  "Tell caller whether control falls through (it doesn't).").
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'start' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         finishTransferUsing: gen = ( |
             n <- 0.
             sel <- 'value:'.
            | 
            n: noOfExpsConsumedForTransfer.
            pep assert: [1 < n].
            "The main block is deepest in the stack; then follows the jsr blocks.
             Example: we have the main block and two jsr blocks. This is translated
             into:     
                 [|:jsr45. :jsr77| main block] value: [jsr block] 
                                                With: [jsr block]."
            n - 2 do: [sel: sel, 'With:'].
            gen generateSend: sel.
            gen pop1.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'start' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generateUsing: gen = ( |
             counter <- ''.
            | 
            pep countBinSrcMethods ifFalse: [^ self].
            gen isBinCodeGenerator ifTrue: [counter: 'binMethod'] 
                                    False: [counter: 'srcMethod'].
            gen incCounter: 'pep dynamicCounters ', counter.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'start' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'start' -> () From: ( | {
         'Category: target PCs\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isJsrTargetPC: tpc = ( |
            | 
            jsrTargetPCsDo: [|:t|
                t = tpc ifTrue: [^ true].
            ].
            false).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'start' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isStart = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'start' -> () From: ( | {
         'Category: target PCs\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         jsrTargetPCs = ( |
            | myCodeAttribute jsrTargetPCs).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'start' -> () From: ( | {
         'Category: target PCs\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         jsrTargetPCsDo: blk = ( |
            | 
            jsrTargetPCs do: blk. 
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'start' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         myCodeAttribute.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'start' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'start'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'start' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         noOfExpsConsumedForTransfer = ( |
             n <- 0.
            | 
            n: jsrTargetPCs size.
            0 = n ifTrue: [0]
                   False: [1 + n]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'start' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = -1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'start' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jumpMultiple' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'start' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         pc = -1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'start' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         pc: p = ( |
            | 
            pep assert: [-1 = p].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'start' -> () From: ( | {
         'Category: target PCs\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         targetPCsDo: blk = ( |
            | 
            blk value: 0.   "This target repr. regular method entry.
                             Serve him first to get regular method entry
                             block first on stack (see 'finishTransferUsing:')."
            jsrTargetPCsDo: blk).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'store' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         buildCA: ca = ( |
            | 
            buildCA: ca Wide: false).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'store' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         buildCA: ca Wide: bool = ( |
            | 
            bool ifTrue: [index: ca getUnsignedShort] 
                  False: [index: ca getUnsignedByte].
            markLocalStore: ca).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'store' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         lateTraceOnFile: file = ( |
            | 
            file write: index printString, ' '.
            resend.lateTraceOnFile: file).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: abstract\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         storeLocal = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'storeLocal' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute storeLocal.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'store' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'storeLocal' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'storeLocal' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         buildCA: ca = ( |
            | 
            resend.buildCA: ca.
            markLocalStore: ca).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'storeLocal' -> () From: ( | {
         'Category: dup2 analysis\x7fComment: Used for dup2 analysis.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fastInterp: stack = ( |
            | 
            stack pop: 1.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'storeLocal' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generateUsing: gen = ( |
            | 
            pep ifTraceMutator: [
                gen pushInteger: index.
                gen generateImplicitSelfSend: 'trace_storeObj:InLocal:'.
            ].
            gen setLocalVarNumber: index.
            gen pop1).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'storeLocal' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         interp: stack = ( |
            | 
            val: stack pop).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'storeLocal' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isLocalStore = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'storeLocal' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         markLocalStore: ca = ( |
            | 
            ca assignedLocals at: index Put: true.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'storeLocal' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'stores' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'store_n' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'storeLocal' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'stores' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'topStmt' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         swap = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'swap' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute swap.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'swap' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'swap' -> () From: ( | {
         'Category: dup2 analysis\x7fComment: Used for dup2 analysis.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fastInterp: stack = ( |
            | 
            stack pop isDoubleWord || [stack pop isDoubleWord] ifTrue: [
                wordSizeError: 'swapping words of double-word' Stack: stack.
            ].
            stack push: singleWord.
            stack push: singleWord.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'swap' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generateUsing: gen = ( |
             names <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
            | 
            names: (gen useTmpNamesUpTo: 2).

            "Do the popping with vector to get better sequencing of assignm.
             Mainly a concern for source code gen."
            gen popCount: 2 TransferToLocals: names.

            gen pushLocalVarNamed: (names at: 1).
            gen pushLocalVarNamed: (names at: 0).
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'swap' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         interp: stack = ( |
             w1.
             w2.
            | 
            w1: stack pop.
            w2: stack pop.
            stack push: w1.
            stack push: w2.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'swap' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'swap' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'swap'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'swap' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 95.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'swap' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'stackOp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'swap' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'switches' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         adjustPCsFor: ex = ( |
            | 
            uniqueTargets mapBy: [|:upc|
                ex adjustTargetPC: upc RefPC: pc.
            ].
            resend.adjustPCsFor: ex.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'switches' -> () From: ( | {
         'Category: selfCaseStatement\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         compare: sel Int: i AndVar: v Using: gen = ( |
            | 
            gen pushInteger: i asInt32.  "Avoid bigInts, coerce to int32."
            gen pushLocalVarNamed: v.
            gen generateSend: pep prefix, sel.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'switches' -> () From: ( | {
         'Category: blockClone\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         compileUsingBlockClonePrim: gen = ( |
             sel <- ''.
             swStr <- ''.
             swb <- ''.
             swbSize <- 0.
             uts <- 0.
            | 
            switchStmtNo: (gen registerSwitch: self).
            swStr: switchStmtNo printString.
            uts: uniqueTargets size.
            uniqueTargets do: [|:targetPC. :caseNo. blkNode|
                blkNode: (gen stackAt: uts - 1 - caseNo).
                blkNode addLocal: switchMarker IsArgument: false IsAssignable: false InitExp: swStr.
                blkNode addLocal: targetMarker IsArgument: false IsAssignable: false InitExp: targetPC printString.
            ].
            gen popCount: uts.
            swb: switchBlocksName. "The stack now contains the integer switch value."

            useDirectSwitch ifTrue: [
                swbSize: 1 + span.
                0 != low ifTrue: [
                    gen pushInteger: low asInt32.
                    gen generateSend: 'java_inst_sub:'.
                ].
                sel: 'switch:Blocks:'.
            ] False: [| swd <- ''. |
                swbSize: uniqueTargets size.
                swd: switchDictName.
                gen addLocalConst: swd InitExp: '0 dictionary copy'.
                gen pushLocalVarNamed: swk.
                sel: 'switch:Through:Blocks:'.
            ].
            gen addLocalConst: swb InitExp: '0 vector copySize: ', swbSize printString.
            gen pushLocalVarNamed: swb.
            gen generateImplicitSelfSend: pep prefix, sel.
            gen pop1.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'switches' -> () From: ( | {
         'Category: selfCaseStatement\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         compileUsingSelfCaseStmt: gen = ( |
             caseVar <- ''.
             elim.
             n <- 0.
             sel <- ''.
            | 
            n: uniqueTargets size.
            gen whileRetaining: n Do: [
                caseVar: gen setNewLocalVarAndPop.
                gen pushInteger: 0.
                gen generateSend: 'case'.
            ].
            elim: set copy.
            case constructCasesFor: n - 1.
            uniqueTargets do: [|:target. :targetNo|
                target = default ifTrue: [
                    pep assert: [targetNo = (n - 1)].
                    sel: sel, 'Else:'.
                ] False: [
                    0 = targetNo ifTrue: [sel: sel, 'if:Then:']
                                  False: [sel: sel, 'If:Then:'].
                    gen whileRetaining: n - targetNo Do: [
                        generateTestForKeys: (keysForTarget: target) sort  "Are they ever not sorted?"
                                      KeyNo: 0
                             EliminatedKeys: elim
                                    CaseVar: caseVar
                                      Using: gen.
                    ].
                ].
            ].
            gen generateSend: sel.
            gen pop1.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'switches' -> () From: ( | {
         'Category: blockClone\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         density = ( |
            | 
            noOfNonUniqueTargets asFloat / span).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'switches' -> () From: ( | {
         'Category: dup2 analysis\x7fComment: Used for dup2 analysis.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fastInterp: stack = ( |
            | 
            stack pop: 1.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'switches' -> () From: ( | {
         'Category: dup2 analysis\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fastInterpBranchPCsDo: blk = ( |
            | 
            nonUniqueTargetPCsDo: blk. 
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'switches' -> () From: ( | {
         'Category: blockClone\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         findMethod: methMir Containing: str = ( |
            | 
            (methMir includesKey: str) ifTrue: [^ methMir].
            methMir allLiterals do: [|:lit. lm. |
                lm: (reflect: lit).
                lm isReflecteeBlock ifTrue: [|bm|
                    bm: lm valueSlot contents.
                    (bm includesKey: str) ifTrue: [^ bm].
                ].
            ].
            error: 'should have found method').
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'switches' -> () From: ( | {
         'Category: blockClone\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         finishDirectIdx2Blk: idx2blk PC2Blk: pc2blk = ( |
            | 
            adjustedMatchTargetsDo: [|:matchVal. :tarPC|
                idx2blk at: matchVal Put: (pc2blk at: tarPC).
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'switches' -> () From: ( | {
         'Category: blockClone\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         finishIndirectMat2Idx: mat2idx Idx2Blk: idx2blk PC2Blk: pc2blk = ( |
             pc2idx.
            | 
            pc2idx: dictionary copy.
            uniqueTargets do: [|:tarPC. :idx| pc2idx at: pc Put: (pc2blk at: tarPC)].
            adjustedMatchTargetDo: [|:matchVal. :tarPC. idx <- 0. |
                idx: (pc2idx at: tarPC).
                mat2idx at: matchVal Put: idx.
                idx2blk at: idx Put: (pc2blk at: tarPC).
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'switches' -> () From: ( | {
         'Category: blockClone\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         finishSwitchStmt: methMir = ( |
             idx2blk.
             mm.
             pc2blk.
            | 
            mm: (findMethod: methMir Containing: switchBlocksName).
            idx2blk: (mm at: swichBlocksName) contents reflectee.
            pc2blk: (targetPC2Blk: mm).
            useDirectSwitch ifTrue: [
                finishDirectIdx2Blk: idx2blk PC2Blk: pc2blk.
            ] False: [
                finishIndirectMat2Idx: (mm at: switchDictName)  contents reflectee
                              Idx2Blk: idx2blk
                               PC2Blk: pc2blk.
            ].
            idx2blk at: idx2blk size - 1 Put: (pc2blk at: default).  "Default is last."
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'switches' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         finishTransferUsing: gen = ( |
            | 
            "name = 'lookupswitch' ifTrue: [gen incCounter: 'shell b']
                                    False: [gen incCounter: 'shell c']."
            "5 < noOfNonUniqueTargets ifTrue: [^ compileUsingBlockClonePrim: gen]."
            50 > uniqueTargets size   ifTrue: [^ compileUsingSelfCaseStmt: gen].
            "A many-way switch. Fall back on secondary way of compiling it (slower code)."
             warning: 'compiling ', name, ' in slow way'.
            compileUsingVectorOfClosures: gen).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'switches' -> () From: ( | {
         'Category: selfCaseStatement\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         genTestForKeys: keys KeyNo: keyNo EliminatedKeys: elim CaseVar: caseVar Using: gen = ( |
             len <- 0.
             nextKeyNo <- 0.
            | 
            len: (longestRangeIn: keys From: keyNo EliminatedKeys: elim).
            2 < len ifTrue: [   "Do range comparison."
                nextKeyNo: keyNo + len.
                generateRangeTestFrom: (keys at: keyNo)
                                   To: (keys at: nextKeyNo - 1)
                              CaseVar: caseVar
                                Using: gen.
            ] False: [
                compare: 'if_icmpeq:' Int: (keys at: keyNo) AndVar: caseVar Using: gen.
                nextKeyNo: 1 + keyNo.
            ].
            keyNo upTo: nextKeyNo Do: [|:i| elim add: (keys at: i)].
            nextKeyNo < keys size ifTrue: [
                generateTestForKeys: keys
                              KeyNo: nextKeyNo
                     EliminatedKeys: elim
                            CaseVar: caseVar
                              Using: gen.
                gen generateSend: '||'.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'switches' -> () From: ( | {
         'Category: selfCaseStatement\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         generateRangeTestFrom: minKey To: maxKey CaseVar: caseVar Using: gen = ( |
            | 
            compare: 'if_icmple:' Int: minKey AndVar: caseVar Using: gen.
            useShortCircuiting ifTrue: [
                gen pushNewBlockDo: [
                    compare: 'if_icmpge:' Int: maxKey AndVar: caseVar Using: gen. 
                    gen pop1.   "To get the stuff into the block."
                ].
            ] False: [
                compare: 'if_icmpge:' Int: maxKey AndVar: caseVar Using: gen. 
            ].
            gen generateSend: '&&'.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'switches' -> () From: ( | {
         'Category: selfCaseStatement\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         generateTestForKeys: keys KeyNo: keyNo EliminatedKeys: elim CaseVar: caseVar Using: gen = ( |
            | 
            pep assert: [keys isEmpty not].  "We could just push 'false' if we really had
                                              to allow an empty set of keys."
            useShortCircuiting ifTrue: [
                gen pushNewBlockDo: [
                    genTestForKeys: keys 
                             KeyNo: keyNo
                    EliminatedKeys: elim
                           CaseVar: caseVar
                             Using: gen.
                    gen pop1.    "Needed to get the stuff into the block."
                ].
            ] False: [
                genTestForKeys: keys 
                         KeyNo: keyNo
                EliminatedKeys: elim
                       CaseVar: caseVar
                         Using: gen.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'switches' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generateUsing: gen = ( |
            | 
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'switches' -> () From: ( | {
         'Category: branches\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generateUsingBr: gen = ( |
             bcg.
             labels.
            | 
            labels: (reduceSwitchValueUsingBr: gen).  "Now the switch value is [0,n).
                                                       Anything outside the range
                                                       invokes default code."
            labels mapBy: [|:brPC| (getLabelForJavaPC: brPC UsingBr: gen)].
            bcg: gen bytecodeGen.
            bcg branchIndexed: labels.
            bcg branchAlways: (getLabelForJavaPC: default UsingBr: gen).
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'switches' -> () From: ( | {
         'Category: selfCaseStatement\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         longestRangeIn: keys From: keyNo EliminatedKeys: elim = ( |
             i <- 0.
             k0 <- 0.
             lim <- 0.
            | 
            k0: (keys at: keyNo).
            lim: keys size.
            i: keyNo.
            [   i: 1 + i.
                k0: 1 + k0.
                [elim includes: k0] whileTrue: [k0: 1 + k0].
            ] untilTrue: [(i = lim) || [k0 != (keys at: i)]].
            i - keyNo).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'switches' -> () From: ( | {
         'Category: vectorOfClosures\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         makeVectorOfTargetsUsing: gen = ( |
             i <- 0.
             v <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
            | 
            "Should be rewritten to avoid quadratic algorithm."
            v: (vector copySize: noOfNonUniqueTargets FillingWith: 0).
            nonUniqueTargetPCsDo: [|:tpc|
                v at: i Put: (uniqueTargets keyOf: tpc).
                i: 1 + i.
            ].
            gen makeVectorCounts: v.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'switches' -> () From: ( | {
         'Category: branches\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         makeZeroBasedUsingBr: gen = ( |
            | 
            0 != low ifTrue: [  "Subtract 'low' to make it zero-based."
                gen pushInteger: low.
                gen generateSend: pep prefix, 'isub:'.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'switches' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         noOfExpsConsumedForTransfer = ( |
            | 1 + uniqueTargets size).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'switches' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jumpMultiple' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'switches' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         setUniqueTargets: ca = ( |
             done.
             i <- 0.
             j <- 0.
             un.
            | 
            ca usingBranches ifTrue: [^ self].  "Don't need it in this case!"
            "We can't preserve order exactly (we want default target last, but some
             of the other targets may be the same). To make generated code less
             confusing, we try to do as well as possible."
            un: sequence copy.
            done: set copy.
            nonUniqueTargetPCsDo: [|:t| 
                t != default ifTrue: [
                    done if: t IsPresentDo: []
                               IfAbsentPut: [t]
                                     AndDo: [un add: t].
                ].
            ].
            un add: default.
            uniqueTargets: un asVector).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'switches' -> () From: ( | {
         'Category: blockClone\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         span = ( |
            | 1 + (high - low)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'switches' -> () From: ( | {
         'Category: blockClone\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         switchBlocksName = ( |
            | 
            'sw', switchStmtNo printString, '_blks').
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'switches' -> () From: ( | {
         'Category: blockClone\x7fCategory: markerDefs\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         switchMarker = 'sw_'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'switches' -> () From: ( | {
         'Category: blockClone\x7fCategory: markerDefs\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         targetMarker = 'pc_'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'switches' -> () From: ( | {
         'Category: blockClone\x7fComment: Return dictionary that maps a targetPC (an integer) to the block literal
that contains the statements for that case.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         targetPC2block: methMir = ( |
             res.
            | 
            res: dictionary copy.
            methMir literals do: [|:lit. lm|
                lm: (reflect: lit).
                lm isReflecteeBlock ifTrue: [|bm|
                    bm: lm valueSlot contents.
                    (bm includesKey: switchMarker) && 
                    [(bm at: switchMarker) contents reflectee = switchStmtNo] ifTrue: [
                        res at: (bm at: targetMarker) contents reflectee Put: lit.
                    ].
                ].
            ].
            res).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'switches' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         targetPCsDo: blk = ( |
            | 
            pep assert: [uniqueTargets isEmpty not. "Make sure it was set"].
            uniqueTargets do: blk. 
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'switches' -> () From: ( | {
         'Category: blockClone\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         useDirectSwitch = ( |
            | (100 > span) || [density > 0.33]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'switches' -> () From: ( | {
         'Category: selfCaseStatement\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         useShortCircuiting = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         tableswitch = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'tableswitch' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute tableswitch.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'tableswitch' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         adjustPCsFor: ex = ( |
            | 
            default: (ex adjustTargetPC: default RefPC: pc).
            jumpTargets mapBy: [|:jpc|
                ex adjustTargetPC: jpc RefPC: pc
            ].
            resend.adjustPCsFor: ex.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'tableswitch' -> () From: ( | {
         'Category: blcokClone\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         adjustedMatchTargetPairsDo: blk = ( |
            | 
            jumpTargets do: [|:tar. :idx| blk value: idx With: tar].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'tableswitch' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         buildCA: ca = ( |
            | 
            ca alignPCToWord.
            default: pc + ca getSignedWord asInteger.
            ca branchPCs add: default.
            low:     ca getSignedWord asInteger.
            high:    ca getSignedWord asInteger. 
            low > high ifTrue: [ca raiseError: name, ': low>high not allowed'].
            jumpTargets: (vector copySize: 1 + (high - low)).
            jumpTargets mapBy: [|t|
                t: pc + ca getSignedWord asInteger.
                ca branchPCs add: t.
                t.
            ].
            setUniqueTargets: ca.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'tableswitch' -> () From: ( | {
         'Category: vectorOfClosures\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         compileUsingVectorOfClosures: gen = ( |
            | 
            makeVectorOfTargetsUsing: gen.
            gen pushInteger: low asInt32.
            gen generateSend: pep prefix, name, 'Targets:Low:'.
            gen pop1.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'tableswitch' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         default <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'tableswitch' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'tableswitch' -> () From: ( | {
         'Category: match boundaries\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         high <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'tableswitch' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         index.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'tableswitch' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         interp: stack = ( |
            | 
            index: stack pop.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'tableswitch' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'tableswitch' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: private'
        
         jumpTargets <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'tableswitch' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         keysForTarget: target = ( |
             keys.
            | 
            keys: sequence copy.
            jumpTargets do: [|:tar. :idx|
                tar = target ifTrue: [keys add: idx + low].
            ].
            keys).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'tableswitch' -> () From: ( | {
         'Category: match boundaries\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         low <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'tableswitch' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'tableswitch'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'tableswitch' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         noOfNonUniqueTargets = ( |
            | 
            1 + jumpTargets size).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'tableswitch' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         nonUniqueTargetPCsDo: blk = ( |
            | 
            jumpTargets do: [|:target| blk value: target].
            blk value: default.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'tableswitch' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 170.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'tableswitch' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'switches' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'tableswitch' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'tableswitch' -> () From: ( | {
         'Category: branches\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         reduceSwitchValueUsingBr: gen = ( |
            | 
            makeZeroBasedUsingBr: gen.
            jumpTargets copy).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'tableswitch' -> () From: ( | {
         'Category: blcokClone\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         switchStmtNo <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'tableswitch' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: private'
        
         uniqueTargets <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: abstract\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         top = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute top.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> () From: ( | {
         'Category: exceptions\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         adjustPCsFor: ex = ( |
            | 
            pc: (ex adjustTargetPC: pc RefPC: pc).
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> () From: ( | {
         'Category: branch support\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         allocateLabel: bytecodeGen = ( |
            | 
            hasLabel ifFalse: [isBBHeader: bytecodeGen newLabel].
            myLabel).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> () From: ( | {
         'Category: building\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         buildCA: ca = ( |
            | 
            self.   "Default: no code arguments or anything need to be handled.").
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> () From: ( | {
         'Category: building\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         buildFromCA: ca = ( |
            | 
            ((copyPC: ca lastPC) buildCA: ca)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> () From: ( | {
         'Category: building\x7fComment: Note: not all instructions canbe widened. Only those
that can should implement \'interpWide:\'.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         buildWideFromCA: ca = ( |
            | 
            (copyPC: ca lastPC) buildCA: ca Wide: true).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         copyPC: p = ( |
            | copy initPC: p).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> () From: ( | {
         'Category: dup2 analysis\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         defaultResult = ( |
            | 
            yields64Bits ifTrue: [doubleWord]
                          False: [singleWord]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> () From: ( | {
         'Category: dup2 analysis\x7fCategory: abstract stack values\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         doubleWord = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> 'doubleWord' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute top doubleWord.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> 'doubleWord' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isDoubleWord = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> 'doubleWord' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'traits' -> 'oddball' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> () From: ( | {
         'Category: printing and tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         dumpName = ( |
             i <- 0.
             n <- ''.
            | 
            n: (reflect: self) safeName.
            i: n size - 1.
            [(0 <= i) && [' ' != (n at: i)]] whileTrue: [i: i - 1].
            (n copyFrom: 1 + i)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> () From: ( | {
         'Category: dupSupport\x7fComment: Used when building expression
trees for duplicated values.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         duplicatedExp = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> 'duplicatedExp' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute top duplicatedExp.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> 'duplicatedExp' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         copyMasterExp: mExp = ( |
            | resend.copy initMasterExp: mExp).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> 'duplicatedExp' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         getDuplicate = ( |
            | masterExp getDuplicate).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> 'duplicatedExp' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         initMasterExp: mExp = ( |
            | masterExp: mExp).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> 'duplicatedExp' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isDuplicatedExp = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> 'duplicatedExp' -> () From: ( | {
         'Comment: The expression that was duplicated.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         masterExp.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> 'duplicatedExp' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> 'duplicatedExp' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         yields64Bits = ( |
            | masterExp yields64Bits).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> () From: ( | {
         'Category: printing and tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         earlyTraceOnFile: file = ( |
             s <- ''.
            | 
            s: pc printString.
            s: ('' copySize: (0 max: 4 - s size)), s.
            file write: s, ' ', name, ' '.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> () From: ( | {
         'Category: testing\x7fComment: Whether control flow continues onto next instruction
(usually true, but not for jumps and returns).\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         fallsThrough = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> () From: ( | {
         'Category: dup2 analysis\x7fComment: Used for dup2 analysis.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fastInterp: stack = ( |
            | self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> () From: ( | {
         'Category: dup2 analysis\x7fComment: Used for dup2 analysis.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         fastInterp: stack BranchPCsDo: blk = ( |
            | 
            false ifTrue: [
                'fastInterp: ' print. 
                (name copySize: 15) print.
                'pc=' print. pc print. ', sp.before=' print.
                stack size print. ' ' print.
            ].
            fastInterp: stack.
            fastInterpBranchPCsDo: blk.
            jsrHook: stack.
            false ifTrue: [
                'sp.after=' print. stack size printLine.
            ].
            fallsThrough.  "Tell caller whether control falls through.").
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> () From: ( | {
         'Category: dup2 analysis\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fastInterpBranchPCsDo: blk = ( |
            | 
            targetPCsDo: blk. 
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> () From: ( | {
         'Category: printing and tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         fullTraceOnFile: file = ( |
            | 
            earlyTraceOnFile: file.
            lateTraceOnFile: file).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> () From: ( | {
         'Category: translating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generateAndDefLabelsUsingBr: gen = ( |
            | 
            hasLabel ifTrue: [gen bytecodeGen defineLabel: myLabel].
            generateUsingBr: gen.
            fallsThrough).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> () From: ( | {
         'Category: fieldOperations\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         generateStaticFieldAccessUsing: gen ClassDepth: cd = ( |
            | 
            (isFieldInCurrentClass: gen) ifTrue: [
                gen generateSend: transSel DelegateThrough: 'this_class'.
                [this_class.   "For senders."].
            ] False: [
                pep ifTraceMutator: [
                    traceExpStackIfNewClass: fieldRef class nameAsAscii
                                      Using: gen.
                ].
                gen whileRetaining: cd Do: [
                    gen pushJavaClass: fieldRef class nameAsAscii.
                ].
                gen generateSend: transSel.
            ].
            hasResult ifFalse: [gen pop1].  "This method does both get and put."
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> () From: ( | {
         'Category: translating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generateUsing: gen = ( |
            | 
            gen generateSend: transSel.
            hasResult ifFalse: [gen pop1].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> () From: ( | {
         'Category: translating\x7fComment: Default is to use the same method for
branch code generation and non-branch
code generation. But with a chance to
override.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         generateUsingBr: gen = ( |
            | 
            generateUsing: gen.
            fallsThrough).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> () From: ( | {
         'Category: dupSupport\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         getDuplicate = ( |
            | 
            hasBeenDuplicated ifFalse: [   "First time; allocate."
                duplicate: (duplicatedExp copyMasterExp: self).
            ].
            duplicate).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> () From: ( | {
         'Category: branch support\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         getLabelForJavaPC: jpc UsingBr: gen = ( |
            | 
            (gen myCodeAttribute instructionAtPC: jpc) myLabel).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> () From: ( | {
         'Category: dupSupport\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         hasBeenDuplicated = ( |
            | 
            nil != masterExp duplicate).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> () From: ( | {
         'Category: branch support\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         hasLabel = ( |
            | 
            (false _Eq: isBBHeader) not).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> () From: ( | {
         'Category: translating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         incCounterUsing: gen = ( |
            | 
            0 <= opcode ifTrue: [
                "Skip the weirdo opcodes such as start and tryCatch."
                gen incCounterForOpcode: opcode.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         initPC: p = ( |
            | 
            duplicate:  nil.
            isBBHeader: false.
            pc: p.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> () From: ( | {
         'Category: translating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         interp: stack = ( |
            | self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> () From: ( | {
         'Category: testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isDuplicatedExp = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> () From: ( | {
         'Category: fieldOperations\x7fComment: This method only applies to put/get field operations
(but since their common supertype is all they way up
at the top, the method is found here).\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         isFieldInCurrentClass: gen = ( |
            | 
            gen myCodeAttribute myClassFile this_class_info = fieldRef class).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> () From: ( | {
         'Category: testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isGoto = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> () From: ( | {
         'Category: testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isLocalLoad = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> () From: ( | {
         'Category: testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isReturn = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> () From: ( | {
         'Category: testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isStart = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> () From: ( | {
         'Category: testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isTryAndCatch = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> () From: ( | {
         'Category: dup2 analysis\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         jsrHook: stack = ( |
            | self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> () From: ( | {
         'Category: printing and tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         lateTraceOnFile: file = ( |
            | self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> () From: ( | {
         'Category: dupSupport\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         masterExp = ( |
            | self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> () From: ( | {
         'Category: branch support\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         myLabel = ( |
            | 
            pep assert: [hasLabel].
            isBBHeader. "Yes, it is ugly to re-use this slot, but saves work
                         and space. Currently we never need them both simultaneously.").
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> () From: ( | {
         'Category: branch support\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         nextInstruction: gen = ( |
            | 
            gen myCodeAttribute instructionFollowing: pc).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> () From: ( | {
         'Category: branch support\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         nextInstructionLabel: gen = ( |
            | 
            ((nextInstruction: gen) allocateLabel: gen bytecodeGen)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'traits' -> 'clonable' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> () From: ( | {
         'Category: primitive inlining\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         primSelector = ''.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> () From: ( | {
         'Category: dup2 analysis\x7fCategory: abstract stack values\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         singleWord = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> 'singleWord' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute top singleWord.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> 'singleWord' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isDoubleWord = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> 'singleWord' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'traits' -> 'oddball' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> () From: ( | {
         'Category: dup2 analysis\x7fCategory: error reporting\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         splitError: stack = ( |
            | wordSizeError: 'splits double word' Stack: stack).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> () From: ( | {
         'Category: primitive inlining\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         stuffIntoTmps: howMany Using: gen = ( |
             names.
            | 
            names: (gen useTmpNamesUpTo: howMany).
            gen popCount: howMany TransferToLocals: names.

            "Now push them back on the stack. Be sure to iterate
             using 'howMany' since 'names' may be longer than that!"
            howMany do: [|:i| gen pushLocalVarNamed: (names at: i)].
            names).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> () From: ( | {
         'Category: control structures\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         targetPCsDo: blk = ( |
            | self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> () From: ( | {
         'Category: tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         traceExpStackIfNewClass: className Using: gen = ( |
            | 
            (gen myCodeAttribute myClassFile classNameWithSlashes != className) &&
            [(pep loader hasBeenLoaded: className) not] ifTrue: [
                gen traceExpStack.   "Pushing this class may load classes, hence can
                                      cause allocation. So dump exp stack first. Of 
                                      course, this is a bit wasteful since only the
                                      first time, will the class be loaded."
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> () From: ( | {
         'Category: dup2 analysis\x7fCategory: error reporting\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         wordSizeError: msg Stack: stack = ( |
            | 
            error: name, ': ', msg.  "Should throw exception instead. %%%").
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> () From: ( | {
         'Category: translating\x7fComment: Whether this instruction produces
a 64 bit value (long or double).
Needed to implement the \"dup2\" etc
instructions.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         yields64Bits = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'topEither' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'topExp' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         hasResult = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'topExp' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'topStmt' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         hasResult = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'topStmt' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'top' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         translateLate = ( |
             err.
            | 
            myClassFile theClass my_lock protectNoNLR: [
                "We could consider having a lock on each stub instead of using
                 the class lock, allowing multiple stubs in the same class to be
                 translated simultaneously. However, this would necessitate additional
                 locking when the result of the translations are installed and when
                 the constant pool must be extended during translation. So probably
                 not worthwhile to do this.
                 It is safe to use 'protectNoNLR:' because:
                   * non-local return cannot happen
                   * we cannot execute Java code, so no exceptions will be thrown."
                hasBeenTranslated ifFalse: [|mir|
                    "Several threads may enter the stub, since the stub remains
                     in place until a thread has finished translating the method
                     and replaced the stub."
                    hasBeenTranslated: true.
                    mir: (caTranslateIfFail: [|:e| err: e. nil]).
                    nil = err ifTrue: [
                        myClassFile addToClass: mir.
                        pep decStubCount.
                    ].
                ].
            ].
            nil != err ifTrue: [error: err.   "Should try to do better than this."].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: translating with branches\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         translateWithBranches = ( |
            | 
            pep withCodeGeneratorFor: self Do: [|:gen| 
                translateWithBranches: gen.
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: translating with branches\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         translateWithBranches: gen = ( |
             bcg.
             excAlertIdx <- -1.
             fellThrough <- bootstrap stub -> 'globals' -> 'true' -> ().
             hasSH <- bootstrap stub -> 'globals' -> 'false' -> ().
             javaStackHeights.
            | 
            bcg: gen bytecodeGen.
            addLocalsAndArgs: bcg.
            allocateLabels:   bcg.
            excAlertIdx: firstExcAlertIdx.

            "In debug mode, we always do the dup2 analysis: it computes stack heights, allowing
             verification of an important invariant (see 'matchStacks:FellThrough:Instr:BCG:').
             We also need stack heights to flush the stack around branches (if required)."
            pep debug || [pep flushStackForBranch] ||
            [pep analyzeForDup2 && [needsDup2Analysis]] ifTrue: [
                javaStackHeights: analyzeForDup2.
                hasSH: true.
            ].

            myInstructions do: [|:in. :idx|
                idx = excAlertIdx ifTrue: [excAlertIdx: (processExcInstr: in Using: gen)].
                hasSH ifTrue: [
                    matchStacks: (javaStackHeights at: idx) FellThrough: fellThrough
                          Instr: in BCG: bcg.
                ].
                pep countBytecodes ifTrue: [in incCounterUsing: gen].
                fellThrough: (in generateAndDefLabelsUsingBr: gen).
            ].
            setFinalResult: hasSH BCG: bcg.  "Don't finish with empty stack."
            defineExcRegions: bcg.
            bcg getObjectWithMethodNamed: nameOfResult).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: translating without branches\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         translateWithoutBranches = ( |
            | 
            loopCounter: 0.
            insertExceptions.
            myBlockSet: (blockSetProto copyCodeAttribute: self
                                            Instructions: myInstructions).
            myBlockSet makeControlStructures.
            myBlockSet buildExpTrees.
            myBlockSet generateCode).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: special\x7fComment: Special instruction inserted at start of
every exception handler.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         tryAndCatch = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'tryAndCatch' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute tryAndCatch.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'tryAndCatch' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         adjustPCsFor: ex = ( |
            | 
            "Don't fiddle with the pc's in 'exceptionsGrp'.
             They are updated through the exception structure
             in the 'code_attribute' object."
            resend.adjustPCsFor: ex).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'tryAndCatch' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'tryAndCatch' -> () From: ( | {
         'Comment: The entry from the exception table which
this instruction represents.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         exceptionsGrp.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'tryAndCatch' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         finishTransferUsing: gen = ( |
             n <- 0.
            | 
            n: exceptionsGrp size.
            exceptionsGrp do: [|:ex|
                gen whileRetaining: n Do: [
                    ex willCatchAnything ifTrue: [
                        gen pushInteger: 0.
                        gen generateSend: 'true'.
                    ] False: [
                        gen pushNewBlockDo: [
                            gen addArg: 'e'.
                            gen pushLocalVarNamed: 'e'.
                            gen generateSend: ex exTypeTestSelector.
                            gen pop1.
                        ].
                    ].
                ].
                n: n - 1.
            ].
            gen generateSend: transferSelector.
            gen pop1.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'tryAndCatch' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generateUsing: gen = ( |
            | self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'tryAndCatch' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         initPC: p ExGrp: e = ( |
            | 
            pc: p.
            exceptionsGrp: e.
            exceptionsGrp do: [|:ex|
                pep assert: [ex isInstalledInCode not].
                ex isInstalledInCode: true.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'tryAndCatch' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'tryAndCatch' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isTryAndCatch = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'tryAndCatch' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         lateTraceOnFile: file = ( |
            | 
            exceptionsGrp do: [|:ex|
                file writeLine: ''.
                file write: '        ', ex printString, ' '.
            ].
            resend.lateTraceOnFile: file).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'tryAndCatch' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'tryAndCatch'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'tryAndCatch' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         noOfExpsConsumedForTransfer = ( |
            | 1 + exceptionsGrp size).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'tryAndCatch' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = -2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'tryAndCatch' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'jumpMultiple' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'tryAndCatch' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'tryAndCatch' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         targetPCsDo: blk = ( |
            | 
            pep debug ifTrue: [| s <- 0. e <- 0. |
                s: exceptionsGrp first start_pc.
                e: exceptionsGrp first end_pc.
                exceptionsGrp do: [|:ex|
                    pep assert: [s = ex start_pc].
                    pep assert: [e = ex end_pc].
                ].
            ].
            blk value: exceptionsGrp first start_pc.
            exceptionsGrp do: [|:ex| blk value: ex handler_pc].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'tryAndCatch' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         transferSelector = ( |
             res <- ''.
            | 
            res: 'try'.
            exceptionsGrp size do: [res: res, 'Catch:With:'].
            pep prefix, res).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'typeTest' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         buildCA: ca = ( |
             idx <- 0.
            | 
            idx: ca getUnsignedShort.
            classRef: (ca myClassFile constantPoolAt: idx).
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'typeTest' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         generateTypeTestUsing: gen = ( |
             ttSel <- ''.
            | 
            ttSel: classRef typeTestSelector.
            pep addNegativeTypeTestSel: ttSel.
            gen generateSend: ttSel.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'typeTest' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generateUsing: gen = ( |
            | 
            gen pushNewBlockDo: [| ttSel <- ''. |
                gen addArg: 'r'.
                gen pushLocalVarNamed: 'r'.
                generateTypeTestUsing: gen.
                gen pop1.  "To get the send into the block."
            ].
            gen generateSend: pep prefix, name, ':'.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'typeTest' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         interp: stack = ( |
            | 
            objectRef: stack pop.
            stack push: self.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'typeTest' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'topExp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'unaryOp' -> () From: ( | {
         'Category: dup2 analysis\x7fComment: Used for dup2 analysis.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fastInterp: stack = ( |
            | 
            stack pop: 1.
            stack push: defaultResult.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'unaryOp' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         interp: stack = ( |
            | 
            val: stack pop.
            stack push: self.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'unaryOp' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'topExp' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'unaryOp' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         transSel = ( |
            | pep prefix, name).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         usingBranches <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: translating\x7fCategory: translating with branches\x7fCategory: exp stack\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         verifyStackHeightSelf: selfStackHeight Java: javaStackHeight Instr: in = ( |
            | 
            selfStackHeight != javaStackHeight ifTrue: [
                '' printLine.
                'In method: ' print. myMethod nonVirtualName printLine.
                'At instruction: ' print.
                in fullTraceOnFile: stdout.
                'Stack height mismatch; self stack: ' print. selfStackHeight print.
                ', java stack: ' print. javaStackHeight printLine.
                error: 'terminating translation'.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> () From: ( | {
         'Category: javaInstructions\x7fCategory: concrete\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         wide = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'wide' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile code_attribute wide.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'wide' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         buildCA: ca = ( |
            | 
            (ca instructions at: ca getUnsignedByte) buildWideFromCA: ca.
            "Intentional to use 'getUnsignedByte' instead of 'getOpcode' to associate
             the whole widened instruction with the same PC.").
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'wide' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         duplicate.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'wide' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generateUsing: gen = ( |
            | self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'wide' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isBBHeader <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'wide' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name = 'wide'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'wide' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         opcode = 196.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'wide' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'topEither' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'wide' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: Java VM defined\x7fCategory: constant pool\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         constantPoolAt: idx = ( |
            | 
            constant_pool at: idx IfAbsent: [
                error: 'bad constant pool index: ', idx printString.
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: structDefs\x7fCategory: constantStructs\x7fComment: Iterate over all concrete types of constants.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         constantStructsDo: blk = ( |
            | 
            blk value: constant_Class_info.
            blk value: constant_Double_info.
            blk value: constant_Fieldref_info.
            blk value: constant_Float_info.
            blk value: constant_Integer_info.
            blk value: constant_InterfaceMethodref_info.
            blk value: constant_Long_info.
            blk value: constant_Methodref_info.
            blk value: constant_NameAndType_info.
            blk value: constant_String_info.
            blk value: constant_Unicode_info.
            blk value: constant_Utf8_info.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: structDefs\x7fCategory: attributeStructs\x7fCategory: concreteTypes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         constantValue_attribute = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constantValue_attribute' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile constantValue_attribute.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constantValue_attribute' -> () From: ( | {
         'Category: typeTesting\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         attributeType = 'ConstantValue'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constantValue_attribute' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         attribute_name_index <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constantValue_attribute' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         constantvalue_index <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constantValue_attribute' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         fetchConstantValue = ( |
            | 
            constantNumber: constantvalue_index).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constantValue_attribute' -> () From: ( | {
         'Category: typeTesting\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         is_constantValue = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constantValue_attribute' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (pep classFile)\x7fVisibility: private'
        
         myClassFile <- bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constantValue_attribute' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topAttribute' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constantValue_attribute' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         parseNameIdx: idx AttrLen: len = ( |
            | 
            attribute_name_index: idx.
            pep assert: [2 = len].
            constantvalue_index: myClassFile parseConstantPoolIndex.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: structDefs\x7fCategory: constantStructs\x7fCategory: concreteTypes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         constant_Class_info = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Class_info' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile constant_Class_info.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Class_info' -> () From: ( | {
         'Comment: Evaluate blk on each component of the class name.
E.g., if class name is java.lang.Object, evaluate
blk on \'java\', \'lang\', and \'Object\'.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         breakupClassNameDo: blk = ( |
             i <- 0.
             lim <- 0.
             name <- ''.
            | 
            name: nameAsAscii.
            pep assert: [name = (classNameWith: pathChar)].
            lim: name size.
            [i < lim] whileTrue: [| j <- 0. |
                j: i.
                [(i < lim) && [pathChar != (name at: i)]] whileTrue: [
                    i: 1 + i.
                ].
                blk value: (name copyFrom: j UpTo: i).
                i: 1 + i.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Class_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         classNameWith: sep = ( |
            | 
            nameAsAscii copy mapBy: [|:ch|
                '/' = ch ifTrue: sep False: ch.
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Class_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         classNameWithDots = ( |
            | classNameWith: '.').
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Class_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         is_Class = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Class_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (pep classFile)\x7fVisibility: private'
        
         myClassFile <- bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: mixins\x7fComment: Use this mixing for structs which have a 
name_index.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         nameMixin = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'nameMixin' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep nameMixin.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Class_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         nameMixin* = bootstrap stub -> 'globals' -> 'pep' -> 'nameMixin' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Class_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0.)\x7fVisibility: public'
        
         name_index <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Class_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         nonVirtualNamePrefix = ( |
            | 
            (pep makeLowerCase: (pep classNameToSelectorCore: nameAsAscii)), '_').
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: structDefs\x7fCategory: constantStructs\x7fCategory: asbtractTypes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         topConstant = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topConstant' -> () From: ( |
             {} = 'Comment: Common supertype of all constant types.\x7fModuleInfo: Creator: globals pep classFile topConstant.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Class_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topConstant' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Class_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         parse = ( |
            | name_index: myClassFile parseConstantPoolIndex).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Class_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         pathChar = '/'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Class_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         printString = ( |
            | 
            '<Class ', classNameWithDots, '>').
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Class_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         tag = 7.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Class_info' -> () From: ( | {
         'Category: type testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         typeTestSelector = ( |
            | 
            pep classNameToTypeTestSelector: nameAsAscii).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: structDefs\x7fCategory: constantStructs\x7fCategory: concreteTypes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         constant_Double_info = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Double_info' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile constant_Double_info.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Double_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         byteSize = 8.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Double_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (byteVector)\x7fVisibility: public'
        
         bytes <- bootstrap stub -> 'globals' -> 'byteVector' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Double_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         is_Double = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Double_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (pep classFile)\x7fVisibility: private'
        
         myClassFile <- bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Double_info' -> () From: ( | {
         'Comment: See VM Spec! Long and Double constants
take up two entries in the constant pool
vector.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         numberOfConstantPoolSlots = 2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: structDefs\x7fCategory: constantStructs\x7fCategory: asbtractTypes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         constant_FloatOrDouble = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_FloatOrDouble' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile constant_FloatOrDouble.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Double_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_FloatOrDouble' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Double_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         printStringKey = 'Double'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Double_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         tag = 6.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Double_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         translateConstantValue = ( |
            | 
            bytes javaDoubleAt: 0).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: structDefs\x7fCategory: constantStructs\x7fCategory: concreteTypes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         constant_Fieldref_info = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Fieldref_info' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile constant_Fieldref_info.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Fieldref_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0.)\x7fVisibility: public'
        
         class_index <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Fieldref_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         is_Fieldref = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Fieldref_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (pep classFile)\x7fVisibility: private'
        
         myClassFile <- bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Fieldref_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         name_and_type_index <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: structDefs\x7fCategory: constantStructs\x7fCategory: asbtractTypes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         constant_Ref = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Ref' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile constant_Ref.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Fieldref_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Ref' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Fieldref_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         printStringKey = 'Field'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Fieldref_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         spaceForFields = ' '.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Fieldref_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         tag = 9.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: structDefs\x7fCategory: constantStructs\x7fCategory: asbtractTypes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         constant_Numeric = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Numeric' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile constant_Numeric.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_FloatOrDouble' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Numeric' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: structDefs\x7fCategory: constantStructs\x7fCategory: concreteTypes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         constant_Float_info = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Float_info' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile constant_Float_info.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Float_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         byteSize = 4.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Float_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (byteVector)\x7fVisibility: public'
        
         bytes <- bootstrap stub -> 'globals' -> 'byteVector' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Float_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         is_Float = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Float_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (pep classFile)\x7fVisibility: private'
        
         myClassFile <- bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Float_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_FloatOrDouble' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Float_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         printStringKey = 'Float'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Float_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         tag = 4.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Float_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         translateConstantValue = ( |
            | 
            bytes javaFloatAt: 0).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: structDefs\x7fCategory: constantStructs\x7fCategory: asbtractTypes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         constant_IntegerOrLong = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_IntegerOrLong' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile constant_IntegerOrLong.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_IntegerOrLong' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Numeric' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: structDefs\x7fCategory: constantStructs\x7fCategory: concreteTypes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         constant_Integer_info = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Integer_info' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile constant_Integer_info.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Integer_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         byteSize = 4.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Integer_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (byteVector)\x7fVisibility: public'
        
         bytes <- bootstrap stub -> 'globals' -> 'byteVector' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Integer_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         is_Integer = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Integer_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (pep classFile)\x7fVisibility: private'
        
         myClassFile <- bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Integer_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_IntegerOrLong' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Integer_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         printStringKey = 'Integer'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Integer_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         tag = 3.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Integer_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         translateConstantValue = ( |
            | 
            bytes javaIntAt: 0).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: structDefs\x7fCategory: constantStructs\x7fCategory: concreteTypes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         constant_InterfaceMethodref_info = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_InterfaceMethodref_info' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile constant_InterfaceMethodref_info.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_InterfaceMethodref_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0.)\x7fVisibility: public'
        
         class_index <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_InterfaceMethodref_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         is_InterfaceMethodref = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_InterfaceMethodref_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (pep classFile)\x7fVisibility: private'
        
         myClassFile <- bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_InterfaceMethodref_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         name_and_type_index <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_InterfaceMethodref_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Ref' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_InterfaceMethodref_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         printStringKey = 'InterfaceMethod'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_InterfaceMethodref_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         tag = 11.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: structDefs\x7fCategory: constantStructs\x7fCategory: concreteTypes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         constant_Long_info = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Long_info' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile constant_Long_info.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Long_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         byteSize = 8.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Long_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (byteVector)\x7fVisibility: public'
        
         bytes <- bootstrap stub -> 'globals' -> 'byteVector' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Long_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         is_Long = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Long_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (pep classFile)\x7fVisibility: private'
        
         myClassFile <- bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Long_info' -> () From: ( | {
         'Comment: See VM Spec! Long and Double constants
take up two entries in the constant pool
vector.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         numberOfConstantPoolSlots = 2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Long_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_IntegerOrLong' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Long_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         printStringKey = 'Long'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Long_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         tag = 5.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Long_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         translateConstantValue = ( |
            | 
            bytes javaLongAt: 0).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: structDefs\x7fCategory: constantStructs\x7fCategory: concreteTypes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         constant_Methodref_info = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Methodref_info' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile constant_Methodref_info.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Methodref_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0.)\x7fVisibility: public'
        
         class_index <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Methodref_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         is_Methodref = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Methodref_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (pep classFile)\x7fVisibility: private'
        
         myClassFile <- bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Methodref_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         name_and_type_index <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Methodref_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Ref' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Methodref_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         printStringKey = 'Method'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Methodref_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         tag = 10.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: structDefs\x7fCategory: constantStructs\x7fCategory: concreteTypes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         constant_NameAndType_info = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_NameAndType_info' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile constant_NameAndType_info.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_NameAndType_info' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         initClassFile: cf = ( |
            | 
            splitSignature0: nil.
            mangledName0:    nil.
            resend.initClassFile: cf).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_NameAndType_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         is_NameAndType = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_NameAndType_info' -> () From: ( | {
         'Category: caching\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         mangledName0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_NameAndType_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (pep classFile)\x7fVisibility: private'
        
         myClassFile <- bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_NameAndType_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         nameMixin* = bootstrap stub -> 'globals' -> 'pep' -> 'nameMixin' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_NameAndType_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         name_index <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_NameAndType_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topConstant' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_NameAndType_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         parse = ( |
            | 
            name_index:      myClassFile parseConstantPoolIndex.
            signature_index: myClassFile parseConstantPoolIndex).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_NameAndType_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         signatureMixin* = bootstrap stub -> 'globals' -> 'pep' -> 'signatureMixin' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_NameAndType_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0.)\x7fVisibility: public'
        
         signature_index <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_NameAndType_info' -> () From: ( | {
         'Category: caching\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: private'
        
         splitSignature0 <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_NameAndType_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         tag = 12.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Numeric' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         innerPrintString = ( |
            | translateConstantValue printString).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Numeric' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topConstant' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Numeric' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         parse = ( |
            | 
            bytes: (myClassFile parseNBytes: byteSize)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Ref' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         class = ( |
            | 
            constantNumber: class_index).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Ref' -> () From: ( | {
         'Category: translating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         effectiveClass = ( |
            | class).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Ref' -> () From: ( | {
         'Category: printing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         innerPrintString = ( |
            | 
            class classNameWithDots, '.',
            name_and_type nameAsAscii, spaceForFields,
            name_and_type signatureAsAscii).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Ref' -> () From: ( | {
         'Category: translating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         mangledName = ( |
            | name_and_type mangledName).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Ref' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         name_and_type = ( |
            | 
            constantNumber: name_and_type_index).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Ref' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topConstant' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Ref' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         parse = ( |
            | 
            class_index:         myClassFile parseConstantPoolIndex.
            name_and_type_index: myClassFile parseConstantPoolIndex).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Ref' -> () From: ( | {
         'Category: printing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         spaceForFields = ''.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: structDefs\x7fCategory: constantStructs\x7fCategory: concreteTypes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         constant_String_info = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_String_info' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile constant_String_info.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_String_info' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         initClassFile: cf = ( |
            | 
            translatedConstantValue: nil.
            resend.initClassFile: cf).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_String_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         innerPrintString = ( |
            | 
            '"', string asciiValue, '"').
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_String_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         is_String = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_String_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (pep classFile)\x7fVisibility: private'
        
         myClassFile <- bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_String_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topConstant' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_String_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         parse = ( |
            | string_index: myClassFile parseConstantPoolIndex).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_String_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         printStringKey = 'String'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_String_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         string = ( |
            | constantNumber: string_index).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_String_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         string_index <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_String_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         tag = 8.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_String_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         translateConstantValue = ( |
            | 
            "Should only build one java string object for each constant. So cache the
             resulting object and reuse it if requested several times. Perhaps the
             caching should be done in the 'string' object, not here?
             (The 'string' object is a 'constant_Unicode_info' or a 'constant_Utf8_info').
             Caching there will be more aggressive, as several 'constant_String_info' may
             refer to the same 'string' object. But what does the Java VM do???"
            nil = translatedConstantValue ifTrue: [
                translatedConstantValue: (pep javaRoot o_javaStrFromUnicodes: string unicodes).
                pep ifTraceMutator: [pep mutatorTracer constantPool: translatedConstantValue].
            ].
            translatedConstantValue).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_String_info' -> () From: ( | {
         'Comment: When the constant is translated, the
resulting Java string object will be 
stored here.\"\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         translatedConstantValue.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: structDefs\x7fCategory: constantStructs\x7fCategory: concreteTypes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         constant_Unicode_info = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Unicode_info' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile constant_Unicode_info.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Unicode_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         asciiValue0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Unicode_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         is_Unicode = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Unicode_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (pep classFile)\x7fVisibility: private'
        
         myClassFile <- bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Unicode_info' -> () From: ( | {
         'Comment: Name of this constant in the class.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         myConstPath.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: structDefs\x7fCategory: constantStructs\x7fCategory: asbtractTypes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         constant_Utf8OrUnicode = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Utf8OrUnicode' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile constant_Utf8OrUnicode.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Unicode_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Utf8OrUnicode' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Unicode_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         parse = ( |
             len <- 0.
             uc.
            | 
            len: myClassFile getU2.
            uc: (pep javaRoot java_inst_newarray_char: len).
            len do: [|:i|
                uc java_inst_castore: i With: myClassFile getU2.
            ].
            unicodes: uc.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Unicode_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         tag = 2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Unicode_info' -> () From: ( | {
         'Comment: The unicodes (16 bit unsigned integers) of the string constant.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         unicodes.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Utf8OrUnicode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         asciiValue = ( |
            | 
            nil = asciiValue0 ifTrue: [setAsciiValue].
            asciiValue0).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Utf8OrUnicode' -> () From: ( | {
         'Category: lazy translation\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         createLazyBuilder = ( |
             methMir.
             state.
            | 
            myConstPath: (myClassFile pathForConstant: self).
            "May seem simpler to give 'lazyBuildMethod' a ref to 'self'. 
             But don't do it: will keep the classFile object live!
             Better to extract exactly the info needed."
            state: lazyBuildLocalState copy.
            pep assert: [state hasBuiltString not].
            state unicodes:  unicodes.
            state javaClass: myClassFile theClass.
            state constName: myConstPath last.
            methMir: ((reflect: lazyBuildMethodHolder) at: 'lazyBuildMethod') contents.
            methMir: (methMir copyAt: 'state'  PutContents: (reflect: state)).
            myClassFile installConstantName: myConstPath last Value: methMir ExistingSlot: false.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Utf8OrUnicode' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         initClassFile: cf = ( |
            | 
            resend.initClassFile: cf.
            myConstPath: nil.
            asciiValue0: nil).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Utf8OrUnicode' -> () From: ( | {
         'Category: lazy translation\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         lazyBuildLocalState = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Utf8OrUnicode' -> 'lazyBuildLocalState' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile constant_Utf8OrUnicode lazyBuildLocalState.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Utf8OrUnicode' -> 'lazyBuildLocalState' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         constName.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Utf8OrUnicode' -> 'lazyBuildLocalState' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         hasBuiltString <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Utf8OrUnicode' -> 'lazyBuildLocalState' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         javaClass.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Utf8OrUnicode' -> 'lazyBuildLocalState' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         javaString.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Utf8OrUnicode' -> 'lazyBuildLocalState' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'traits' -> 'clonable' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Utf8OrUnicode' -> 'lazyBuildLocalState' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         unicodes.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Utf8OrUnicode' -> () From: ( | {
         'Category: lazy translation\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         lazyBuildMethodHolder = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Utf8OrUnicode' -> 'lazyBuildMethodHolder' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile constant_Utf8OrUnicode lazyBuildMethodHolder.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Utf8OrUnicode' -> 'lazyBuildMethodHolder' -> () From: ( | {
         'Comment: Build the string object, install it in the class\' constant
object, and return it.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         lazyBuildMethod = ( |
             state = bootstrap stub -> 'globals' -> 'nil' -> ().
            | 
            state javaClass my_lock protect: [  "Building string may throw excpetion?
                                                 Anyway, this code is not time critical."
                state hasBuiltString ifFalse: [ "Only build once."
                    state javaString: (0 pep javaRoot o_javaStrFromUnicodes: state unicodes).
                    0 pep classFile installConstantInClass: state javaClass
                                                      Name: state constName
                                                     Value: (0 reflect: state javaString)
                                              ExistingSlot: 0 true.
                    state hasBuiltString: 0 true.
                ].
            ].
            state javaString).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Utf8OrUnicode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topConstant' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Utf8OrUnicode' -> () From: ( | {
         'Category: lazy translation\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         pathForConstant = ( |
            | 
            nil = myConstPath ifTrue: [createLazyBuilder].
            myConstPath).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Utf8OrUnicode' -> () From: ( | {
         'Comment: Need to do better job at handling non-printable
ascii chars than this method does.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         setAsciiValue = ( |
             asciiLimit <- 0.
             len <- 0.
             n <- 0.
             nonAscii <- bootstrap stub -> 'globals' -> 'false' -> ().
             res.
            | 
            "Optimized for common case when all unicodes are 8 bit."
            len: unicodes java_inst_arraylength.
            res: (mutableString copySize: len FillingWith: '0').
            asciiLimit: '' ascii size.
            len do: [|:i. c <- 0. |
                c: (unicodes java_inst_caload: i).
                c < asciiLimit ifTrue: [
                    res at: n PutByte: c.
                    n: 1 + n.

                ] False: [
                    nonAscii ifFalse: [   "First time: extend 'res'."
                        | add <- 0. j <- 0. |
                        nonAscii: true.
                        n upTo: len Do: [|:i|
                            asciiLimit <= (unicodes at: i) ifTrue: [add: 5 + add].
                        ].
                        res: (res copySize: res size + add).  "Adjust size."
                    ].
                    res at:     n Put: '\\'.
                    res at: 1 + n Put: 'u'.   "Note: already 0-filled, see above."
                    n: 6 + n.
                    j: n. 
                    c hexPrintString reverseDo: [|:a| 
                        res at: j Put: a.
                        j: j - 1.
                    ].
                ].
            ].
            asciiValue0: res).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Utf8OrUnicode' -> () From: ( | {
         'Comment: Most constants don\'t involve any objects
and so need no tracing. (Strings do, however).\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         traceConstant = ( |
            | 
            pep assert: [pep traceMutator].
            pep mutatorTracer constantPool: unicodes).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: structDefs\x7fCategory: constantStructs\x7fCategory: concreteTypes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         constant_Utf8_info = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Utf8_info' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile constant_Utf8_info.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Utf8_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         asciiValue0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Utf8_info' -> () From: ( | {
         'Comment: Read a single Unicode from byte stream.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         decodeUtf8Using: prodBlk = ( |
             c1 <- 0.
             c2 <- 0.
             c3 <- 0.
            | 
            c1: prodBlk value.
            (0 != c1) && (c1 < 128) ifTrue: [^ c1].   "1-byte format."
            c2: prodBlk value.
            pep assert: [2r10000000 = (2r11000000 && c2)].
            2r11000000 = (2r11100000 && c1) ifTrue: [ "2-byte format."
                ^ ((2r00011111 && c1) << 6) + (2r00111111 && c2).
            ].
            c3: prodBlk value.
            pep assert: [2r11100000 = (2r11110000 && c1)].
            pep assert: [2r10000000 = (2r11000000 && c3)].
            2r11100000 = (2r11110000 && c1) ifTrue: [ "3-byte format."
                ^ ((2r00001111 && c1) << 12) + 
                  ((2r00111111 && c2) << 6) +
                  (2r00111111 && c3).
            ].
            myClassFile abortParse: 'class file: bad unicode').
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Utf8_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         isAll1ByteFormat: raw = ( |
            | 
            raw do: [|:c| (127 < c) || [0 = c] ifTrue: [^ false]].
            true).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Utf8_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         is_Utf8 = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Utf8_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (pep classFile)\x7fVisibility: private'
        
         myClassFile <- bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Utf8_info' -> () From: ( | {
         'Comment: Name of this constant in the class.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         myConstPath.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Utf8_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Utf8OrUnicode' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Utf8_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         parse = ( |
             raw.
             uc.
            | 
            raw: (myClassFile parseNBytes: myClassFile parseU2).
            (isAll1ByteFormat: raw) ifTrue: [    "Fast common case: all 1-byte format."
                uc: raw.
            ] False: [
                | uc. rIdx <- 0. bIdx <- 0. lim <- 0. |
                lim: raw size.
                uc: (vector copySize: lim).   "Will be shortened when done."
                [rIdx < lim] whileTrue: [
                    uc at: bIdx 
                      Put: (decodeUtf8Using: [| c <- 0 | 
                                              c: (raw at: rIdx IfAbsent: [
                                                     myClassFile abortParse: 'unicode overrun'.
                                                  ]). 
                                              rIdx: 1 + rIdx.
                                              c]).
                    bIdx: 1 + bIdx.
                ].
                uc: (uc copySize: bIdx).
            ].
            unicodes: (pep javaRoot o_javaArrayOfCharSize: uc size).
            uc do: [|:c. :i| unicodes java_inst_castore: i With: c].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Utf8_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         tag = 1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'constant_Utf8_info' -> () From: ( | {
         'Comment: The unicodes (16 bit unsigned integers) of the string constant.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         unicodes.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: Java VM defined\x7fCategory: constant pool\x7fComment: Note: we do not store \'constant_pool_count\'. Take size of 
\'constant_pool\' instead, or (better) use an iterator.\"\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: public'
        
         constant_pool <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: translating\x7fCategory: constants\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         constantsSlotName = 'my_consts'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: copying and initialization\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         copyBytes: b = ( |
            | copyBytes: b IfFail: raiseError).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: copying and initialization\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         copyBytes: b IfFail: errBlk = ( |
            | 
            resend.copy initBytes: b IfFail: errBlk).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: structDefs\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         exception_info = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'exception_info' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile exception_info.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'exception_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         adjustTargetPC: tpc RefPC: rpc = ( |
            | 
            tpc < start_pc ifTrue: [^ tpc].
            tpc > start_pc ifTrue: [^ 1 + tpc].
            "This next case is for jumps etc. to the start
             of the exception handler. The pc should be updated
             iff the referring instruction's pc is guarded by the
             exception: the goto should have target inside the 
             exception guard range, if the referring pc is inside, 
             and otherwise should have target outside the exception
             guard range."
            (guards: rpc)  ifTrue: [1 + tpc] False: [tpc]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'exception_info' -> () From: ( | {
         'Category: translating with branches\x7fCategory: labels\x7fComment: Public for read access only. 
This label defines the point in the code where the
exception handler prologue has just finished. The
stack is clean and the exception object is in a
local variabl.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         afterPrologueLabel.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'exception_info' -> () From: ( | {
         'Category: translating with branches\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         allocateLabelsCA: ca BCG: bcg = ( |
            | 
            afterPrologueLabel: bcg newLabel.
            ca allocateLabelForPC:   start_pc BCG: bcg.
            ca allocateLabelForPC:     end_pc BCG: bcg.
            ca allocateLabelForPC: handler_pc BCG: bcg.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'exception_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         catchTypePrintString = ( |
            | 
            willCatchAnything ifTrue: 'any'
                               False: [catch_type_info printString]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'exception_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         catch_type <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'exception_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         catch_type_info = ( |
            | myClassFile constantPoolAt: catch_type).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'exception_info' -> () From: ( | {
         'Category: coverage range\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         disjointRangeFrom: exc = ( |
            | 
            (start_pc >= exc end_pc) || [end_pc <= exc start_pc]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'exception_info' -> () From: ( | {
         'Category: dumping\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         dump: v Width: w OnFile: file = ( |
             str <- ''.
            | 
            str: v printString.
            str size < w ifTrue: [
                file write: ('' copySize: w - str size).
            ].
            file write: str.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'exception_info' -> () From: ( | {
         'Category: dumping\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         dumpOnFile: file = ( |
            | 
            dump: start_pc   Width: 6 OnFile: file.
            dump: end_pc     Width: 6 OnFile: file.
            dump: handler_pc Width: 6 OnFile: file.
            file writeLine: '   ', catchTypePrintString.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'exception_info' -> () From: ( | {
         'Category: translating with branches\x7fCategory: labels\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         endLabel: ca = ( |
            | (ca instructionAtPC: end_pc) myLabel).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'exception_info' -> () From: ( | {
         'Category: PCs\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         end_pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'exception_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         exTypeTestSelector = ( |
             tt <- ''.
            | 
            tt: catch_type_info typeTestSelector.
            pep addNegativeTypeTestSel: tt.
            tt).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'exception_info' -> () From: ( | {
         'Category: translating with branches\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         excObjectName = 'exc_obj'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'exception_info' -> () From: ( | {
         'Comment: Name of block that will clear exception handler(s)
installed for this exception range.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         exceptionCleanupName = ( |
            | 'cleanup_', start_pc printString).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'exception_info' -> () From: ( | {
         'Category: translating with branches\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generateExcHandlerUsingBr: gen = ( |
             bcg.
            | 
            bcg: gen bytecodeGen.
            bcg forceStackHeight: 3.  "This stack height is established by nlr trap."

            "Handler prologue. Store exception object in local
             (after popping the two extra values provided by the nlr trap)."
            gen popCount: 2.
            gen setLocalVarNamed: excObjectName.
            gen pop1.  "Pop the assignment result (self)."
            bcg defineLabel: afterPrologueLabel.

            willCatchAnything ifFalse: [| nextExc. typeConfirmedLabel |
                "Make sure that the exception is one that 'exc' can catch."
                typeConfirmedLabel: bcg newLabel.
                gen pushLocalVarNamed: excObjectName.
                gen generateSend: exTypeTestSelector.
                bcg branchIfTrue: typeConfirmedLabel.

                "Can't catch this one: get someone else to."
                nextExc: (gen myCodeAttribute getSurroundingExceptionOf: self).
                nil = nextExc ifTrue: [
                    "No more exceptions here, so retrow."
                    gen pushLocalVarNamed: excObjectName.
                    gen pushInteger: 0.  "Push the two extra values required by nlr."
                    gen pushInteger: 0.
                    bcg lowlevelNLR.
                ] False: [
                    bcg branchAlways: nextExc afterPrologueLabel.
                ].
                bcg defineLabel: typeConfirmedLabel.
            ].
            gen pushLocalVarNamed: excObjectName.   "The handling code expects the
                                                     exception obj. on the stack.").
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'exception_info' -> () From: ( | {
         'Category: coverage range\x7fComment: Return true iff pc is in range of 
instructions guarded by this exception
table entry.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         guards: pc = ( |
            | 
            (start_pc <= pc) && [pc < end_pc]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'exception_info' -> () From: ( | {
         'Category: translating with branches\x7fCategory: labels\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         handlerLabel: ca = ( |
            | (ca instructionAtPC: handler_pc) myLabel).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'exception_info' -> () From: ( | {
         'Category: PCs\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         handler_pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'exception_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         incPCsAbove: pc = ( |
            | 
            pc < start_pc   ifTrue: [start_pc:   1 + start_pc  ].
            pc < end_pc     ifTrue: [end_pc:     1 + end_pc    ].
            pc < handler_pc ifTrue: [handler_pc: 1 + handler_pc].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'exception_info' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         initClassFile: cf = ( |
            | 
            isInstalledInCode: false.
            resend.initClassFile: cf).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'exception_info' -> () From: ( | {
         'Comment: Set true when an exception is installed in the
code use a \'tryAndCatch\' fake bytecode.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         isInstalledInCode <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'exception_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (pep classFile)\x7fVisibility: private'
        
         myClassFile <- bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: structDefs\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         topStruct = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topStruct' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile topStruct.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'exception_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topStruct' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'exception_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         parse = ( |
            | 
            start_pc:   myClassFile parseU2.
            end_pc:     myClassFile parseU2.
            handler_pc: myClassFile parseU2.
            catch_type: myClassFile parseConstantPoolIndex.
            start_pc > end_pc ifTrue: [
                myClassFile abortParse: 'exception has start_pc > end_pc: ', printString.
            ].
            (guards: handler_pc) ifTrue: [
                "myClassFile abortParse: 'exception guards its own handler: ', printString."
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'exception_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         printString = ( |
            | 
            'exception(pc in [', start_pc printString,
            ',', end_pc printString,
            '[,target=', handler_pc printString,
            ',', catchTypePrintString, ')').
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'exception_info' -> () From: ( | {
         'Category: coverage range\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         rangeIsSupersetOf: exc = ( |
            | 
            (start_pc <= exc start_pc) && [end_pc >= exc end_pc]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'exception_info' -> () From: ( | {
         'Category: coverage range\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         sameRangeAs: exc = ( |
            | 
            (start_pc = exc start_pc) && [end_pc = exc end_pc]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'exception_info' -> () From: ( | {
         'Category: translating with branches\x7fCategory: labels\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         startLabel: ca = ( |
            | 
            (ca instructionAtPC: start_pc) myLabel).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'exception_info' -> () From: ( | {
         'Category: PCs\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0.)\x7fVisibility: public'
        
         start_pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'exception_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         willCatchAnything = ( |
            | nil = catch_type_info).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: structDefs\x7fCategory: attributeStructs\x7fCategory: concreteTypes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         exceptions_attribute = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'exceptions_attribute' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile exceptions_attribute.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'exceptions_attribute' -> () From: ( | {
         'Category: typeTesting\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         attributeType = 'Exceptions'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'exceptions_attribute' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         attribute_name_index <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'exceptions_attribute' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         exceptionIndicesDo: blk = ( |
            | 
            exception_index_table do: [|:eIdx|
                "Seems that we have to ignore 0 entries (VM Spec)."
                0 != eIdx ifTrue: [blk value: eIdx].
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'exceptions_attribute' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: public'
        
         exception_index_table <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'exceptions_attribute' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isEmpty = ( |
            | 
            exceptionIndicesDo: [^ false].
            true).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'exceptions_attribute' -> () From: ( | {
         'Category: typeTesting\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         is_exceptions = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'exceptions_attribute' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (pep classFile)\x7fVisibility: private'
        
         myClassFile <- bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'exceptions_attribute' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topAttribute' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'exceptions_attribute' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         parseNameIdx: idx AttrLen: len = ( |
            | 
            exception_index_table: myClassFile parseExceptionTable.
            pep assert: [len = ((2 * exception_index_table size) + 2)].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: translating\x7fCategory: build primitives\x7fComment: Only call during translation\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         fctAddToProto: mirSlots = ( |
            | protoInstanceMir: (protoInstanceMir copyAddSlots: mirSlots)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: structDefs\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         field_info = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'field_info' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile field_info.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'field_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         access_flags <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'field_info' -> () From: ( | {
         'Category: parents and mixins\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         access_flagsOps* = bootstrap stub -> 'globals' -> 'pep' -> 'access_flagsMixin' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'field_info' -> () From: ( | {
         'Category: translating\x7fCategory: tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         addTracingMethods: mir0 TracedName: tname = ( |
             mir.
             name <- ''.
             src <- ''.
            | 
            pep assert: [-1 != fieldNumberForTrace].
            name: mangledFieldName.
            src: '(| ',  name, ' = ( ', tname, ' ).\n',
                         name, ': r = (', traceSelector, fieldNumberForTrace printString, 
                                        ' StoredObj: r.\n', 
                                        tname, ': r ).\n|)'.
            mir: (mir0 copyAddSlots: (reflect: src eval)).
            mir: (pep setCategoryTo: 'field tracing' ForSlot: name In: mir).
            mir: (pep setCategoryTo: 'field tracing' ForSlot: name, ':' In: mir).
            mir).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'field_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: public'
        
         attributes <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'field_info' -> () From: ( | {
         'Category: parents and mixins\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         attributesMixin* = bootstrap stub -> 'globals' -> 'pep' -> 'attributesMixin' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'field_info' -> () From: ( | {
         'Category: typing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         checkMatchingType: constant IfFail: errBlk = ( |
             sig <- ''.
            | 
            sig: signatureAsAscii.
            'J'  = sig ifTrue: [
                constant is_Long ifFalse: [error: 'constant should be Long'].
            ] False: [
            'F' = sig ifTrue: [
                constant is_Float ifFalse: [error: 'constant should be Float'].
            ] False: [
            'D' = sig ifTrue: [
                constant is_Double ifFalse: [error: 'constant should be Double'].
            ] False: [
            ('I' = sig) || ['S' = sig] || ['C' = sig] || 
            ['B' = sig] || ['Z' = sig]  ifTrue: [
                constant is_Integer ifFalse: [error: 'constant should be Integer'].
            ]]]].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'field_info' -> () From: ( | {
         'Category: translating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         defaultInitialValue = ( |
             sig <- ''.
            | 
            "For meaning of these letters, see section 3.2 in VM Spec."
            sig: signatureAsAscii.
            'B' = sig ifTrue: [^ pep javaRoot java_zero_byte   ].
            'C' = sig ifTrue: [^ pep javaRoot java_zero_char   ].
            'D' = sig ifTrue: [^ pep javaRoot java_zero_double ].
            'F' = sig ifTrue: [^ pep javaRoot java_zero_float  ].
            'I' = sig ifTrue: [^ pep javaRoot java_zero_int    ].
            'J' = sig ifTrue: [^ pep javaRoot java_zero_long   ].
            'S' = sig ifTrue: [^ pep javaRoot java_zero_short  ].
            'Z' = sig ifTrue: [^ pep javaRoot java_zero_boolean].
            pep assert: [(sig first = 'L') || [sig first = '[']].
            pep javaRoot java_null).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'field_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         dumpPrivate: priv OnFile: file = ( |
            | 
            priv || [hasPrivateFlag not] ifTrue: [
                file write: '    '.
                dumpFlagsOnFile: file.
                file writeLine: signaturePrintString.
                "file writeLine: '        (translated name: ', nonVirtualName, ')'."
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'field_info' -> () From: ( | {
         'Category: translating\x7fCategory: tracing\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (-1)\x7fVisibility: public'
        
         fieldNumberForTrace <- -1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'field_info' -> () From: ( | {
         'Category: typing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fieldTypeError: expected = ( |
            | 
            'field ', fieldName, ' contents should be ', expected).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'field_info' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         initClassFile: cf = ( |
            | 
            resend.initClassFile: cf.
            mangledName0: nil.  "Clear cache."
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'field_info' -> () From: ( | {
         'Category: typing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isReference = ( |
             sig <- ''.
            | 
            sig: signatureAsAscii first.
            ('L' = sig) || ['[' = sig]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'field_info' -> () From: ( | {
         'Category: caching\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         mangledName0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'field_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (pep classFile)\x7fVisibility: private'
        
         myClassFile <- bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'field_info' -> () From: ( | {
         'Category: parents and mixins\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         nameMixing* = bootstrap stub -> 'globals' -> 'pep' -> 'nameMixin' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'field_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         name_index <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'field_info' -> () From: ( | {
         'Category: typing\x7fComment: How many words of storage this field occupies in memory.
Long and double require 2 words, all other types of fields
require 1 word.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         noOfWords = ( |
            | 
            signatureYields64Bits ifTrue: 2 False: 1).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'field_info' -> () From: ( | {
         'Category: parents and mixins\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topStruct' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'field_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         parse = ( |
            | 
            access_flags:    myClassFile parseU2.
            checkFlagsIn:    acc_private || acc_public || acc_protected ||
                             acc_static  || acc_final  || acc_volatile  ||
                             acc_transient.
            name_index:      myClassFile parseConstantPoolIndex.
            signature_index: myClassFile parseConstantPoolIndex.
            attributes:      myClassFile parseAttributes).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'field_info' -> () From: ( | {
         'Category: translating\x7fCategory: tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         shouldTrace = ( |
            | 
            pep ifTraceMutator: [^ isReference].
            false).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'field_info' -> () From: ( | {
         'Category: parents and mixins\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         signatureMixin* = bootstrap stub -> 'globals' -> 'pep' -> 'signatureMixin' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'field_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         signature_index <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'field_info' -> () From: ( | {
         'Category: translating\x7fCategory: tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         traceSelector = ( |
            | 
            hasStaticFlag ifTrue: 'trace_putstatic: '
                           False: 'trace_putfield: ').
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'field_info' -> () From: ( | {
         'Category: translating\x7fCategory: tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         tracingSuffix = '0_'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'field_info' -> () From: ( | {
         'Category: translating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         translateIfFail: errBlk = ( |
             constAttrib.
             mir.
             slotContents.
             tname <- ''.
             trace <- bootstrap stub -> 'globals' -> 'false' -> ().
            | 
            constAttrib: (getUniqueAttributeMatching: [|:attrib| attrib is_constantValue]
                                              IfNone: nil).
            nil = constAttrib ifTrue: [   "Not a constant field."
                slotContents: defaultInitialValue.
            ] False: [|cv|
                cv: constAttrib fetchConstantValue.
                checkMatchingType: cv IfFail: [|:e| ^ errBlk value: e].
                "Must be numerical constant."
                slotContents: cv translateConstantValue.
            ].
            tname: mangledFieldName.  "Must mangle to handle 'hidden fields', field in
                                       subclass with same name as field in superclass."
            trace: shouldTrace.
            trace ifTrue: [tname: tname, tracingSuffix]. 
            mir: (reflect: ()).
            mir: (mir copyAt: tname PutContents: (reflect: slotContents)).
            true || [nil = constAttrib] ifTrue: [  "Assignable slot."
                "It seems that we cannot (easily) make slots constant. Even 'final'
                 fields may be assigned in the initializer methods."
                mir: (mir copyAt: tname, ':' PutContents: mirrors assignment).
            ].
            hasStaticFlag ifTrue: [
                mir: (pep setCategoryTo: 'static fields' ForSlot: tname In: mir).
            ].
            trace ifTrue: [mir: (addTracingMethods: mir TracedName: tname)].
            mir).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: Java VM defined\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: public'
        
         fields <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: translating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         finishTranslationIfFail: errBlk = ( |
            | 
            hasSuperclass ifTrue: [     "Copy-down instance vars."
                fctAddToProto: (reflect: theClassMir reflectee super_class proto_instance).
            ].
            addMyClassFileLink.
            "After we set the 'this_class' link or create the 'array_builder' below, we have to
             be extremely careful when using functional mirror protocol on the class object!"
            setClassSlot: 'proto_instance' To: protoInstanceMir.
            mustPreserveClassIdentity: true.
            setClassSlot: 'this_class'  To: theClassMir.
            setInstanceSlot: 'my_class' To: theClassMir.
            ["For senders:" my_class. proto_instance. this_class].
            checkFinalAssertions).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: structDefs\x7fCategory: attributeStructs\x7fCategory: concreteTypes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         genericAttribute_info = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'genericAttribute_info' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile genericAttribute_info.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'genericAttribute_info' -> () From: ( | {
         'Category: typeTesting\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         attributeType = 'GenericAttribute'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'genericAttribute_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         attribute_name_index <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'genericAttribute_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (byteVector)\x7fVisibility: public'
        
         info <- bootstrap stub -> 'globals' -> 'byteVector' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'genericAttribute_info' -> () From: ( | {
         'Category: typeTesting\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         is_generic = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'genericAttribute_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (pep classFile)\x7fVisibility: private'
        
         myClassFile <- bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'genericAttribute_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topAttribute' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'genericAttribute_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         parseNameIdx: idx AttrLen: len = ( |
            | 
            attribute_name_index: idx.
            info: (myClassFile parseNBytes: len).
            pep debug ifTrue: [
                'Generic: ' print. (myClassFile constant_pool at: idx) asciiValue printLine.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'genericAttribute_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         typeMatches: nameStr = ( |
            | 
            true.   "Generic attributes are catch-all, so always indicate match!'").
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: translating\x7fComment: If \'super = nil\' there will be no \'super_class\' slot in the class.
Used by arrays.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         getUniversalClassSlotsClassName: cn IsAbstract: isAbs IsInterface: isIF InterfaceNames: iNames Superclass: super TypeTestClassNames: ttNames = ( |
             resMir.
            | 
            resMir: (reflect: universalClassSlots _Clone).
            [class_name. my_lock. class_is_interface. interface_names. 
             super_class. "For senders."].
            resMir: (resMir copyAt: 'class_name' PutContents: (reflect: cn canonicalize)).
            resMir: (resMir copyAt: 'my_lock'    PutContents: (reflect: lock copy)).

            nil = super ifTrue: [
                resMir: (resMir copyRemoveSlot: 'super_class').
            ] False: [
                resMir: (resMir copyAt: 'super_class' PutContents: (reflect: super)).
            ].

            "No need to set if the same as already there."
            universalClassSlots class_is_interface != isIF ifTrue: [
                resMir: (resMir copyAt: 'class_is_interface' PutContents: (reflect: isIF)).
            ].
            universalClassSlots class_is_abstract != isAbs ifTrue: [
                resMir: (resMir copyAt: 'class_is_abstract' PutContents: (reflect: isAbs)).
            ].

            "No need to set if no interface_names, since initial value is already empty."
            pep assert: [universalClassSlots interface_names isEmpty].
            iNames isEmpty ifFalse: [
                resMir: (resMir copyAt: 'interface_names' PutContents: (reflect: iNames)).
            ].
            pep ifTraceMutator: [
                resMir: (resMir copyAddSlots: (reflect: classSlotsForTracing)).
            ].
            resMir reflectee type_test_class_names: ttNames.
            pep addTypeTesters: ttNames To: resMir).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: magic\x7fComment: 0xCAFEBABE\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (\'CAFEBABE\'  hexAsInteger asInt32)\x7fVisibility: private'
        
         goodMagic = 'CAFEBABE'  hexAsInteger asInt32.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: Java VM defined\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         hasSuperclass = ( |
            | 0 != super_class).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: copying and initialization\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         initBytes: b IfFail: errBlk = ( |
             c.
            | 
            namedConstants: dictionary copy.
            bytes: b.
            parseAllIfFail: [|:e| ^ errBlk value: e].
            bytes: byteVector.  "Cleanup."
            c: this_class_info.
            classNameWithDots:    c classNameWithDots.
            classNameWithSlashes: c nameAsAscii.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: copying and initialization\x7fComment: Don\'t call this method on every classFile object created.
Just call once on prototype.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         initStaticStuff = ( |
             maxTag <- 0.
            | 
            constantStructsDo: [|:ck| maxTag: (maxTag max: ck tag)].
            tag2const: (vector copySize: 1 + maxTag).
            constantStructsDo: [|:ck| 
                pep assert: [nil = (tag2const at: ck tag).  "Ensure tags unique."].
                tag2const at: ck tag Put: ck.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: translating\x7fComment: Called after the class has been installed by the loader.
Note: executes java code which may throw exception.
Caller must handle this exception.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         initializeClass = ( |
            | 
            (theClassMir includesKey: 'init_class') ifTrue: [
                theClass init_class.  "Note: don't invoke inherited initializers.
                                       The initializer must be found directly in
                                       the class."
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: translating\x7fCategory: constants\x7fComment: Install the named constant with given value in the constants object
of the GIVEN class (not necessarily the class of the receiver classFile).
If \'exists\' is true, the slot for the constant must already exist. This 
facility is used for a few lazily build string constants (while class
java.lang.String is being loaded); the lazy build method is replaced with
the constant once it has been built.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         installConstantInClass: aClass Name: constName Value: valMir ExistingSlot: exists = ( |
             cm.
            | 
            cm: (reflect: aClass my_consts).
            exists ifTrue: [
                [cm includesKey: constName] whileFalse: [
                    cm: (reflect: cm reflectee more_consts). "Go to parent."
                ].
                cm frozenDefine: (cm copyAt: constName PutContents: valMir).
            ] False: [
                maxConstantsPerChunk = cm size ifTrue: [|new|
                    "Push current constants up into a parent,
                     to avoid the quadratic cost of building a
                     single ever larger object of constants."
                    [more_consts.    "For senders."].
                    new: (reflect: (| more_consts* = nil. |)).
                    cm: (new copyAt: 'more_consts' PutContents: cm).
                ].
                cm: (cm copyAt: constName PutContents: valMir).
                aClass my_consts: cm reflectee.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: translating\x7fCategory: constants\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         installConstantName: constName Value: valMir ExistingSlot: exists = ( |
            | 
            installConstantInClass: theClassMir reflectee  "Nonexported ref. Don't use 'theClass'."
                              Name: constName
                             Value: valMir
                      ExistingSlot: exists).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: translating\x7fCategory: tracing\x7fComment: Also used by arrays, so publicly accessible.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         instanceSlotsForTracing = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'instanceSlotsForTracing' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile instanceSlotsForTracing.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'instanceSlotsForTracing' -> () From: ( | {
         'Category: tracing\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (-1)\x7fVisibility: public'
        
         trace_object_id <- -1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: translating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         interfaceNames = ( |
             interf.
            | 
            0 = interfaces size ifTrue: [^ vector]. "Most classes have no interfaces, in fact."
            interf: (vector copySize: interfaces size).
            interface_infosDo: [|:intf. :idx|
                interf at: idx Put: intf nameAsAscii canonicalize.
            ].
            interf).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: Java VM defined\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         interface_infosDo: blk = ( |
            | 
            interfaces do: [|:idx. :i| blk value: (constantPoolAt: idx) With: i].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: Java VM defined\x7fComment: As for \'constant_pool\' we do not store the count of how many
interfaces there are.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector.)\x7fVisibility: public'
        
         interfaces <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: translating\x7fCategory: extra instance vars\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         javaLangClassInstanceSlots = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'javaLangClassInstanceSlots' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile javaLangClassInstanceSlots.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'javaLangClassInstanceSlots' -> () From: ( | {
         'Category: helpers\x7fComment: Will be set to point to a class object.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         the_class.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: translating\x7fCategory: extra instance vars\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         javaUtilDateInstanceSlots = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'javaUtilDateInstanceSlots' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile javaUtilDateInstanceSlots.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'javaUtilDateInstanceSlots' -> () From: ( | {
         'Category: helpers\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         self_time_object.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'javaUtilDateInstanceSlots' -> () From: ( | {
         'Category: helpers\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (-1)\x7fVisibility: private'
        
         self_time_object_ms_value <- -1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: dumping and printing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         javap = ( |
            | javapOptions: '-c' OnFile: stdout).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: dumping and printing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         javapOptions: optionsStr = ( |
            | 
            javapOptions: optionsStr OnFile: stdout).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: dumping and printing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         javapOptions: optionsStr On: fileNamed = ( |
             file.
            | 
            file: fileNamed asOutputFile.
            javapOptions: optionsStr OnFile: file.
            file close.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: dumping and printing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         javapOptions: optionsStr OnFile: file = ( |
             opt.
             priv <- bootstrap stub -> 'globals' -> 'false' -> ().
             sf.
            | 
            opt: optionsStr asTokensSeparatedByWhiteSpace.
            file write: 'Compiled from '.
            sf: (getUniqueAttributeMatching: [|:att| att is_sourceFile] IfNone: nil).
            nil = sf ifTrue: [file writeLine: '<no source file attribute found>']
                      False: [file writeLine: sf sourcefile asciiValue].
            dumpFlagsOnFile: file.
            file write: 'class '.
            file write: this_class_info classNameWithDots.
            hasSuperclass ifTrue: [
                file write: ' extends '.
                file write: super_class_info classNameWithDots.
            ].
            file writeLine: ' {'.
            priv: (opt includes: '-p').
            fields  do: [|:field| field dumpPrivate: priv OnFile: file].
            methods do: [|:meth|  meth  dumpPrivate: priv OnFile: file].
            (opt includes: '-c') ifTrue: [
                methods do: [|:meth| meth dumpCodePrivate: priv OnFile: file].
            ].
            file writeLine: '}'.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: structDefs\x7fCategory: attributeStructs\x7fCategory: tableEntries\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         lineNumberTableEntry = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'lineNumberTableEntry' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile lineNumberTableEntry.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'lineNumberTableEntry' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         line_number <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'lineNumberTableEntry' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (pep classFile)\x7fVisibility: private'
        
         myClassFile <- bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'lineNumberTableEntry' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topStruct' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'lineNumberTableEntry' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         parse = ( |
            | 
            start_pc:    myClassFile parseU2.
            line_number: myClassFile parseU2).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'lineNumberTableEntry' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         start_pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: structDefs\x7fCategory: attributeStructs\x7fCategory: concreteTypes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         lineNumberTable_attribute = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'lineNumberTable_attribute' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile lineNumberTable_attribute.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'lineNumberTable_attribute' -> () From: ( | {
         'Category: typeTesting\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         attributeType = 'LineNumberTable'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'lineNumberTable_attribute' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         attribute_name_index <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'lineNumberTable_attribute' -> () From: ( | {
         'Category: typeTesting\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         is_lineNumberTable = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'lineNumberTable_attribute' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: public'
        
         line_number_table <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'lineNumberTable_attribute' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (pep classFile)\x7fVisibility: private'
        
         myClassFile <- bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'lineNumberTable_attribute' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topAttribute' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'lineNumberTable_attribute' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         parseNameIdx: idx AttrLen: len = ( |
            | 
            attribute_name_index: idx.
            line_number_table: myClassFile parseLineNumberTable.
            pep assert: [len = (2 + (4 * line_number_table size))].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: structDefs\x7fCategory: attributeStructs\x7fCategory: tableEntries\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         localVariableTableEntry = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'localVariableTableEntry' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile localVariableTableEntry.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'localVariableTableEntry' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         initClassFile: cf = ( |
            | 
            resend.initClassFile: cf.
            mangledName0: nil.  "Clear cache."
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'localVariableTableEntry' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         length <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'localVariableTableEntry' -> () From: ( | {
         'Category: caching\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         mangledName0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'localVariableTableEntry' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (pep classFile)\x7fVisibility: private'
        
         myClassFile <- bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'localVariableTableEntry' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         nameMixin* = bootstrap stub -> 'globals' -> 'pep' -> 'nameMixin' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'localVariableTableEntry' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         name_index <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'localVariableTableEntry' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topStruct' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'localVariableTableEntry' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         parse = ( |
            | 
            start_pc:        myClassFile parseU2.
            length:          myClassFile parseU2.
            name_index:      myClassFile parseConstantPoolIndex.
            signature_index: myClassFile parseConstantPoolIndex.
            slot:            myClassFile parseU2.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'localVariableTableEntry' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         signatureMixin* = bootstrap stub -> 'globals' -> 'pep' -> 'signatureMixin' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'localVariableTableEntry' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         signature_index <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'localVariableTableEntry' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         slot <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'localVariableTableEntry' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         start_pc <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: structDefs\x7fCategory: attributeStructs\x7fCategory: concreteTypes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         localVariableTable_attribute = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'localVariableTable_attribute' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile localVariableTable_attribute.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'localVariableTable_attribute' -> () From: ( | {
         'Category: typeTesting\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         attributeType = 'LocalVariableTable'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'localVariableTable_attribute' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         attribute_name_index <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'localVariableTable_attribute' -> () From: ( | {
         'Category: typeTesting\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         is_localVariableTable = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'localVariableTable_attribute' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: public'
        
         local_variable_table <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'localVariableTable_attribute' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (pep classFile)\x7fVisibility: private'
        
         myClassFile <- bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'localVariableTable_attribute' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topAttribute' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'localVariableTable_attribute' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         parseNameIdx: idx AttrLen: len = ( |
            | 
            attribute_name_index: idx.
            local_variable_table: myClassFile parseLocalVariableTable.
            pep assert: [len = (2 + (10 * local_variable_table size))].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: magic\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (123456789)\x7fVisibility: private'
        
         magic <- 123456789.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: versioning\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         major_version <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: translating\x7fCategory: constants\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         maxConstantsPerChunk = 20.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: structDefs\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         method_info = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile method_info.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         access_flags <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         access_flagsOps* = bootstrap stub -> 'globals' -> 'pep' -> 'access_flagsMixin' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> () From: ( | {
         'Category: translating\x7fCategory: local names\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         argNameConst: argNo = ( |
            | 
            pep assert: [argNo <= signatureNoOfArgs].
            localNameBase: 'a' Number: argNo).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> () From: ( | {
         'Category: attributes\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: public'
        
         attributes <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         attributesMixin* = bootstrap stub -> 'globals' -> 'pep' -> 'attributesMixin' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> () From: ( | {
         'Category: attributes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         cacheAttributes = ( |
            | 
            codeAttribute: nil.
            exceptionsAttribute: nil.
            attributes do: [|:attrib|
                attrib is_code ifTrue: [
                    nil != codeAttribute ifTrue: [
                        myClassFile abortParse: printString, ': found two code attributes'.
                    ].
                    codeAttribute: attrib.
                ] False: [
                attrib is_exceptions ifTrue: [
                    nil != exceptionsAttribute ifTrue: [
                        myClassFile abortParse: printString, ': found two exceptions attributes'.
                    ].
                    exceptionsAttribute: attrib.
                ]].
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> () From: ( | {
         'Category: attributes\x7fComment: Will be set to the code attribute during parsing
or nil if the method has no code (should happen if 
and only if the method is abstract or native).\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         codeAttribute.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> () From: ( | {
         'Category: dumping\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         codeHeaderString = ( |
            | 
            'Method ', signaturePrintString).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> () From: ( | {
         'Category: translating\x7fComment: For args that are being assigned, instead of \'foo: t_1 With: t_2\'
we do: \'foo: a_1 With: a_2\' and in beginning of body insert
\'t_1: a_1. t_2: a_2.\'.
This method controls how do to do these argument transfers and
specifies which slots should be arguments and locals.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         defineLocalSlotsAddArg: argBlk AddLocal: locBlk Transfer: traBlk = ( |
             argNo <- 0.
             asgnLoc.
            | 
            argNo: firstArgNo.
            asgnLoc: codeAttribute assignedLocals.  "Only valid after building instr."
            signatureArgTypesDo: [|:argType|
                (asgnLoc at: argNo) ifTrue: [| s1 <- ''. s2 <- ''. |
                    s1: (argNameConst: argNo).
                    s2: (localName:    argNo).
                    argBlk value: s1.
                    locBlk value: s2.
                    traBlk value: s1 With: s2.
                ] False: [
                    argBlk value: (localName: argNo).
                ].
                "For the 64 bit types (long, double) we need to increment
                 the arg number by 2!"
                (is64BitType: argType) ifTrue: [argNo: 2 + argNo]
                                        False: [argNo: 1 + argNo].
            ].
            argNo upTo: codeAttribute max_locals Do: [|:i| 
                locBlk value: (localName: i).
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> () From: ( | {
         'Category: dumping\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         dumpCodePrivate: priv OnFile: file = ( |
            | 
            nil = codeAttribute ifTrue: [^ self].
            priv || [hasPrivateFlag not] ifTrue: [
                file writeLine: ''.
                file writeLine: codeHeaderString.
                codeAttribute dumpOnFile: file.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> () From: ( | {
         'Category: dumping\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         dumpPrivate: priv OnFile: file = ( |
            | 
            priv || [hasPrivateFlag not] ifTrue: [
                file write: '    '.
                dumpFlagsOnFile: file.
                file write: signaturePrintString.
            ].
            file writeLine: ''.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> () From: ( | {
         'Category: attributes\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         exceptionsAttribute.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> () From: ( | {
         'Category: translating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         firstArgNo = ( |
            | 
            hasStaticFlag ifTrue: 0 False: 1).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> () From: ( | {
         'Category: translating\x7fCategory: hooks\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         hook_methods = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> 'hook_methods' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile method_info hook_methods.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> 'hook_methods' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         pep__hook__flush__code = ( |
            | 
            _Flush. 0 memory thoroughCleanup: 0 true).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         initClassFile: cf = ( |
            | 
            resend.initClassFile: cf.
            mangledName0:    nil.  "Clear cache."
            splitSignature0: nil.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> () From: ( | {
         'Category: testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isClassInitializer = ( |
            | 
            'init_class' = mangledName).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> () From: ( | {
         'Category: translating\x7fCategory: local names\x7fComment: Return name for local variable. Note that
arguments are accessed as local variables, the 
0\'th argument being \'self\'.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         localName: n = ( |
            | 
            localNameBase: 't' Number: n).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> () From: ( | {
         'Category: translating\x7fCategory: local names\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         localNameBase: base Number: n = ( |
            | 
            (0 = n) && [hasStaticFlag not] ifTrue: [^ 'self'].
            base, '_', n printString).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> () From: ( | {
         'Category: translating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         makeBody: mir = ( |
            | 
            hasAbstractFlag ifTrue: [^ translateAbstractMethod: mir].
            hasNativeFlag   ifTrue: [^ translateNativeMethod: mir].
            pep testForHooks && ['pep__hook__' isPrefixOf: virtualName] ifTrue: [
                ^ translateHook: mir.
            ].
            codeAttribute nameOfResult: nextName.
            (pep delayTranslationSize > codeAttribute code size) || 
            [isClassInitializer] ifTrue: [
                ^ mir copyAddSlots: (codeAttribute caTranslateIfFail: [|:e| ^ errBlk value: e]).
            ].
            translateStub: mir).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> () From: ( | {
         'Category: translating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         makeStaticBinder = ( |
             mir.
             nonvName <- ''.
             str <- ''.
            | 
            nonvName: nonVirtualName.
            nextName: virtualName.
            str: (methodStartName: nonvName).
            [this_class. "For senders."].
            str: str, ' this_class.', (sendWithSelector: nextName).
            str: str, ') |)'.
            mir: (reflect: str eval).
            pep setCategoryTo: 'non-virtuals' ForSlot: nonvName In: mir).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> () From: ( | {
         'Category: translating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         makeSynchronizer: mir = ( |
             str <- ''.
            | 
            str: (methodStartName: nextName).
            [this_class. "For senders."].
            nextName: 'synced_', nextName.
            str: str, '\nsync_do: [\n    ',
                      (sendWithSelector: nextName),
                      '\n]) |)'.
            mir copyAddSlots: (reflect: str eval)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> () From: ( | {
         'Category: translating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         makeTracer: mir = ( |
             loc <- 0.
             src <- ''.
             staticCompensation <- 1.
             stk <- 0.
            | 
            hasNativeFlag ifTrue: [
                loc: noOfArgs.  "Remember that locals include the arguments."
                stk: 5.         "Give it a few exp's to deal with 'trace_keepAlive:Do:'."
            ].
            nil != codeAttribute ifTrue: [  "To avoid trouble with native/abstract methods."
                loc: codeAttribute max_locals.
                stk: codeAttribute max_stack.
            ].
            src: (methodStartName: nextName).
            src: src, 'trace_callReturnLocals: ', loc printString, 
                      ' Stack: ', stk printString,
                      ' Body: [\n'.
            hasStaticFlag ifTrue: [
                staticCompensation: 0.
            ] False: [
                src: src, '     trace_storeObj: self InLocal: 0.\n'.
            ].
            signatureNoOfArgs do: [|:argNo|
                src: src, '     trace_storeObj: ', (localName: 1 + argNo),
                                   ' InLocal: ', (staticCompensation + argNo) printString, '.\n'.
            ].
            nextName: 'traced_', nextName.
            src: src, '     this_class.', (sendWithSelector: nextName), '\n',
                      ' ]) |)'.
            mir copyAddSlots: (reflect: src eval)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> () From: ( | {
         'Category: caching\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         mangledName0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> () From: ( | {
         'Category: testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         mayThrowException = ( |
            | 
            (nil != exceptionsAttribute) &&
            [exceptionsAttribute isEmpty not]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> () From: ( | {
         'Category: translating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         methodStartName: name = ( |
            | methodStartName: name Locals: '').
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> () From: ( | {
         'Category: translating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         methodStartName: name Locals: locs = ( |
             n <- 0.
             res <- ''.
            | 
            res: '(| ', name, ' = ( '.
            n: signatureNoOfArgs.
            0 < n ifTrue: [    "There are non-receiver arguments."
                res: res, '| '.
                n do: [|:i|
                    res: res, ':', (localName: 1 + i), '. '.
                ].
                res: res, (locs, '| ').
            ].
            res).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (pep classFile)\x7fVisibility: public'
        
         myClassFile <- bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> () From: ( | {
         'Category: translating\x7fCategory: local names\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         nameForJsrToPC: pc = ( |
            | 'jsr_', pc printString).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         nameMixin* = bootstrap stub -> 'globals' -> 'pep' -> 'nameMixin' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0.)\x7fVisibility: public'
        
         name_index <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> () From: ( | {
         'Category: translating\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (\'\')\x7fVisibility: private'
        
         nextName <- ''.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> () From: ( | {
         'Category: translating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         noOfArgs = ( |
            | 
            hasStaticFlag ifTrue: [signatureNoOfArgs] 
                           False: [1 + signatureNoOfArgs]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topStruct' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         parse = ( |
            | 
            access_flags:    myClassFile parseU2.
            checkFlagsIn:    acc_public || acc_private || acc_protected    ||
                             acc_static || acc_final   || acc_synchronized ||
                             acc_native || acc_abstract.
            name_index:      myClassFile parseConstantPoolIndex.
            signature_index: myClassFile parseConstantPoolIndex.
            attributes:      myClassFile parseAttributes.
            cacheAttributes.
            nil = codeAttribute ifTrue: [
                hasAbstractFlag || [hasNativeFlag] ifFalse: [
                    myClassFile abortParse: printString, 
                                            ' has no code (but should have: ',
                                            'is neither abstract nor native)'.
                ].
            ] False: [
                codeAttribute myMethod: self.
                hasAbstractFlag ifTrue: [
                    myClassFile abortParse: printString, ' has code but is also abstract'.
                ].
                hasNativeFlag ifTrue: [
                    myClassFile abortParse: printString, ' has code but is also native'.
                ].
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> () From: ( | {
         'Category: translating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         printTranslationTrace = ( |
            | 
            pep debug ifTrue: [
                codeHeaderString printLine.
                ' in ' print.
                myClassFile this_class_info printLine. 
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> () From: ( | {
         'Category: translating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         sendWithSelector: sel = ( |
            | sendWithSelector: sel ArgBlk: [|:i| localName: 1 + i]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> () From: ( | {
         'Category: translating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         sendWithSelector: sel ArgBlk: aBlk = ( |
             argNo <- 0.
             res <- ''.
             selObj.
            | 
            selObj: (selector copyStr: sel).
            0 = selObj numberOfArguments ifTrue: [^ sel, ' '].
            selObj keywordsDo: [|:key|
                res: res, key, ' ', (aBlk value: argNo), ' '.
                argNo: 1 + argNo.
            ].
            res).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> () From: ( | {
         'Category: translating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         setUnsyncCategory: mir Name: name = ( |
            | 
            hasSynchronizedFlag ifFalse: [^ mir].
            pep setCategoryTo: 'unsynchronized' ForSlot: name In: mir).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         signatureMixin* = bootstrap stub -> 'globals' -> 'pep' -> 'signatureMixin' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0.)\x7fVisibility: public'
        
         signature_index <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> () From: ( | {
         'Category: caching\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         splitSignature0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> () From: ( | {
         'Category: translating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         translateAbstractMethod: mir = ( |
            | 
            pep assert: [hasAbstractFlag].
            translateForError: 'abstract method' Mir: mir).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> () From: ( | {
         'Category: translating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         translateForError: e Mir: mir = ( |
             res <- ''.
            | 
            res: (methodStartName: virtualName).
            res: res, 'java_error: ', e storeString, '. ) |)'.
            mir copyAddSlots: (reflect: res eval)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> () From: ( | {
         'Category: translating\x7fCategory: hooks\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         translateHook: mir = ( |
             ms.
            | 
            ms: ((reflect: hook_methods) at: virtualName IfAbsent: nil).
            nil = ms ifTrue: [| m <- ''. |
                m:  'unknown hook: ', virtualName.
                warning: m.
                ^ translateForError: m Mir: mir.
            ].
            mir copyAt: nextName PutContents: ms contents).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> () From: ( | {
         'Category: translating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         translateIfFail: errBlk = ( |
             mir.
            | 
            printTranslationTrace.
            mir: makeStaticBinder.
            hasSynchronizedFlag ifTrue: [mir: (makeSynchronizer: mir)].
            pep ifTraceMutator: [mir: (makeTracer: mir)].
            mir: (makeBody: mir).
            pep incMethodCount.
            mir).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> () From: ( | {
         'Category: translating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         translateNativeMethod: mir = ( |
             name.
             slot.
            | 
            pep assert: [hasNativeFlag].
            name: nonVirtualName.
            slot: ((reflect: pep nativeMethods) at: name IfAbsent: nil).
            nil = slot ifTrue: [
                translateForError: 'undefined native method: \'', name, '\'' Mir: mir.
            ] False: [
                mir copyAt: nextName PutContents: slot contents.
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> () From: ( | {
         'Category: translating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         translateStub: mir0 = ( |
             methMir.
             mir.
             name <- ''.
             str <- ''.
            | 
            mir: mir0.
            name: nextName.
            str: (methodStartName: name Locals: 'code_attrib = nil. ').
            pep debug ifTrue: [
                str: str, '\n  \'invoking stub: ', name, '\' printLine.'.
            ].
            str: str, '\n  code_attrib translateLate.\n',
                        '  this_class.', (sendWithSelector: name),
                      ') |)'.
            methMir: ((reflect: str eval) at: name) contents.
            methMir: (methMir copyAt: 'code_attrib' PutContents: (reflect: codeAttribute)).
            mir: (mir copyAt: name PutContents: methMir).
            pep incStubCount.
            hasSynchronizedFlag ifTrue: [mir: (setUnsyncCategory: mir Name: name)].
            mir).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: Java VM defined\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: public'
        
         methods <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: versioning\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         minor_version <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: translating\x7fCategory: build primitives\x7fComment: If true, we cannot modify the class with functional mirror protocol,
since references to it may exist elsewhere.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: private'
        
         mustPreserveClassIdentity <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: translating\x7fCategory: constants\x7fComment: New and faster way to handle named constants: install
the in an object \'my_consts\' which resides in an
assignable field in the class.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         nameForConstant: constValue = ( |
             cmir.
            | 
            cmir: (reflect: constValue).
            namedConstants if: cmir 
                  IsPresentDo: [|:name| name]
                  IfAbsentPut: ['c', namedConstants size printString]
                        AndDo: [|:name| installConstantName: name
                                                      Value: cmir
                                               ExistingSlot: false.
                                        name]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: translating\x7fCategory: constants\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (dictionary)\x7fVisibility: private'
        
         namedConstants <- bootstrap stub -> 'globals' -> 'dictionary' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: translating\x7fCategory: fields and methods\x7fComment: Avoid quadratic time complexity by building a large object from
two smaller ones of half the size.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         nonquadraticTranslate: fm From: start To: end IfFail: errBlk = ( |
            | 
            start = end ifTrue: [
                (fm at: start) translateIfFail: errBlk.
            ] False: [| m <- 0. |
                m: (end + start) / 2.
                (nonquadraticTranslate: fm From: start To: m   IfFail: errBlk)
                  copyAddSlots: 
                (nonquadraticTranslate: fm From: 1 + m To: end IfFail: errBlk).
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: translating\x7fCategory: fields and methods\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         nonquadraticTranslate: fm IfFail: errBlk = ( |
            | 
            nonquadraticTranslate: fm From: 0 To: fm size - 1 IfFail: errBlk).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: translating\x7fCategory: constants\x7fComment: No longer used.
The old way of doing named constants: install them directly in the class
object. However, it is too slow when doing lazy compilation, since the
class is in \"global use\" when many constants are installed. E.g., on 
javac it takes some 20 seconds of Ultra CPU time to install constants.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         oldNameForConstant: constValue = ( |
             cmir.
            | 
              cmir: (reflect: constValue).
              namedConstants if: cmir
                    IsPresentDo: [|:name| ^ name]
                    IfAbsentPut: ['const_', namedConstants size printString]
                          AndDo: [|:name. mir|
                mir: ((reflect: ()) copyAt: name PutContents: cmir).
                mir: (pep setCategoryTo: 'constants'
                                ForSlot: name
                                     In: mir).
                addToClass: mir.
                ^ name.
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: translating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         packageNames = ( |
             names.
            | 
            names: sequence copy.
            this_class_info breakupClassNameDo: [|:pkg|
                names add: pkg.
            ].
            names removeLast.
            names isEmpty ifTrue: [names add: 'Not packaged'].
            names asVector).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'traits' -> 'clonable' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: parsing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parseAllIfFail: errBlk = ( |
            | 
            parseIdx: 0.
            abortParseBlk: [|:e| ^ errBlk value: e].
            magic:            parseI4.
            checkMagicIfFail: abortParseBlk.
            minor_version:    parseU2.
            major_version:    parseU2.
            storeAndParseConstantPool.
            access_flags:     parseU2.
            checkFlagsIn:     acc_public    || acc_final || 
                              acc_interface || acc_abstract.
            this_class:       parseConstantPoolIndex.
            super_class:      parseConstantPoolIndex.
            interfaces:       parseInterfaces.
            fields:           parseFields.
            methods:          parseMethods.
            attributes:       parseAttributes.
            parseIdx != bytes size ifTrue: [
                abortParse: 'class file: bad length'.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: parsing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parseAttribute = ( |
             attrLen <- 0.
             nameIdx <- 0.
             nameStr <- ''.
            | 
            nameIdx: parseConstantPoolIndex.
            attrLen: parseU4.
            nameStr: (constant_pool at: nameIdx) asciiValue.
            attributeStructsDo: [|:attr|
                (attr typeMatches: nameStr) ifTrue: [
                    ^ (attr copyClassFile: self) parseNameIdx: nameIdx 
                                                      AttrLen: attrLen.
                ].
            ].
            error: 'no attribute could parse this: ', nameStr).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: parsing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         parseAttributes = ( |
            | 
            (vector copySize: parseU2) mapBy: [parseAttribute]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: parsing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parseConstant = ( |
            | 
            ((tag2const at: parseU1) copyClassFile: self) parse).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: parsing\x7fComment: Get a \'u2\' value and assert that it is a valid contant pool index.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         parseConstantPoolIndex = ( |
             idx <- 0.
            | 
            idx: parseU2.
            pep assert: [idx < constant_pool size].
            idx).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: parsing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         parseExceptionTable = ( |
            | 
            (vector copySize: parseU2) mapBy: [parseConstantPoolIndex]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: parsing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         parseExceptions = ( |
            | 
            parseVectorOfStructs: exception_info).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: parsing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parseFields = ( |
            | 
            parseVectorOfStructs: field_info).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: parsing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         parseI4 = ( |
             res <- 0.
            | 
            res: (bytes javaIntAt: parseIdx IfFail: abortParseBlk).
            parseIdx: 4 + parseIdx.
            res).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: parsing\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         parseIdx <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: parsing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parseInterfaces = ( |
            | 
            (vector copySize: parseU2) mapBy: [parseConstantPoolIndex]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: parsing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         parseLineNumberTable = ( |
            | 
            parseVectorOfStructs: lineNumberTableEntry).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: parsing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         parseLocalVariableTable = ( |
            | 
            parseVectorOfStructs: localVariableTableEntry).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: parsing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parseMethods = ( |
            | 
            parseVectorOfStructs: method_info).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: parsing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         parseNBytes: n = ( |
             res.
             t <- 0.
            | 
            t: n + parseIdx.
            bytes size < t ifTrue: [
                abortParse: 'class file: access past end of byte stream'.
            ].
            res: (bytes copyFrom: parseIdx UpTo: t).
            parseIdx: t.
            res).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: parsing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         parseU1 = ( |
             res <- 0.
            | 
            res: (bytes javaUnsignedByteAt: parseIdx IfFail: abortParseBlk).
            parseIdx: 1 + parseIdx.
            res).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: parsing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         parseU2 = ( |
             res <- 0.
            | 
            res: (bytes javaUnsignedShortAt: parseIdx IfFail: abortParseBlk).
            parseIdx: 2 + parseIdx.
            res).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: parsing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         parseU4 = ( |
             res <- 0.
            | 
            res: (bytes javaUnsignedIntAt: parseIdx IfFail: abortParseBlk).
            parseIdx: 4 + parseIdx.
            res).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: parsing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parseVectorOfStructs: proto = ( |
            | 
            (vector copySize: parseU2) mapBy: [(proto copyClassFile: self) parse]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: translating\x7fCategory: constants\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         pathForConstant: constValue = ( |
            | 
            pathForNamedConstant: (nameForConstant: constValue)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: translating\x7fCategory: constants\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         pathForNamedConstant: name = ( |
            | 
            (vector copySize: 2 FillingWith: constantsSlotName) at: 1 Put: name).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: dumping and printing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         printString = ( |
            | 'classFile(', this_class_info printString, ')').
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: translating\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         protoInstanceMir.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: translating\x7fCategory: build primitives\x7fComment: Set the contents of the given slot in \'classMir\'.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         setClassSlot: slotName To: contentsMir = ( |
            | 
            setTheClassMir: (theClassMir copyAt: slotName PutContents: contentsMir)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: translating\x7fCategory: build primitives\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         setInstanceSlot: slotName To: contentsMir = ( |
            | 
            protoInstanceMir frozenDefine: (protoInstanceMir copyAt: slotName
                                                        PutContents: contentsMir)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: translating\x7fCategory: build primitives\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         setTheClassMir: cm = ( |
            | 
            mustPreserveClassIdentity ifTrue: [theClassMir frozenDefine: cm]
                                       False: [theClassMir: cm].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: structDefs\x7fCategory: attributeStructs\x7fCategory: concreteTypes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         sourceFile_attribute = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'sourceFile_attribute' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile sourceFile_attribute.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'sourceFile_attribute' -> () From: ( | {
         'Category: typeTesting\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         attributeType = 'SourceFile'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'sourceFile_attribute' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         attribute_name_index <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'sourceFile_attribute' -> () From: ( | {
         'Category: typeTesting\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         is_sourceFile = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'sourceFile_attribute' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (pep classFile)\x7fVisibility: private'
        
         myClassFile <- bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'sourceFile_attribute' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topAttribute' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'sourceFile_attribute' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         parseNameIdx: idx AttrLen: len = ( |
            | 
            attribute_name_index: idx.
            pep assert: [2 = len].
            sourcefile_index: myClassFile parseConstantPoolIndex.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'sourceFile_attribute' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         sourcefile = ( |
            | 
            constantNumber: sourcefile_index).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'sourceFile_attribute' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         sourcefile_index <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: translating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         startTranslation = ( |
            | 
            mustPreserveClassIdentity: false.
            protoInstanceMir: (reflect: universalInstanceSlots _Clone).
            pep ifTraceMutator: [addInstanceSlotsForTracing].
            theClassMir: (getUniversalClassSlotsClassName: classNameWithDots
                                               IsAbstract: hasAbstractFlag
                                              IsInterface: hasInterfaceFlag
                                           InterfaceNames: interfaceNames
                                               Superclass: superclass0
                                       TypeTestClassNames: typeTestClassNames).
            addExtraInstanceVars.
            pep ifTraceMutator: [traceDefineClass].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: parsing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         storeAndParseConstantPool = ( |
             constant_pool_count <- 0.
             i <- 1.
            | 
            constant_pool_count: parseU2.  "Don't store in instance var."
            "Need to store the vector in the 'constant_pool' instance
             variable before proceeding to parse the entries, to
             ensure that assertion checking can verify constant pool
             indices (during parsing of contant pool entries) against 
             the size of the vector."
            "Note: first index is 1, and some constant pool entries
             bump the index by 2 (doubles and longs)."
            constant_pool: (vector copySize: constant_pool_count).
            [i < constant_pool_count] whileTrue: [|const|
                const: parseConstant.
                constant_pool at: i Put: const.
                i: i + const numberOfConstantPoolSlots.
                pep ifTraceMutator: [const traceConstant].
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: Java VM defined\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         super_class <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: Java VM defined\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         super_class_info = ( |
            | 
            "java.lang.Object has no superclass."
            pep assert: [hasSuperclass = ('java/lang/Object' != classNameWithSlashes)].
            constantPoolAt: super_class).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: translating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         superclass0 = ( |
            | 
            hasSuperclass ifTrue: [
                pep loader getClassNamed: super_class_info nameAsAscii
                                  IfFail: raiseError.
            ] False: [
                pep javaRootClass.
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: structDefs\x7fCategory: constantStructs\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: private'
        
         tag2const <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: translating\x7fComment: If the class is accessed through this method, it is assumed that the reference
will remain in use elsewhere. Thus, the class\' identity will be preserved in
future reflectee opererations on it. If this is not intended, access the class
as \'theClassMir reflectee\' instead.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         theClass = ( |
            | 
            mustPreserveClassIdentity: true.
            theClassMir reflectee).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: translating\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         theClassMir.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: Java VM defined\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         this_class <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: Java VM defined\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         this_class_info = ( |
            | constantPoolAt: this_class).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topAttribute' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         attributeName = ( |
            | 
            (constantNumber: attribute_name_index) asciiValue).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topAttribute' -> () From: ( | {
         'Category: typeTesting\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         attributeType = ( |
            | error: 'childShouldImplement').
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topAttribute' -> () From: ( | {
         'Category: typeTesting\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         is_code = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topAttribute' -> () From: ( | {
         'Category: typeTesting\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         is_constantValue = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topAttribute' -> () From: ( | {
         'Category: typeTesting\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         is_exceptions = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topAttribute' -> () From: ( | {
         'Category: typeTesting\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         is_generic = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topAttribute' -> () From: ( | {
         'Category: typeTesting\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         is_lineNumberTable = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topAttribute' -> () From: ( | {
         'Category: typeTesting\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         is_localVariableTable = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topAttribute' -> () From: ( | {
         'Category: typeTesting\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         is_sourceFile = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topAttribute' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topStruct' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topAttribute' -> () From: ( | {
         'Category: typeTesting\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         typeMatches: nameStr = ( |
            | 
            attributeType = nameStr).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topConstant' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         innerPrintString = ''.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topConstant' -> () From: ( | {
         'Category: typeTesting\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         is_Class = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topConstant' -> () From: ( | {
         'Category: typeTesting\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         is_Double = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topConstant' -> () From: ( | {
         'Category: typeTesting\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         is_Fieldref = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topConstant' -> () From: ( | {
         'Category: typeTesting\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         is_Float = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topConstant' -> () From: ( | {
         'Category: typeTesting\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         is_Integer = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topConstant' -> () From: ( | {
         'Category: typeTesting\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         is_InterfaceMethodref = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topConstant' -> () From: ( | {
         'Category: typeTesting\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         is_Long = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topConstant' -> () From: ( | {
         'Category: typeTesting\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         is_Methodref = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topConstant' -> () From: ( | {
         'Category: typeTesting\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         is_NameAndType = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topConstant' -> () From: ( | {
         'Category: typeTesting\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         is_String = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topConstant' -> () From: ( | {
         'Category: typeTesting\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         is_Unicode = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topConstant' -> () From: ( | {
         'Category: typeTesting\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         is_Utf8 = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topConstant' -> () From: ( | {
         'Comment: See VM Spec! Long and Double constants
take up two entries in the constant pool
vector.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         numberOfConstantPoolSlots = 1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topConstant' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topStruct' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topConstant' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         printString = ( |
            | 
            '<', printStringKey, ' ', innerPrintString, '>').
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topConstant' -> () From: ( | {
         'Comment: Most constants don\'t involve any objects
and so need no tracing. (Strings do, however).\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         traceConstant = ( |
            | 
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topStruct' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         constantNumber: idx = ( |
            | 
            myClassFile constant_pool at: idx IfAbsent: [
                error: 'class file: bad constant pool index'.
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topStruct' -> () From: ( | {
         'Category: copying\x7fComment: Copy and set the field \'myClassFile\'.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         copyClassFile: cf = ( |
            | 
            resend.copy initClassFile: cf).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topStruct' -> () From: ( | {
         'Category: translating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         effectiveClass = ( |
            | myClassFile this_class_info).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topStruct' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         initClassFile: cf = ( |
            | myClassFile: cf. self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topStruct' -> () From: ( | {
         'Category: translating\x7fComment: Only invoke on \'field_info\' and \'constant_Fieldref_info\'
objects (the present object is their most specific common
parent).\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         mangledFieldName = ( |
            | 
            "First mangle by prefixing class name ('nonVirtualName' does this).
             This way we can handle 'hidden fields', i.e., when a subclass defines
             a field with the same name as a superclass.
             Then we must make field names distinct from method names to avoid 
             having fields capture method calls when a field has the same name
             as a method. This we accomplish by appending a suffix."
            nonVirtualName, pep fieldNameSuffix).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topStruct' -> () From: ( | {
         'Category: translating\x7fComment: Note: this method applies to defs of methods and fields
and to references to methods and fields.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         nonVirtualName = ( |
            | 
            "Note: nonVirtualNamePrefix is guaranteed to start with
             lower case letter, so no need to work to ensure it here."
            effectiveClass nonVirtualNamePrefix, mangledName).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topStruct' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'traits' -> 'clonable' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'topStruct' -> () From: ( | {
         'Category: translating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         virtualName = ( |
            | 
            pep makeLowerCase: mangledName).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: translating\x7fCategory: tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         traceDefineClass = ( |
             noOfRefs <- 0.
             noOfStaticRefs <- 0.
             noOfVals <- 0.
             super.
            | 
            super: theClass super_class.
            theClass trace_number_of_first_instance_field: super trace_no_of_refs +
                                                           super trace_number_of_first_instance_field.
            fields do: [|:f|
                f hasStaticFlag ifTrue: [
                    f isReference ifTrue: [
                        f fieldNumberForTrace: noOfStaticRefs.
                        noOfStaticRefs: 1 + noOfStaticRefs.
                    ].
                ] False: [
                    f isReference ifTrue: [
                        f fieldNumberForTrace: theClass trace_number_of_first_instance_field + noOfRefs.
                        noOfRefs: 1 + noOfRefs.
                    ] False: [
                        noOfVals: noOfVals + f noOfWords.
                    ].
                ].
            ].
            theClass trace_no_of_refs:        noOfRefs.
            theClass trace_no_of_vals:        noOfVals.
            theClass trace_no_of_static_refs: noOfStaticRefs.
            pep mutatorTracer defclass: theClass).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: translating\x7fCategory: fields and methods\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         translateFieldsAndMethodsIfFail: errBlk = ( |
             fmClass.
             fmInst.
            | 
            "First split fields and methods up into class & instance."
            fmInst: sequence copy.
            fmClass: methods asSequence.  "Methods always go to class."
            fields do: [|:f|
                f hasStaticFlag ifTrue: [fmClass add: f]
                                 False: [fmInst  add: f].
            ].
            fmClass isEmpty ifFalse: [
                addToClass:  (nonquadraticTranslate: fmClass IfFail: errBlk).
            ].
            fmInst isEmpty ifFalse: [
                fctAddToProto: (nonquadraticTranslate: fmInst IfFail: errBlk).
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: translating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         translateIfFail: errBlk = ( |
            | 
            startTranslation.
            translateFieldsAndMethodsIfFail: [|:e| ^ errBlk value: e].
            finishTranslationIfFail:         [|:e| ^ errBlk value: e].
            pep atName: classNameWithSlashes InstallClass: theClass
                                               Categories: packageNames.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: translating\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         typeTestClassNames = ( |
             names.
            | 
            names: set copy.  "Use set; may encounter same name multiple times
                               when interface interitance has joining paths."
            names add: classNameWithSlashes.
            interface_infosDo: [|:intf. :i. intfClass. |
                intfClass: (pep loader getClassNamed: intf nameAsAscii IfFail: [|:e|
                    error: e.   "Should really throw java exception instead."
                ]).
                names addAll: intfClass type_test_class_names.
            ].
            names asVector).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: translating\x7fCategory: skeletons\x7fComment: Note: this object is also used to fake classes for array types.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         universalClassSlots = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'universalClassSlots' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile universalClassSlots.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'universalClassSlots' -> () From: ( | {
         'Category: arrays\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         array_1 = ( |
            | 
            make_arrays_to_dim: 1).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'universalClassSlots' -> () From: ( | {
         'Category: arrays\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         array_2 = ( |
            | 
            make_arrays_to_dim: 2).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'universalClassSlots' -> () From: ( | {
         'Category: arrays\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         array_3 = ( |
            | 
            make_arrays_to_dim: 3).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'universalClassSlots' -> () From: ( | {
         'Category: arrays\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         array_4 = ( |
            | 
            make_arrays_to_dim: 4).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'universalClassSlots' -> () From: ( | {
         'Category: arrays\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         array_5 = ( |
            | 
            make_arrays_to_dim: 5).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'universalClassSlots' -> () From: ( | {
         'Category: arrays\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         array_6 = ( |
            | 
            make_arrays_to_dim: 6).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'universalClassSlots' -> () From: ( | {
         'Category: arrays\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         array_7 = ( |
            | 
            make_arrays_to_dim: 7).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'universalClassSlots' -> () From: ( | {
         'Category: arrays\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         array_8 = ( |
            | 
            make_arrays_to_dim: 8).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'universalClassSlots' -> () From: ( | {
         'Category: arrays\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         array_9 = ( |
            | 
            make_arrays_to_dim: 9).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'universalClassSlots' -> () From: ( | {
         'Category: arrays\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         arrays_done_to_dim <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'universalClassSlots' -> () From: ( | {
         'Category: helpers\x7fComment: Self boolean telling whether this class is abstract.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         class_is_abstract = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'universalClassSlots' -> () From: ( | {
         'Category: helpers\x7fComment: SELF boolean for whether or not this class is an interface.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         class_is_interface = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'universalClassSlots' -> () From: ( | {
         'Category: helpers\x7fComment: Class name as a SELF string.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (\'no name yet\')\x7fVisibility: public'
        
         class_name = 'no name yet'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'universalClassSlots' -> () From: ( | {
         'Category: helpers\x7fComment: The names of the interfaces that this class implements.
These names are Self strings.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: public'
        
         interface_names = ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'universalClassSlots' -> () From: ( | {
         'Category: helpers\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (())\x7fVisibility: private'
        
         my_consts <- ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'universalClassSlots' -> () From: ( | {
         'Category: helpers\x7fComment: Semaphore object for locking the class.
Unlike the lock for instances, this lock
is allocated eagerly (there are fewer classes,
and pep itself uses the lock so might as well).\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         my_lock = bootstrap stub -> 'globals' -> 'nil' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'universalClassSlots' -> () From: ( | {
         'Category: helpers\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         proto_instance = bootstrap stub -> 'globals' -> 'nil' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'universalClassSlots' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         super_class* = bootstrap stub -> 'globals' -> 'nil' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'universalClassSlots' -> () From: ( | {
         'Category: helpers\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         this_class = bootstrap stub -> 'globals' -> 'nil' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'universalClassSlots' -> () From: ( | {
         'Category: helpers\x7fComment: The names of the type testers that this
class implements to answer true. Necessary to
have them here in addition to in class to be 
able to efficiently copy them down (for array
classes, where the type testers do not follow 
the subclass links; sigh).\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: public'
        
         type_test_class_names <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> () From: ( | {
         'Category: translating\x7fCategory: skeletons\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         universalInstanceSlots = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'universalInstanceSlots' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep classFile universalInstanceSlots.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'universalInstanceSlots' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         my_class* = bootstrap stub -> 'globals' -> 'nil' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: misc\x7fCategory: locking\x7fComment: Object that will lazily allocate a real lock.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         lazyLock = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'lazyLock' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep lazyLock.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'universalInstanceSlots' -> () From: ( | {
         'Category: helpers\x7fComment: Lazily allocated lock for this object.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (pep lazyLock)\x7fVisibility: public'
        
         my_lock <- bootstrap stub -> 'globals' -> 'pep' -> 'lazyLock' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: misc\x7fCategory: locking\x7fComment: Object that will allocate wait queue in Java object.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         waitQueueAllocator = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'waitQueueAllocator' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep waitQueueAllocator.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'universalInstanceSlots' -> () From: ( | {
         'Category: helpers\x7fComment: Lazily allocated wait queue for this object.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (pep waitQueueAllocator)\x7fVisibility: public'
        
         my_waitQ <- bootstrap stub -> 'globals' -> 'pep' -> 'waitQueueAllocator' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: stringManipulation and naming\x7fComment: Map a class name like java.lang.Object to
java_lang_Object. Note: does *not* ensure that
first letter is lower case. Also does not prevent
illegal selectors such as \'self\' and \'resend\'.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         classNameToSelectorCore: className = ( |
             res <- ''.
            | 
            className do: [|:ch|
                (ch = '/') || [ch = '.'] ifTrue: [
                    res: res, '_'.
                ] False: [
                    res: res, (selectorifyChar: ch).
                ].
            ].
            res).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: type testing\x7fComment: Map a class name to a type test selector.
E.g., \'java.lang.Object\' -> \'is_java_lang_Object\'
and   \'[[fisk\' -> \'is_Array_Array_fisk\'.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         classNameToTypeTestSelector: className = ( |
            | 
            'is_',
            (classNameToSelectorCore: (trimLAndSemicolon: className))).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: counts\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (49)\x7fVisibility: public'
        
         classes <- 49.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: ui and interaction\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         clearTimeConstraintOnUIUpdate = ( |
            | 
            lastUpdateTime: time current - minUIUpdateInterval).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: misc\x7fCategory: code generators\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         codeGenLock <- bootstrap stub -> 'globals' -> 'nil' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: debugging and options\x7fCategory: flags and params\x7fCategory: dynamic counting\x7fComment: If true, count dynamic frequencies
of invocations of methods compiled
with/without branches. The counters
are found in teh object 
\'pep dynamicCounters\'.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         countBinSrcMethods = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: debugging and options\x7fCategory: flags and params\x7fCategory: dynamic counting\x7fComment: Whether to collect execution
frequencies for the Java 
bytecodes.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         countBytecodes = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: debugging and options\x7fCategory: flags and params\x7fCategory: debugging support\x7fComment: Flag switching on/off assertion checking.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         debug = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: debugging and options\x7fCategory: routines\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         debug: bool = ( |
            | 
            (reflect: self) at: 'debug' PutContents: (reflect: bool).
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: misc\x7fCategory: locking\x7fCategory: lock debugging\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         debugLockDo: blk NLRPermitted: nlrOK = ( |
             printLockEvents = bootstrap stub -> 'globals' -> 'false' -> ().
            | 
            pepLock protect: [| e <- 0. |
                e: nextLockEventNumber.
                openLockEvents add: e.
                printLockEvents ifTrue: [
                    'pepLock given to: ' print. process this objectID print.
                    ', #' print. e print. ', ' print.
                    printOpenLockEvents.
                ].
                [|:clearLockEvent. res|
                    res: (blk onNonLocalReturn: [|:r|
                        nlrOK ifFalse: [error: 'non-local return not permitted'].
                        clearLockEvent value.
                        r.
                     ]).
                     clearLockEvent value.
                     res.
                ] value: [
                    printLockEvents ifTrue: [
                        'pepLock released by: ' print. process this objectID print.
                        ', #' print. e print. ', ' print.
                    ].
                    openLockEvents remove: e.
                    printLockEvents ifTrue: [
                        printOpenLockEvents.
                    ].
                ].
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: counts\x7fCategory: counter ops\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         decStubCount = ( |
            | 
            stubs: -1 + stubs).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: debugging and options\x7fCategory: flags and params\x7fComment: How many java bytecodes a method should have
before it is a candiate for delayed translation
(i.e., translated when it is invoked the first 
time). The value depends on whether we use branches,
since in that case translation is faster.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         delayTranslationSize = ( |
            | 
            useBranches ifTrue: 50
                         False: 15).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: misc\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         dynamicCounters = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'dynamicCounters' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep dynamicCounters.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'dynamicCounters' -> () From: ( | {
         'Category: method invocation count\x7fCategory: per code generator\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         binMethod <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'dynamicCounters' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         clear = ( |
            | 
            binMethod: 0.
            srcMethod: 0.
            counters: (pep classFile code_attribute instructions copy mapBy: 0).
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'dynamicCounters' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         counters <- bootstrap stub -> 'globals' -> 'nil' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'dynamicCounters' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         doIncCounterForOpcode: opc = ( |
            | 
            counters at: opc Put: 1 + (counters at: opc).
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'dynamicCounters' -> () From: ( | {
         'Category: method invocation count\x7fCategory: per bytecode\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         invokeinterface = ( |
            | counters at: (pep easyAccess code_attribute invokeinterface opcode)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'dynamicCounters' -> () From: ( | {
         'Category: method invocation count\x7fCategory: per bytecode\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         invokespecial = ( |
            | counters at: (pep easyAccess code_attribute invokespecial opcode)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'dynamicCounters' -> () From: ( | {
         'Category: method invocation count\x7fCategory: per bytecode\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         invokestatic = ( |
            | counters at: (pep easyAccess code_attribute invokestatic opcode)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'dynamicCounters' -> () From: ( | {
         'Category: method invocation count\x7fCategory: per bytecode\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         invokevirtual = ( |
            | 
            counters at: (pep easyAccess code_attribute invokevirtual opcode)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'dynamicCounters' -> () From: ( | {
         'Category: method invocation count\x7fCategory: combined\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         nonvirtualCalls = ( |
            | invokestatic + invokespecial).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'dynamicCounters' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'traits' -> 'oddball' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'dynamicCounters' -> () From: ( | {
         'Category: dumping\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         simpleDump = ( |
            | simpleDumpOn: stdout).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'dynamicCounters' -> () From: ( | {
         'Category: dumping\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         simpleDumpOn: file = ( |
             acc <- 0.
             s.
             total <- 0.
            | 
            s: sequence copy.
            pep classFile code_attribute instructions do: [|:in. name. count. |
                nil != in ifTrue: [
                    count: (counters at: in opcode).
                    0 != count ifTrue: [s add: in name @ count].
                ].
            ].
            s: s asVector.
            s sortBy: (|
                element: e1 Precedes: e2 = ( e1 y > e2 y).
            |).

            total: counters sum.
            file writeLine: 'Total instructions: ', total printString.
            file writeLine: ''.
            file writeLine: 'instruction           count    fraction    accumulated'.
            file writeLine: '------------------------------------------------------'.
            s do: [|:p|
                file write: (p x copySize: 17).
                acc: acc + p y.
                file write: (p y printStringPadWith: ' ' ToSize: 10), ' '.
                file write: '     ', ((((1000 * p y) / total / 10.0) printString, '%') copySize: 8).
                file writeLine: '     ', ((1000 * acc) / total / 10.0) printString, '%'.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'dynamicCounters' -> () From: ( | {
         'Category: dumping\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         simpleDumpOnFileNamed: name = ( |
             file.
            | 
            file: (os_file openForWriting: name).
            simpleDumpOn: file.
            file close.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'dynamicCounters' -> () From: ( | {
         'Category: method invocation count\x7fCategory: per code generator\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         srcMethod <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'dynamicCounters' -> () From: ( | {
         'Category: method invocation count\x7fCategory: combined\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         totalCalls = ( |
            | nonvirtualCalls + virtualCalls).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'dynamicCounters' -> () From: ( | {
         'Category: method invocation count\x7fCategory: combined\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         virtualCalls = ( |
            | invokevirtual + invokeinterface).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: misc\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         easyAccess = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'easyAccess' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep easyAccess.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'easyAccess' -> () From: ( | {
         'Category: control flow analysis\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         basicBlockProto = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'easyAccess' -> () From: ( | {
         'Category: control flow analysis\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         bbInstanceProto = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> 'basicBlockProto' -> 'bbInstanceProto' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'easyAccess' -> () From: ( | {
         'Category: code generators\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         binCodeGenerator = bootstrap stub -> 'globals' -> 'pep' -> 'binCodeGenerator' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'easyAccess' -> () From: ( | {
         'Category: control flow analysis\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         blockSetProto = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> 'blockSetProto' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'easyAccess' -> () From: ( | {
         'Category: code generators\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         bytecodeGenerator = bootstrap stub -> 'globals' -> 'pep' -> 'bytecodeGenerator' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'easyAccess' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         classFile = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'easyAccess' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         code_attribute = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'code_attribute' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'easyAccess' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         dynamicCounters = bootstrap stub -> 'globals' -> 'pep' -> 'dynamicCounters' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'easyAccess' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         exception_info = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'exception_info' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'easyAccess' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         field_info = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'field_info' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'process' -> () From: ( | {
         'Category: Java runtime\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         handlersProto = bootstrap setObjectAnnotationOf: bootstrap stub -> 'traits' -> 'process' -> 'handlersProto' -> () From: ( |
             {} = 'ModuleInfo: Creator: traits process handlersProto.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'easyAccess' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         handlersProto = bootstrap stub -> 'traits' -> 'process' -> 'handlersProto' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: misc\x7fCategory: roots\x7fComment: Holds common behavior for class instances and
other objects (such as java_null, integers and arrays).\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         javaRoot = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep javaRoot.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'easyAccess' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         javaRoot = bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'easyAccess' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         javaRootClass = bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: misc\x7fCategory: class loading\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         loadedClasses = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'loadedClasses' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep loadedClasses.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'easyAccess' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         loadedClasses = bootstrap stub -> 'globals' -> 'pep' -> 'loadedClasses' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'easyAccess' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         method_info = bootstrap stub -> 'globals' -> 'pep' -> 'classFile' -> 'method_info' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: misc\x7fComment: Self definitions of selected native methods.
Naming convention is: className_methodName.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         nativeMethods = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'nativeMethods' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep nativeMethods.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'easyAccess' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         nativeMethods = bootstrap stub -> 'globals' -> 'pep' -> 'nativeMethods' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: misc\x7fCategory: code generators\x7fCategory: prototypes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         srcCodeGenerator = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep srcCodeGenerator.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'easyAccess' -> () From: ( | {
         'Category: code generators\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         srcCodeGenerator = bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: stringManipulation and naming\x7fCategory: naming\x7fComment: Turn a primitive name like \'char\' or \'byte\' into the name
of the \"fake\" class for it.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         fakeClassNameFor: primTypeName = ( |
            | 
            'fake_', primTypeName).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: arrays\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fakeClassNamesDo: blk = ( |
            | 
            blk value: 'Z'.
            blk value: 'B'.
            blk value: 'C'.
            blk value: 'D'.
            blk value: 'F'.
            blk value: 'I'.
            blk value: 'J'.
            blk value: 'S'.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: misc\x7fCategory: class loading\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         fastRemoveAllSlotsFrom: obj = ( |
             mir.
            | 
            "Careful to preserve annotation, including creator path."
            mir: (reflect: obj).
            mir frozenDefine: mir copyRemoveAllSlots.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: stringManipulation and naming\x7fCategory: naming\x7fComment: Suffix used to make field names distinct from method names.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         fieldNameSuffix = '_'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: debugging and options\x7fCategory: flags and params\x7fCategory: branches\x7fComment: If true, force stack to be empty accross
all branches (by transferring it to local
variables).\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         flushStackForBranch = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: stringManipulation and naming\x7fCategory: naming\x7fComment: The module names non-letter first character makes
it be not filed out.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generatedModuleName = '<pep-generated>'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: ui and interaction\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         getJavaThreads = ( |
             jt.
             q.
            | 
            jt: sequence copy.
            scheduler blockSignals: [
                q: scheduler waitingQ copy.
                q addAll: scheduler suspendedQ.
                q addAll: scheduler readyQ.
            ].
            q do: [|:p|
                ((reflect: p) includesKey: 'javaThread') && 
                [nil != p javaThread] ifTrue: [
                    jt add: p.
                ].
            ].
            jt).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: ui and interaction\x7fCategory: module revision numbers\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         getRevision: module = ( |
            | 
            module revision asTokensSeparatedByWhiteSpace at: 1).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: type testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         getTypeTesters: typeTestSelectors Value: bool Category: cat = ( |
             boolMir.
             ttMir.
            | 
            boolMir: (reflect: bool).
            ttMir: (reflect: () _Clone).
            typeTestSelectors do:  [|:ttSel|
                ttMir: (ttMir copyAt: ttSel PutContents: boolMir).
                setAnnotations ifTrue: [| slot. |
                    slot: (ttMir at: ttSel).
                    slot: (slot copyHolderForModule: pep generatedModuleName).
                    nil != cat ifTrue: [slot: (slot copyHolderForCategory: cat)].
                    ttMir: slot holder.
                ].
            ].
            ttMir).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: misc\x7fCategory: class loading\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         hackRandom: cl = ( |
             hackMir.
             mir.
            | 
            warning: 'hacking method java.util.Random.nextDouble()'.
            mir: (reflect: cl).
            hackMir: (reflect: (|
                nextDouble = ( nextFloat. ).
            |)).
            mir frozenDefine: (mir copyAddSlots: hackMir).
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: debugging and options\x7fCategory: routines\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         ifTraceMutator: blk = ( |
            | 
            traceMutator ifTrue: blk. 
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: counts\x7fCategory: counter ops\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         incBytecodeCount: i = ( |
            | 
            bytecodes: bytecodes + i).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: counts\x7fCategory: counter ops\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         incClassCount = ( |
            | 
            classes: 1 + classes).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: counts\x7fCategory: counter ops\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         incLazyLockCount = ( |
            | 
            lazyLocks: 1 + lazyLocks).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: counts\x7fCategory: counter ops\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         incMethodCount = ( |
            | 
            methods: 1 + methods).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: ui and interaction\x7fCategory: module revision numbers\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         incRevision: rev = ( |
             k <- 0.
             major <- ''.
             minor <- ''.
            | 
            k: (rev keyOf: '.').
            major: (rev copyFrom: 0 UpTo: k).
            minor: (rev copyFrom: 1 + k).
            minor: (1 + minor asInteger) printString.
            major, '.', minor).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: ui and interaction\x7fCategory: module revision numbers\x7fComment: Increment revision numbers of modules 
pep and pep_runtime. This behavior should
be moved to modules, so that others may benefit 
from it.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         incRevisions = ( |
             pepRev1 <- ''.
             pepRev2 <- ''.
             qStr <- ''.
             runRev1 <- ''.
             runRev2 <- ''.
            | 
            qStr: 'OK to change revision numbers as follows?\n\n'.
            pepRev1: (getRevision: modules pep).
            runRev1: (getRevision: modules pep_runtime).
            pepRev2: (incRevision: pepRev1).
            runRev2: (incRevision: runRev1).
            qStr: qStr, 'pep:               ', pepRev1, ' -> ', pepRev2, '\n',
                        'pep_runtime: ', runRev1, ' -> ', runRev2, '\n'.
            (userQuery askYesNo: qStr) ifTrue: [
                setRevision: modules pep         To: pepRev2.
                setRevision: modules pep_runtime To: runRev2.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: counts\x7fCategory: counter ops\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         incSplitExpansion: i = ( |
            | splitExpansion: splitExpansion + i).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: counts\x7fCategory: counter ops\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         incStubCount = ( |
            | 
            stubs: 1 + stubs).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: misc\x7fCategory: initialization\x7fComment: Call this method to reset everything.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         init = ( |
            | 
            killJavaThreads.
            initLock.
            lockNoNLRDo: [
                process checkInitialJavaExcHandlers.
                setVMParams.
                lastUpdateTime: time current.
                zeroCounters.
                initSelectorifyMapping.
                classFile initStaticStuff.
                classFile code_attribute initInstructions.
                setArraySuperclassToRootClass.
                fastRemoveAllSlotsFrom: loadedClasses.
                fastRemoveAllSlotsFrom: javaRoot type_testing.
                mutatorTracer       init.
                loader              init.
                strConstructorNamer init.
                initCodeGenerators.
                javaRoot init_native_code.
                javaRootClass call_count: 0.
                javaRootClass init_globals.
                makeFakeClasses.
                dynamicCounters clear.
                clearTimeConstraintOnUIUpdate.
                updateUIPartially.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: misc\x7fCategory: code generators\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         initCodeGenerators = ( |
            | 
            binCodeGenerator  staticInit.
            bytecodeGenerator staticInit.
            codeGenLock: lock copy.
            binCodeGenerators: sequence copy.
            srcCodeGenerators: sequence copy.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: misc\x7fCategory: locking\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         initLock = ( |
             lockTrouble <- ''.
            | 
            "There is an obvious race condition in this method. But it is still better
             than having no way to inspect the lock for freeness and consistency."
            pepLock isFree not ifTrue: [
                lockTrouble: 'lock is held by process: ', pepLock holderProcess printString.
            ] False: [
                pepLock isConsistent ifFalse: [
                    lockTrouble: 'lock is in inconsistent state'.
                ].
            ].
            '' != lockTrouble ifTrue: [
                (userQuery askYesNo: lockTrouble, '\n\nreinitialize lock?') ifTrue: [
                    pepLock reinitialize.
                ] False: [
                    error: 'could not initialize pep: ', lockTrouble.
                ].
            ].
            lockEventCounter: 0.
            openLockEvents: set copy.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: stringManipulation and naming\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         initSelectorifyMapping = ( |
            | 
            selectorifyMapping: (vector copySize: '' ascii size).
            selectorifyMapping mapBy: [|:nyl. :byte|
                slowSelectorifyChar: byte asCharacter.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: debugging and options\x7fCategory: flags and params\x7fComment: Whether to generate calls to primitives
inline for simple java bytecodes like 
integer addition (when it does not overflow).\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         inlinePrims = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: stringManipulation and naming\x7fComment: Return true if all the ascii characters in this string value 
are letters or digits (note: rules out any 16-bit values since
these are escaped as \\u0789 in the ascii representation).\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isAllASCIILettersOrDigits: str = ( |
            | 
            str do: [|:ch| 
                ch isLetter || [ch isDigit] ifFalse: [^ false].
            ].
            true).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: misc\x7fComment: Used for sequencing expressions in pep-compiled
java code.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         ; x = ( |
            | self.   "Used for sequencing expressions. Like 'a. b', but 'a; b'
            returns the first value.").
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: tiny\x7fCategory: graphics context\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         adjust_tiny_gcIfFail: errBlk = ( |
             atts.
             color.
             consts.
             font.
             mask <- 0.
             xorColor.
            | 
            (java_null _Eq: the_GC) ifTrue: [  "Create new one."
                "Should catch errors here and invoke 'errBlk'."
                the_GC: (0 xlib graphicsContext 
                           createForSameScreenAs: sun_awt_tiny_TinyGraphics_pDrawable_).
            ].
            gc_owner: self.
            atts: 0 xlib xGCValues new.
            font: sun_awt_tiny_TinyGraphics_font_.
            consts: 0 xlib graphicsContext.
            font java_inst_ifnull ifFalse: [|f|
                f: (font tiny_awt_getFontIfFail: 0 nil).
                0 nil != f ifTrue: [
                    atts font: f fid.
                    mask: mask || consts gcFont.
                ].
            ].
            color: sun_awt_tiny_TinyGraphics_color_.
            color java_inst_ifnull ifTrue: [
                atts foreground: 0.
            ] False: [
                atts foreground: color awt_getColor.
                mask: mask || consts gcForeground.
            ].
            xorColor: sun_awt_tiny_TinyGraphics_xorColor_.
            xorColor java_inst_ifnull ifTrue: [
                atts function: consts gxCopy.
                mask: mask || consts gcFunction.
            ] False: [
                atts foreground: atts foreground ^^ xorColor awt_getColor.
                atts.function: consts gxXor.
                mask: mask || consts gcFunction || gcForeground.
            ].
            awt_display xChangeGC: the_GC ValueMask: mask Values: atts.
            atts delete.
            sun_awt_tiny_TinyGraphics_clip_ tiny_set_clip.
            sun_awt_tiny_TinyGraphics_touched_: java_false.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: color\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         alloc_colRed: r0 Green: g0 Blue: b0 = ( |
             b <- 0.
             col.
             g <- 0.
             pix <- 0.
             r <- 0.
            | 
            r: (clip_rgb: r0).
            g: (clip_rgb: g0).
            b: (clip_rgb: b0).
            col: 0 xlib xColor new allComponents.
            col red:   (r << 8) || r.
            col green: (g << 8) || g.
            col blue:  (b << 8) || b.
            awt_cmap allocColor: col IfFail: [
                col delete.
                ^ awt_color_match_8bit_Red: r Green: g Blue: b.
            ].
            pix: col pixel.
            transfer_to_awt_ColorsAt: pix
                              XColor: col
                               Flags: color_entry allocated_color.
            col delete.
            pix.   "Return the index.").
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: color\x7fCategory: state\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector copySize: 256)\x7fVisibility: private'
        
         awt_Colors = vector copySize: 256.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: color\x7fComment: This (long) method mirrors the awt_allocate_colors method
in color.c.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         awt_allocate_colors = ( |
            | 
            warn_mono_gray_and_24_bits.
            awt_query_colormap.
            awt_find_free_colors.
            awt_allocate_other_app_colors.
                  "Skip the gray-scale support stuff for now."
            awt_allocate_critical_colors.

            "Allocate more colors, filling the color space evenly."
            java_warning: 'awt_allocate_colors: skipping image support for now'.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: color\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         awt_allocate_critical_colors = ( |
            | 
            alloc_colRed: 255 Green: 255 Blue: 255.
            alloc_colRed: 255 Green:   0 Blue:   0.
            alloc_colRed:   0 Green: 255 Blue:   0.
            alloc_colRed:   0 Green:   0 Blue: 255.
            alloc_colRed: 255 Green: 255 Blue:   0.
            alloc_colRed: 255 Green:   0 Blue: 255.
            alloc_colRed:   0 Green: 255 Blue: 255.
            alloc_colRed: 235 Green: 235 Blue: 235.
            alloc_colRed: 224 Green: 224 Blue: 224.
            alloc_colRed: 214 Green: 214 Blue: 214.
            alloc_colRed: 192 Green: 192 Blue: 192.
            alloc_colRed: 162 Green: 162 Blue: 162.
            alloc_colRed: 128 Green: 128 Blue: 128.
            alloc_colRed: 105 Green: 105 Blue: 105.
            alloc_colRed:  64 Green:  64 Blue:  64.
            alloc_colRed:  32 Green:  32 Blue:  32.
            alloc_colRed: 255 Green: 128 Blue: 128.
            alloc_colRed: 128 Green: 255 Blue: 128.
            alloc_colRed: 128 Green: 128 Blue: 255.
            alloc_colRed: 255 Green: 255 Blue: 128.
            alloc_colRed: 255 Green: 128 Blue: 255.
            alloc_colRed: 128 Green: 255 Blue: 255. 
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: color\x7fComment: Allocate the colors that are already allocated by other app\'s.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         awt_allocate_other_app_colors = ( |
            | 
            awt_Colors do: [|:ac|
                ac flags = ac likely_color ifTrue: [
                    ac flags: ac free_color.
                    alloc_colRed: ac r Green: ac g Blue: ac b.
                ].
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: state\x7fCategory: pixels\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         awt_blackpixel.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: color\x7fCategory: state\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         awt_cmap.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: color\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         awt_color_match_8bit_Red: r0 Green: g0 Blue: b0 = ( |
             b <- 0.
             besti <- 0.
             g <- 0.
             mindist <- 536870911.
             r <- 0.
            | 
            r: (clip_rgb: r0).
            g: (clip_rgb: g0).
            b: (clip_rgb: b0).
            awt_Colors do: [|:ac. :i. d <- 0. |
                d: (ac distanceFromRed: r Green: g Blue: b).
                d < mindist ifTrue: [
                    0 = d ifTrue: [^ i].  "Just an optim."
                    besti: i.
                    mindist: d.
                ].
            ].
            besti).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: state\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         awt_depth <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: state\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (pep javaRoot java_null)\x7fVisibility: private'
        
         awt_display <- bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> 'java_null' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: color\x7fComment: Determine which colors in the color map can be allocated
and mark them in the awt_Colors array.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         awt_find_free_colors = ( |
             freecolors.
             i <- 128.
             nfree <- 0.
            | 
            freecolors: (0 vector copySize: awt_num_colors).
            [0 < i] whileTrue: [|pix|
                pix: (awt_cmap allocColorCells: i IfFail: 0 nil).
                0 nil != pix ifTrue: [ 
                    "Transfer partial result from 'pix' to 'pixVec'."
                    pix do: [|:p| 
                        freecolors at: nfree Put: p.
                        nfree: 1 + nfree.
                    ].
                ].
                i: i / 2.
            ].
            nfree do: [|:i. ac|
                ac: (awt_Colors at: i).
                ac flags: ac free_color.
            ].
            awt_cmap freeColors: (freecolors copySize: nfree).  "Deallocate."
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: color\x7fComment: The native function is defined in color.c.
The receiver should be an instance of class java.lang.Color.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         awt_getColor = ( |
             c <- 0.
             v <- 0.
            | 
            java_inst_ifnull ifTrue: [^ 0].
            c: java_awt_Color_pData_.
            c java_inst_ifne ifTrue: [^ -1 java_inst_iadd: c]. "Subtract one."

            "Hardwired 8 bit display here."
            v: java_awt_Color_value_.  "The raw color value."
            c: awt_color_match_8bit_Red: (255 java_inst_iand: (v java_inst_ishr: 16))
                                  Green: (255 java_inst_iand: (v java_inst_ishr:  8))
                                   Blue: (255 java_inst_iand: v).
            java_awt_Color_pData_: 1 + c.    "Add one."
            c).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: locking\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         awt_lock = ( |
            | 
            output_awt_lock_trace: 'awt_lock  '.
            awt_lock_owner java_inst_monitorenter.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: locking\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         awt_lock_owner <- bootstrap stub -> 'globals' -> 'nil' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: state\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (pep javaRoot java_null)\x7fVisibility: private'
        
         awt_maskgc <- bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> 'java_null' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: locking\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         awt_notify = ( |
            | 
            output_awt_lock_trace: 'awt_notify'.
            awt_lock_owner notify. 
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: color\x7fCategory: state\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         awt_num_colors <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: color\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         awt_query_colormap = ( |
             cols.
            | 
            awt_num_colors: awt_visInfo cmap_size.
            256 < awt_num_colors ifTrue: [
                java_error: 'awt_allocate_colors: unexpectedly many colors'.
            ].
            cols: (0 vector copySize: awt_num_colors).
            cols mapBy: [|:nyl. :i. xc|
                xc: 0 xlib xColor new allComponents.
                xc pixel: i.
                xc.
            ].
            awt_cmap query: cols.

            "Transfer color info to 'awt_Colors' vector."
            cols do: [|:xc. :i. ac|
                transfer_to_awt_ColorsAt: i 
                                  XColor: xc
                                   Flags: color_entry likely_color.
                xc delete.   "Free the xColor proxy."
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: state\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (pep javaRoot java_null)\x7fVisibility: private'
        
         awt_root <- bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> 'java_null' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: state\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (pep javaRoot java_null)\x7fVisibility: private'
        
         awt_screen <- bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> 'java_null' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: locking\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         awt_unlock = ( |
            | 
            output_awt_lock_trace: 'awt_unlock'.
            awt_lock_owner java_inst_monitorexit.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fComment: Use when calling out of awt native code
into Java code. \x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         awt_upcall: blk = ( |
             res.
            | 
            awt_unlock.
            res: (blk java_inst_tryCatch: 0 true With: [|:e|
                'awt_upcall got exception: ' print.
                e exception_self_printString printLine.
            ]).
            awt_lock.
            res).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: state\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (pep javaRoot java_null)\x7fVisibility: private'
        
         awt_visInfo <- bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> 'java_null' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: state\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (pep javaRoot java_null)\x7fVisibility: private'
        
         awt_visual <- bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> 'java_null' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: locking\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         awt_wait = ( |
            | 
            awt_wait: 0. "Wait forever: 0 is forever in Java.").
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: locking\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         awt_wait: timeoutMs = ( |
            | 
            output_awt_lock_trace: 'awt_wait-s'.
            awt_lock_owner wait_J: timeoutMs. 
            output_awt_lock_trace: 'awt_wait-e'.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: state\x7fCategory: pixels\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         awt_whitepixel.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: color\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         clip_rgb: v = ( |
            | 
            0   > v ifTrue: [^ 0].
            255 < v ifTrue: [^ 255].
            v).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: color\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         color_entry = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> 'color_entry' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep javaRoot color_entry.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> 'color_entry' -> () From: ( | {
         'Category: status flag\x7fCategory: flag values\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         allocated_color = 'ALLOCATED_COLOR'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> 'color_entry' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         b <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> 'color_entry' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         dist: v And: w = ( |
            | (v - w) * (v - w)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> 'color_entry' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         distanceFromRed: r0 Green: g0 Blue: b0 = ( |
            | 
            (dist: r0 And: r) + (dist: g0 And: g) + (dist: b0 And: b)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> 'color_entry' -> () From: ( | {
         'Category: status flag\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (\'FREE_COLOR\')\x7fVisibility: public'
        
         flags <- 'FREE_COLOR'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> 'color_entry' -> () From: ( | {
         'Category: status flag\x7fCategory: flag values\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         free_color = 'FREE_COLOR'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> 'color_entry' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         g <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> 'color_entry' -> () From: ( | {
         'Category: status flag\x7fCategory: flag values\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         likely_color = 'LIKELY_COLOR'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> 'color_entry' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'traits' -> 'clonable' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> 'color_entry' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         r <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: java.lang.Throwable\x7fComment: Send only to instances of class 
java.lang.Throwable or subclasses.
Will return a Self string describing the exception.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         exception_self_printString = ( |
             msg.
             selfMsg.
            | 
            msg: getMessage.
            msg java_inst_ifnull ifTrue: [selfMsg: 'null']
                                  False: [selfMsg: msg o_javaStrToSelfStr].
            'id=<', _ObjectID printString,
            '>, class=',  (0 reflect: my_class) name asTokensSeparatedByWhiteSpace last,
            ', message=', selfMsg).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: tiny\x7fCategory: graphics context\x7fComment: Set to last Drawable for which \'the_GC\' was
adjusted. (Drawable is typically a window.)
If no such Drawable exists, this slot contains java_null.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (pep javaRoot java_null)\x7fVisibility: private'
        
         gc_owner <- bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> 'java_null' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: tiny\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         if_live: obj Do: blk = ( |
            | 
            (java_null _Eq: obj) not && [obj isLive] ifTrue: blk.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         init_awt = ( |
            | 
            awt_lock_owner: java_null.
            init_awt_colors.
            init_tiny_awt).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: color\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         init_awt_colors = ( |
            | 
            awt_num_colors: 0.
            awt_Colors mapBy: [color_entry copy].
            (0 nil != awt_cmap) && [awt_cmap isLive] ifTrue: [
                awt_cmap delete.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         init_native_code = ( |
            | 
            java_file_table init.
            init_awt.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: tiny\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         init_tiny_awt = ( |
            | 
            tiny_cleanup_previous_state.
            tiny_windows removeAll.
            tiny_awt_hasNotifiedEventThread: 0 false.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: misc\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_assert: blk = ( |
            | 
            0 pep assert: blk).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: misc\x7fComment: The classes which have been loaded from java .class files
are installed here.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_classes = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> 'java_classes' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep javaRoot java_classes.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> 'java_classes' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         loaded_classes* = bootstrap stub -> 'globals' -> 'pep' -> 'loadedClasses' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> 'java_classes' -> () From: ( | {
         'Comment: This method hooks back into \'pep loader\' 
to load java classes on demand.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         undefinedSelector: sel Type: t Delegatee: d MethodHolder: m Arguments: a = ( |
            | 
            0 pep loader loadDynamicallyFrom: sel).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: misc\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_error: e = ( |
            | 
            0 error: e).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: constants\x7fCategory: booleans\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_false = 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: file support\x7fComment: Object that maintains the mapping of Java files to Self files.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_file_table = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> 'java_file_table' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep javaRoot java_file_table.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> 'java_file_table' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         closeAllFiles = ( |
             m1.
             m2.
             m3.
            | 
            m1: 0 stdin  asMirror. "Be careful not to close stdin etc."
            m2: 0 stdout asMirror.
            m3: 0 stderr asMirror.
            javaFiles mapBy: [|:file. :fd|
                0 nil != file ifTrue: [|m|
                    m: file asMirror.
                    (m != m1) && [m != m2] && [m != m3] ifTrue: [
                        file closeIfFail: [].
                    ].
                ].
                0 nil.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> 'java_file_table' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         getFileFor: fd IfFail: errBlk = ( |
            | javaFiles at: fd IfAbsent: errBlk).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> 'java_file_table' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         init = ( |
            | 
            closeAllFiles.
            registerFile: stdin.
            registerFile: stdout.
            registerFile: stderr).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> 'java_file_table' -> () From: ( | {
         'Comment: Indexed by file descriptors (integers),
returns Self file objects.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector copySize: os_file maxFiles)\x7fVisibility: private'
        
         javaFiles = vector copySize: os_file maxFiles.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> 'java_file_table' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'traits' -> 'oddball' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> 'java_file_table' -> () From: ( | {
         'Comment: Register given selfFile in file table. Return
its fileDescritor (a smallInt).\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         registerFile: selfFile = ( |
             fd <- 0.
            | 
            fd: selfFile fileDescriptor.
            javaFiles at: fd Put: selfFile.
            fd).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> 'java_file_table' -> () From: ( | {
         'Comment: Register given file and set file descriptor in java file 
descriptor object.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         registerFile: selfFile With: javaFileDescObj = ( |
            | 
            javaFileDescObj java_inst_setFileNumber: (registerFile: selfFile).
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> 'java_file_table' -> () From: ( | {
         'Comment: Opposite of \'registerFile:\'.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         removeFD: fd = ( |
            | 
            pep assert: [nil != (javaFiles at: fd)].
            pep assert: [fd != stdin  fileDescriptor].
            pep assert: [fd != stdout fileDescriptor].
            pep assert: [fd != stderr fileDescriptor].
            javaFiles at: fd Put: nil. 
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: file support\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_inst_IOException = ( |
            | 
            java_inst_athrow: java_classes class_java_io_IOException).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: file support\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_inst_IOException: msg = ( |
            | 
            java_inst_athrow: java_classes class_java_io_IOException Message: msg).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: exceptions\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_athrow = ( |
            | 
            this_process java_exception_handlers throw: self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: exceptions\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_athrow: javaclass = ( |
             exc.
            | 
            exc: javaclass java_inst_new.
            0 pep mutatorTracer keepAlive: exc Do: [exc init_obj].
            exc java_inst_athrow).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: exceptions\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_athrow: javaclass Message: selfStr = ( |
             exc.
            | 
            exc: javaclass java_inst_new.
            0 pep mutatorTracer keepAlive: exc Do: [
                exc init_obj_Ljava_lang_String: (o_selfStrToJavaStr: selfStr).
            ].
            exc java_inst_athrow).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: exceptions\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_athrowIfNull = ( |
            | 
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: exceptions\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_athrowIfNullMessage: selfStr = ( |
            | 
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: testing\x7fCategory: casts and type tests\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_checkcast: testBlk = ( |
            | 
            java_inst_ifnull || [testBlk value: self] ifTrue: [^ self].
            failed_checkcast).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: file support\x7fCategory: java.io.FileDescriptor\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_closeFileDescriptor = ( |
             fdNumber <- 0.
             selfFile.
            | 
            java_inst_athrowIfNullMessage: 'null FileDescriptor'.
            fdNumber: java_inst_getFileNumber.
            0 > fdNumber ifTrue: [^ 0].
            java_inst_setFileNumber: -2.
            "Yes, -2 is 'right'. It will store -1 in the file object
             (as does the native C code in io_md.c)."
            selfFile: (java_file_table getFileFor: fdNumber IfFail: [^ -1]).
            java_file_table removeFD: fdNumber.
            selfFile closeIfFail: [^ -1].
            0).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: file support\x7fCategory: java.io.FileDescriptor\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_getFileNumber = ( |
            | 
            -1 + java_io_FileDescriptor_fd_.
               "Subtract 1 because we added 1 when the file number was set.").
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: file support\x7fCategory: java.io.FileDescriptor\x7fComment: The receiver of this message is an instance
of class java.io.FileDescriptor.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_getSelfFileIfFail: errBlk = ( |
             fdNumber <- 0.
            | 
            fdNumber: java_inst_getFileNumber.
            java_file_table getFileFor: fdNumber IfFail: errBlk).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_if_acmpeq: r = ( |
            | _Eq: r).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_if_acmpne: r = ( |
            | (_Eq: r) not).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_ifnonnull = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_ifnull = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: testing\x7fCategory: casts and type tests\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_instanceof: testBlk = ( |
            | 
            java_inst_ifnull ifTrue: [java_zero]
                              False: [(testBlk value: self) java_inst_asJavaBoolean]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_inst_javaStringToSelfFloat: str = ( |
             res <- 0.0.
             resMir.
             selfStr <- ''.
            | 
            selfStr: str o_javaStrToSelfStr.
            res: (selfStr evalIfFail: 0 nil).
            resMir: (0 reflect: res).
            resMir isReflecteeInteger ifTrue: [
                res: res asFloat.
                resMir: (0 reflect: res).
            ].
            resMir isReflecteeFloat ifFalse: [
                java_inst_athrow: class_java_lang_NumberFormatException Message: selfStr.
            ].
            res).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: file support\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_inst_openFileName: name Flags: flags Mode: mode FileDescObj: fdObj = ( |
             selfFile.
             selfStrName <- ''.
            | 
            fdObj java_inst_athrowIfNullMessage: 'null FileDescriptor'.
            selfStrName: name o_javaStrToSelfStr.
            selfFile: (0 os_file open: selfStrName 
                                 Flags: flags
                                  Mode: mode
                                 IfFail: [java_inst_IOException: selfStrName]).
            java_file_table registerFile: selfFile With: fdObj.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: file support\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_inst_readFromFileDescObj: fdObj Into: byteArray Offset: off Length: len0 MinBytes: min = ( |
             byteArrayLen <- 0.
             bytesRead <- 0.
             len <- 0.
             selfFile.
            | 
            fdObj java_inst_athrowIfNullMessage: 'null FileDescriptor'.
            byteArray java_inst_athrowIfNull.
            byteArrayLen: byteArray java_inst_arraylength.
            (0 > off) || [off > byteArrayLen] ifTrue: [
                java_inst_athrow: class_java_lang_ArrayIndexOutOfBoundsException.
            ].
            len: len0.
            (off + len) > byteArrayLen ifTrue: [len: byteArrayLen - off].
            0 >= len ifTrue: [^ 0].
            selfFile: (fdObj java_inst_getSelfFileIfFail: [
                java_inst_IOException: 'read error'.
            ]).
            bytesRead: (selfFile readInto: byteArray Min: min Max: len At: off IfFail: [
                java_inst_IOException: 'read error'.
            ]).
            bytesRead).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: file support\x7fCategory: java.io.FileDescriptor\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_setFileNumber: n = ( |
            | 
            java_io_FileDescriptor_fd_: 1 + n. 
            "They add 1 to avoid confusion with 0 (0 in java means unitialized field).
             Too bad that it will confuse everyone else about what the
             value of fd means.").
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: file support\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_inst_statOp: opBlk IfFail: failBlk = ( |
             path.
            | 
            path: getPath.
            path java_inst_athrowIfNull.
            opBlk value: (0 os stat: path o_javaStrToSelfStr
                               IfFail: [^ failBlk value])).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: file support\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_inst_sysAccessMode: mode = ( |
            | 
            '' = (0 os access: getPath o_javaStrToSelfStr Mode: mode) ifTrue: [
                java_true.
            ] False: [
                java_false.
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: file support\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_inst_tripleSeek: selfFile Cur: curBlk End: endBlk = ( |
             cur <- 0.
             end <- 0.
            | 
            cur: (selfFile lseekOffset: 0 Whence: selfFile seek_cur IfFail: [
               java_inst_IOException.
            ]).
            end: (selfFile lseekOffset: 0 Whence: selfFile seek_end IfFail: [
                java_inst_IOException.
            ]).
            selfFile lseekOffset: cur Whence: selfFile seek_set IfFail: [
                java_inst_IOException.
            ].
            curBlk value: cur.
            endBlk value: end.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: file support\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_inst_writeToFileDescObj: fdObj From: byteArray Offset: off Length: len = ( |
             selfFile.
            | 
            fdObj java_inst_athrowIfNullMessage: 'null FileDescriptor'.
            byteArray java_inst_athrowIfNull.
            (0 > off) || [0 > len] || [(off + len) > byteArray java_inst_arraylength] ifTrue: [
                java_inst_athrow: java_classes class_java_lang_ArrayIndexOutOfBoundsException.
            ].
            selfFile: (fdObj java_inst_getSelfFileIfFail: [
                java_inst_IOException: 'write error'.
            ]).
            selfFile writeFrom: byteArray Count: len Start: off IfFail: [
                java_inst_IOException: 'write error'.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> 'java_null' -> () From: ( | {
         'Category: exceptions\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_athrow = ( |
            | 
            java_inst_athrow: java_classes class_java_lang_NullPointerException).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> 'java_null' -> () From: ( | {
         'Category: exceptions\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_athrowIfNull = ( |
            | 
            java_inst_athrow).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> 'java_null' -> () From: ( | {
         'Category: exceptions\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_athrowIfNullMessage: selfStr = ( |
            | 
            java_inst_athrow: java_classes class_java_lang_NullPointerException
                     Message: selfStr).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> 'java_null' -> () From: ( | {
         'Category: null pointer ops\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_getFileNumber = ( |
            | 
            java_inst_athrowMessage: 'null FileDescriptor').
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> 'java_null' -> () From: ( | {
         'Category: ifs and comparisons\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_ifnonnull = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> 'java_null' -> () From: ( | {
         'Category: ifs and comparisons\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_ifnull = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> 'java_null' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_instanceof: javaclass = ( |
            | 
            java_zero_int).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> 'java_null' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_root* = bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> 'java_null' -> () From: ( | {
         'Comment: For mutator tracing.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         trace_object_id = 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> 'java_null' -> () From: ( | {
         'Category: null pointer ops\x7fComment: When attempting to apply an operation to the null
pointer (e.g., clone, getClass), the result is
generally a null pointer exception.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         undefinedSelector: sel Type: t Delegatee: d MethodHolder: m Arguments: a = ( |
            | 
            java_inst_athrow).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: constants\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_one_int = 1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: constants\x7fCategory: booleans\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_true = 1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: misc\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_warning: str = ( |
            | 0 warning: str).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: constants\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_zero_boolean = ( |
            | java_false).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: constants\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_zero_byte = 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: constants\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_zero_char = 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: constants\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_zero_double = 0.0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: constants\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_zero_float = 0.0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: constants\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_zero_int = 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: constants\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_zero_long = 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: constants\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_zero_short = 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: time and date support\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         make_self_time_object_current = ( |
            | 
            java_util_Date_valueValid_ java_inst_ifne ifTrue: [set_self_time_object_from_ms]
                                                       False: [set_self_time_object_from_other].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: shortCuts and helpers\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         o_javaArrayOfByteSize: n = ( |
            | 
            java_classes class_fake__byte array_1 java_inst_newArraySize: n).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: shortCuts and helpers\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         o_javaArrayOfCharSize: n = ( |
            | 
            java_classes class_fake__char array_1 java_inst_newArraySize: n).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: shortCuts and helpers\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         o_javaArrayOfIntSize: n = ( |
            | 
            java_classes class_fake__int array_1 java_inst_newArraySize: n).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: shortCuts and helpers\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         o_javaArrayOfStringSize: n = ( |
            | 
            o_javaStringClass array_1 java_inst_newArraySize: n).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: shortCuts and helpers\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         o_javaBoolToSelfBool: javaBool = ( |
            | java_false != javaBool).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: shortCuts and helpers\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         o_javaStrFromUnicodes: uni = ( |
            | 
            0 pep mutatorTracer keepAlive: o_javaStringClass java_inst_new
                                       Do: [|:res|
                res init_obj_Array_C: uni.
                res.
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: shortCuts and helpers\x7fComment: Convert receiver (which must be an instance of
class java.lang.String) to a Self string.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         o_javaStrToSelfStr = ( |
             len <- 0.
             off <- 0.
             res.
             unicodes.
            | 
            java_inst_athrowIfNull.
            len:      length.
            off:      java_lang_String_offset_.
            unicodes: java_lang_String_value_.
            res: (0 mutableString copySize: len).
            len do: [|:i|
                res at: i PutByte: 16rFF && (unicodes java_inst_caload: i + off).
            ].
            res).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: shortCuts and helpers\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         o_javaStringClass = ( |
            | java_classes class_java_lang_String).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: shortCuts and helpers\x7fComment: Convert Self string to java char array (array of unicodes).\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         o_selfStrToJavaCharArray: selfStr = ( |
             charArray.
            | 
            charArray: o_javaArrayOfCharSize: selfStr size.
            selfStr bytesDo: [|:by. :i|
                charArray java_inst_castore: i With: by.
            ].
            charArray).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: shortCuts and helpers\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         o_selfStrToJavaStr: selfStr = ( |
            | 
            0 pep mutatorTracer keepAlive: o_javaStringClass java_inst_new Do: [|:str|
                0 pep mutatorTracer keepAlive: (o_selfStrToJavaCharArray: selfStr) Do: [|:arr|
                    str init_obj_Array_C: arr.  "This will also be the result returned."
                ].
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: locking\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         output_awt_lock_trace: op = ( |
            | 
            trace_awt_locking ifTrue: [| str <- ''. |
                str: op, ' hasNotif=', 
                     tiny_awt_hasNotifiedEventThread printString,
                     ' ', this_process printString, '\n'.
                str _StringPrint.  "Print this way to avoid context switch in
                                    the middle of printing, thereby getting
                                    garbled output."
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: tiny\x7fCategory: events\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         process_tiny_awt_events = ( |
             disp.
            | 
            disp: awt_display. 
            [0 < disp xPending] whileTrue: [
                disp nextEvent java_inst_tiny_awt_processAndDeleteEvent.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: time and date support\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         set_self_time_object_from_ms = ( |
             da <- 0.
             ms <- 0.
             msPerDay <- 0.
             val.
            | 
            val: java_util_Date_value_.
            val = self_time_object_ms_value ifTrue: [^ self].  "All is fine already."
            1 = (0 java_inst_lcmp: val) ifTrue: [
                java_inst_athrow: java_classes class_java_lang_IllegalArgumentException
                         Message: 'time out of range for timezone calculation'.
            ].
            "Avoid overflowing into slow bigInt's: use java 64 bit arithmetic
             to compute day and ms instead of just calling with day = 0."
            msPerDay: 0 time msecPerDay.
            da: (val java_inst_ldiv: msPerDay).
            ms: (val java_inst_lsub: (da java_inst_lmul: msPerDay)).
            self_time_object: (0 time copyDay: da Msec: ms).
            self_time_object_ms_value: val).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: time and date support\x7fComment: Only send this msg to an instance of java.util.Date.
Compute the ms (stored in the \'value\' field) from 
year, month, date, etc. This is similar to function 
java_util_Date_computeValue() in file java/lang/date.c.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         set_self_time_object_from_other = ( |
             t.
             val.
            | 
            t: (0 time copyYear: java_util_Date_tm__year_ + 1900
                          Month: java_util_Date_tm__mon_
                           Date: java_util_Date_tm__mday_
                          Hours: java_util_Date_tm__hour_
                        Minutes: java_util_Date_tm__min_
                        Seconds: java_util_Date_tm__sec_
                         IfFail: [|:e|
                java_inst_athrow: java_classes class_java_lang_IllegalArgumentException
                         Message: 'time out of range'.
            ]).
            val: (t msecPerDay java_inst_lmul: t day) java_inst_ladd: t msec.
            java_util_Date_value_: val.
            java_util_Date_valueValid_: java_true.
            self_time_object: t.
            self_time_object_ms_value: val.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: tiny\x7fCategory: graphics context\x7fComment: java_null or a graphicsContext object.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (pep javaRoot java_null)\x7fVisibility: private'
        
         the_GC <- bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> 'java_null' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: shortCuts and helpers\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         this_process = ( |
            | 0 process this).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: java.lang.Thread\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         thread_clearSelfProcess = ( |
            | 
            thread_setSelfProcess: 0.  "Cleanup self process pointer. Now 'isAlive'
                                        will respond false to the liveness of this
                                        thread.").
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: java.lang.Thread\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         thread_getSelfProcessIfNone: noneBlk = ( |
             selfProcess.
            | 
            selfProcess: java_lang_Thread_PrivateInfo_.
            (0 _Eq: selfProcess) ifTrue: noneBlk False: [selfProcess]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: java.lang.Thread\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         thread_hasSelfProcess = ( |
            | 
            thread_getSelfProcessIfNone: [^ 0 false].
            0 true).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: java.lang.Thread\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         thread_setSelfProcess: sp = ( |
            | 
            java_lang_Thread_PrivateInfo_: sp).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: fonts\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         tiny_anyfoundry = '*'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: fonts\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         tiny_anystyle = '*-*'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: fonts\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         tiny_awt_FontNameIfFail: errBlk = ( |
             family.
             res.
             s <- ''.
            | 
            family: java_awt_Font_family_.
            family java_inst_ifnull ifTrue: [^ errBlk value].
            s: family o_javaStrToSelfStr.
            0 case if: ['Helvetica' = s] Then: [
                res: 'adobe' & 'helvetica' & tiny_isolatin1.
            ] If: ['TimesRoman' = s] Then: [
                res: 'adobe' & 'times' & tiny_isolatin1.
            ] If: ['Courier' = s] Then: [
                res: 'adobe' & 'courier' & tiny_isolatin1.
            ] If: ['Dialog' = s] Then: [
                res: 'b&h' & 'lucida' & tiny_isolatin1.
            ] If: ['DialogInput' = s] Then: [
                res: 'b&h' & 'lucidatypewriter' & tiny_isolatin1.
            ] If: ['ZapfDingbats' = s] Then: [
                res: 'itc' & 'zapfdingbats' & '*-*'.
            ] Else: [
                res: tiny_defaultfoundry & tiny_defaultfontname & tiny_isolatin1.
            ].
            res asVector).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: tiny\x7fCategory: atoms\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         tiny_awt_cleanup_atoms = ( |
            | 
            if_live: tiny_awt_wm_delete_window_atom Do: [tiny_awt_wm_delete_window_atom kill].
            if_live: tiny_awt_wm_protocols_atom     Do: [tiny_awt_wm_protocols_atom     kill].
            tiny_awt_wm_delete_window_atom: java_null.
            tiny_awt_wm_protocols_atom:     java_null.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: tiny\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         tiny_awt_drawString: vect0 Is16Bits: bits16 Offset: off Length: len0 X: x Y: y = ( |
             gc.
             len <- 0.
             tx <- 0.
             ty <- 0.
             vect.
             vlen <- 0.
             win.
            | 
            awt_lock.
            tiny_getWin: [|:w| win: w]
                     GC: [|:g| gc: g]
                 IfFail: [^ awt_unlock].
            vlen: vect0 java_inst_arraylength.
            off java_inst_iflt || [len0 java_inst_iflt] ||
            ((off java_inst_iadd: len0) java_inst_if_icmpgt: vlen) ifTrue: [
                awt_unlock.
                java_inst_athrow: java_classes class_java_lang_ArrayIndexOutOfBoundsException.
            ].
            "Draw at most 1024 chars. (Why? Ole)."
            (1024 java_inst_if_icmple: len0) ifTrue: [len: 1024]
                                              False: [len: len0].
            (len java_inst_if_icmpeq: vlen) ifTrue: [
                vect: vect0.
            ] False: [
                "Need to copy 'vect0' since not all of it is used."
                vect: (vect0 java_inst_newArraySize: len).
                vect java_inst_arraycopyPos: 0 SrcArray: vect0 Pos: off Len: len.
            ].
            tx: (true_x: x).
            ty: (true_y: y).
            bits16 ifTrue: [
                awt_display xDrawString16: win GC: gc X: tx Y: ty StringVector: vect.
            ] False: [
                awt_display xDrawString: win GC: gc X: tx Y: ty String: vect.
            ].
            awt_unlock).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: fonts\x7fComment: Call only on a java.awt.Font object.
See tiny_Font.c for corresponding native method.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         tiny_awt_getFontIfFail: errBlk = ( |
             above <- 0.
             below <- 0.
             encoding <- ''.
             foundry <- ''.
             height <- 0.
             name <- ''.
             oheight <- 0.
             r.
             style <- ''.
             xfont0.
            | 
            java_inst_ifnull ifTrue: [^ errBlk value].
            xfont0: java_awt_Font_pData_.
            (0 _Eq: xfont0) ifFalse: [^ xfont0].
            r: (tiny_awt_FontNameIfFail: [^ errBlk value]).
            foundry:  (r at: 0).
            name:     (r at: 1).
            encoding: (r at: 2).
            style:    tiny_awt_get_style_string.
            oheight:  java_awt_Font_size_.
            height:   oheight.
            [| fstr <- ''. xfont. |
                fstr: '-', foundry, '-', name, '-', style, '-*-*-',
                      height printString, '-*-*-*-*-*-', encoding.
                xfont: (awt_display loadFont: fstr IfFail: 0 nil).
                0 nil != xfont ifTrue: [
                    0 <= xfont ascent ifTrue: [
                        java_awt_Font_pData_: xfont. 
                        ^ xfont.
                    ].
                    "This is an X bug workaround: retry when font has negative ascent."
                    xfont delete.
                ].
                "We couldn't find the font. Try to find an alternate by searching for heights
                 above and below our preferred height. If we still can't find a font, repeat 
                 the algorithm using misc-fixed as the font. If we still fail, give up."
                above = below ifTrue: [
                    above: 1 + above.
                    height: oheight + above.
                ] False: [
                    below: 1 + below.
                    4 < below ifTrue: [  "Too big a size mismatch."
                        (name = tiny_defaultfontname) &&
                        [style = tiny_anystyle] ifTrue: [^ errBlk value]. "Give up."
                    ].
                    name:     tiny_defaultfontname.
                    foundry:  tiny_defaultfoundry.
                    height:   oheight.
                    style:    tiny_anystyle.
                    encoding: tiny_isolatin1.
                    above:    0.
                    below:    0.
                ].
            ] loop.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: fonts\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         tiny_awt_get_style_string = ( |
             style <- 0.
            | 
            style: java_awt_Font_style_.
            style = java_awt_Font_ITALIC_ ifTrue: [^ 'medium-i'].
            style = java_awt_Font_BOLD_   ifTrue: [^ 'bold-r'].
            style = (java_awt_Font_ITALIC_ java_inst_iadd: java_awt_Font_BOLD_)
                                          ifTrue: [^ 'bold-i'].
            'medium-r').
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: tiny\x7fCategory: events\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: private'
        
         tiny_awt_hasNotifiedEventThread <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: tiny\x7fCategory: atoms\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         tiny_awt_init_atoms = ( |
            | 
            tiny_awt_wm_delete_window_atom: (awt_display internAtom: 'WM_DELETE_WINDOW').
            tiny_awt_wm_protocols_atom:     (awt_display internAtom: 'WM_PROTOCOLS').
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: tiny\x7fCategory: events\x7fComment: This method is a cleaned-up (and appropriately renamed)
version of the tiny_flush() function in .../tiny_Toolkit.c.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         tiny_awt_notifyEventThread = ( |
            | 
            java_assert: [awt_lock_owner my_lock isHeldByThisProcess].
            tiny_awt_hasNotifiedEventThread ifFalse: [
                tiny_awt_hasNotifiedEventThread: 0 true.
                awt_notify.   "Notify event thread - he will do flush."
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: tiny\x7fCategory: atoms\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (pep javaRoot java_null)\x7fVisibility: public'
        
         tiny_awt_wm_delete_window_atom <- bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> 'java_null' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: tiny\x7fCategory: atoms\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (pep javaRoot java_null)\x7fVisibility: public'
        
         tiny_awt_wm_protocols_atom <- bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> 'java_null' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: tiny\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         tiny_cleanup_previous_state = ( |
            | 
            tiny_awt_cleanup_atoms.

            if_live: awt_root Do: [awt_root delete].
            awt_root: java_null.

            if_live: awt_visInfo Do: [awt_visInfo delete].
            awt_visInfo: java_null.

            if_live: the_GC Do: [the_GC delete].
            the_GC: java_null.
            gc_owner: java_null.

            if_live: awt_maskgc Do: [awt_maskgc delete].
            awt_maskgc: java_null.

            "Kill window last -- other proxies depend on it to get killed."
            if_live: awt_display Do: [awt_display close].
            awt_display: java_null.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: fonts\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         tiny_defaultfontname = 'fixed'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: fonts\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         tiny_defaultfoundry = 'misc'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: tiny\x7fCategory: window registration\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         tiny_find: win IfAbsent: aBlk = ( |
            | 
            tiny_windows at: win windowDescriptor IfAbsent: aBlk).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: tiny\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         tiny_getDrawableIfNone: noneBlk = ( |
             d.
            | 
            d: sun_awt_tiny_TinyGraphics_pDrawable_.
            (0 _Eq: d) ifTrue: noneBlk False: [d]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: tiny\x7fCategory: graphics context\x7fComment: Send to an object of type sun.awt.tiny.TinyGraphics.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         tiny_getWin: winBlk GC: gcBlk IfFail: errBlk = ( |
             win.
            | 
            win: (tiny_getDrawableIfNone: [^ errBlk value]).
            (java_null _Eq: the_GC) || [(self _Eq: gc_owner) not] ||
            [sun_awt_tiny_TinyGraphics_touched_ java_inst_ifne] ifTrue: [
                adjust_tiny_gcIfFail: [^ errBlk value].
            ].
            tiny_awt_notifyEventThread.
            winBlk value: win.
            gcBlk  value: the_GC.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: tiny\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         tiny_getXWindow = ( |
            | tiny_getXWindowIfNone: [java_error: 'should be there']).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: tiny\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         tiny_getXWindowIfNone: noneBlk = ( |
             xwin.
            | 
            xwin: sun_awt_tiny_TinyWindow_xid_.
            (0 _Eq: xwin) ifTrue: noneBlk False: [xwin]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: fonts\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         tiny_isolatin1 = 'iso8859-1'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: tiny\x7fCategory: window registration\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         tiny_register = ( |
            | 
            java_assert: [tiny_window_hasBeenCreated].
            tiny_windows at: sun_awt_tiny_TinyWindow_xid_ windowDescriptor
                        Put: self.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: tiny\x7fCategory: graphics context\x7fComment: Send to instance of java.awt.Rectangle or java_null.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         tiny_set_clip = ( |
            | 
            java_inst_ifnull ifTrue: [
                awt_display xSetClipMask: the_GC Pixmap: 0 xlib pixmap nullPixmap.
            ] False: [| x <- 0. y <- 0. w <- 0. h <- 0. |
                x: java_awt_Rectangle_x_.
                y: java_awt_Rectangle_y_.
                w: java_awt_Rectangle_width_.
                h: java_awt_Rectangle_height_.
                w java_inst_iflt ifTrue: [w: 0].
                h java_inst_iflt ifTrue: [h: 0].
                awt_display xSetClipRectangle: the_GC X: x Y: y Width: w Height: h.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: tiny\x7fCategory: window registration\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         tiny_unregister = ( |
            | 
            java_assert: [tiny_window_hasBeenCreated].
            tiny_windows removeKey: sun_awt_tiny_TinyWindow_xid_ windowDescriptor.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: tiny\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         tiny_window_hasBeenCreated = ( |
            | 
            tiny_getXWindowIfNone: [^ 0 false].
            0 true).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: tiny\x7fCategory: window registration\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (dictionary copy)\x7fVisibility: private'
        
         tiny_windows = dictionary copy.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: locking\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         trace_awt_locking = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: color\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         transfer_to_awt_ColorsAt: idx XColor: xColor Flags: f = ( |
             ac.
            | 
            ac: (awt_Colors at: idx).
            ac flags: f.
            ac r: xColor red   >> 8.
            ac g: xColor green >> 8.
            ac b: xColor blue  >> 8.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: tiny\x7fCategory: coordinate shifts\x7fComment: Send to instance of sun.awt.tiny.TinyGraphics.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         true_x: x = ( |
            | x java_inst_iadd: sun_awt_tiny_TinyGraphics_originX_).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: tiny\x7fCategory: coordinate shifts\x7fComment: Send to instance of sun.awt.tiny.TinyGraphics.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         true_y: y = ( |
            | y java_inst_iadd: sun_awt_tiny_TinyGraphics_originY_).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: misc\x7fComment: All the negative (false) type testers
go here.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         type_testing* = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> 'type_testing' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep javaRoot type_testing.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> () From: ( | {
         'Category: native support\x7fCategory: awt\x7fCategory: color\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         warn_mono_gray_and_24_bits = ( |
             e.
            | 
            e: (0 os environmentAt: 'FORCEMONO' IfFail: 0 nil).
            0 nil != e ifTrue: [java_warning: 'Pep-awt: ignoring FORCEMONO'].
            e: (0 os environmentAt: 'FORCEGRAY' IfFail: 0 nil).
            0 nil != e ifTrue: [java_warning: 'Pep-awt: ignoring FORCEGRAY'].
            24 = awt_depth ifTrue: [java_warning: 'Pep-awt: 24 bit screen not supported'].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: threads and execution\x7fComment: Run an applet (by prefixing the applet viewer class).\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         a_run: cmdLine = ( |
            | 
            "Really need to do better than the following;
             command line args are not in the right place
             after the prefixing."
            o_run: 'sun.applet.AppletViewer ', cmdLine).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: threads and execution\x7fCategory: Java VM global vars\x7fComment: Corresponds to global variable ActiveThreadCount in Java VM.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         active_threadCount <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: array support\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         array_build_mixing* = bootstrap stub -> 'globals' -> 'pep' -> 'arrayBuildMixin' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: threads and execution\x7fComment: Turn currently executing Self process into a (!) main Java thread (i.e., 
a thread like the first thread that the Java VM creates).
This method resembles the code found in file javai.c (method start_java())
and file threadruntime.c (methods InitializeClassThread(), InitializeMainThread()).\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         become_mainThread = ( |
             mainGroup.
             mainThread.
             mt.
             systemGroup.
            | 
            "Create initial thread. In Java VM's start_java() function, this obj. is
             called 'self' (yeah)."
            mt: 0 pep mutatorTracer.

            mainThread: java_classes class_java_lang_Thread java_inst_new. 
            "Can't call init_obj on 'mainThread' yet. Duplicate Java VM's initialization code."

            mt keepAlive: mainThread Do: [
                systemGroup: java_classes class_java_lang_ThreadGroup java_inst_new.
                mt keepAlive: systemGroup Do: [
                    systemGroup init_obj.

                    "For now pretend that mainThread is in system thread group (dictates Java VM)."
                    mainThread java_lang_Thread_group_: systemGroup.
                ].
                link_javaThread: mainThread SelfProcess: this_process.
                mainThread java_lang_Thread_priority_: mainThread java_lang_Thread_NORM__PRIORITY_.

                mainThread java_lang_Thread_name_: (o_selfStrToJavaCharArray: 'main').

                "Create and initialize main thread group. This code accesses the thread group
                 of the current thread (recall it was set to 'systemGroup' above)."
                mainGroup: java_classes class_java_lang_ThreadGroup java_inst_new.

                mt keepAlive: mainGroup Do: [
                    mainGroup init_obj_Ljava_lang_String: (o_selfStrToJavaStr: 'main').

                    "Now (finally) initialize main thread object. Will add it to the main group."
                    mainThread init_obj_Ljava_lang_ThreadGroup: mainGroup
                                           Ljava_lang_Runnable: java_null
                                             Ljava_lang_String: (o_selfStrToJavaStr: 'main').
                ].
                java_classes class_java_lang_System initializeSystemClass.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: tracing and counting\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         call_count <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: synchronization\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         check_holds_monitor = ( |
            | 
            my_lock isHeldByThisProcess ifFalse: [
                java_inst_athrow: java_classes class_java_lang_IllegalMonitorStateException
                         Message: 'current thread not owner'.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: threads and execution\x7fCategory: command line options\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         extract_property_def: tokens IfFail: errBlk = ( |
             def <- ''.
             eqPos <- 0.
             name <- ''.
             val <- ''.
            | 
            java_assert: ['-D' isPrefixOf: tokens first].
            def: (tokens removeFirst copyFrom: 2).
            eqPos: (def keyOf: '=' IfAbsent: [
                'mal-formed property definition: -D' print.
                def printLine.
                ^ errBlk value.
            ]).
            name: (def copySize: eqPos).
            val:  (def copyFrom: 1 + eqPos).
            user_props at: name Put: val.

            "We added a new property, so force reload of 'system properties'
             (which will get the properties out of 'user_props')."
            0 pep loader hasBeenLoadedClassSystem ifTrue: [
                java_classes class_java_lang_System java_lang_System_props_: java_null.
            ].    
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: casts and type tests\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         failed_checkcast = ( |
            | 
            java_inst_athrow: java_classes class_java_lang_ClassCastException
                     Message: class_name).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: threads and execution\x7fCategory: command line options\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         handle_options: cmdTokens IfFail: errBlk = ( |
             opt <- ''.
            | 
            [opt: cmdTokens first. '-' = opt first] whileTrue: [
                ('-v' = opt) || ['-verbose' = opt] ifTrue: [
                    0 pep verbose: true.
                    'verbose: ' print. 0 pep verbose printLine.
                ] False: [
                ('-classpath' = opt) ifTrue: [
                    cmdTokens removeFirst.
                    cmdTokens isEmpty ifTrue: [error: 'missing class path'].
                    0 pep loader classPath: cmdTokens first.
                ] False: [
                ('-D' isPrefixOf: opt) ifTrue: [
                    extract_property_def: cmdTokens IfFail: [^ errBlk value].
                ] False: [
                    java_error: 'unknown option: ', opt.
                ]]].
                cmdTokens removeFirst.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: tracing and counting\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         inc_opc: opc = ( |
            | 
            0 pep dynamicCounters doIncCounterForOpcode: opc.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: threads and execution\x7fCategory: Java VM global vars\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         init_globals = ( |
            | 
            active_threadCount: 0.
            user_threadCount:   0.
            user_props removeAll.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: array support\x7fComment: The native method in the java virtual machine that
copies arrays fails with \'ArrayStoreException\' if the
source or destination array is a regular (non-array) 
object. In the pep implementation we catch non-array
destinations efficiently by having all non-array objects
implement the array copy method but fail it with the 
appropriate exception.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_arraycopyPos: dstPos SrcArray: srcArray Pos: srcPos Len: len = ( |
            | 
            "OK, so we know something went wrong. An attempt was made to do an
             array copy operation with a non-array as the destination. We must,
             however, be sure to throw the exact same exception as the Java virtual
             machine, so before we complain about the non-array destination, we
             must check that the srcArray is non-null (since this is what the Java
             virtual machine does)."
            srcArray java_inst_athrowIfNull.
            java_inst_athrow: java_classes class_java_lang_ArrayStoreException).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: synchronization\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_monitorenter = ( |
            | 
            my_lock lockMe: self.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: synchronization\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_monitorexit = ( |
            | 
            java_assert: [my_lock isHeldByThisProcess].
            my_lock unlock.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_new = ( |
            | 
            0 pep ifTraceMutator: [
                ^ 0 pep mutatorTracer new: proto_instance _Clone.
            ].
            proto_instance _Clone).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: block clone switch support\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_inst_switch: i Through: dict Blocks: blks = ( |
            | 
            java_inst_switch: (dict at: i IfAbsent: [blks size])
                     Blocks: blks).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: block clone switch support\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_inst_switch_vect: i Blocks: blks = ( |
            | run_block: (blks at: i IfAbsent: [blks last])).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_root* = bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: threads and execution\x7fComment: Caller must verify that the \'jt\' does not already have an
underlying Self process.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         link_javaThread: jt SelfProcess: sp = ( |
            | 
            "Use 'PrivateInfo' field to link to underlying process object (like Java VM)."
            0 nil != sp javaThread ifTrue: [
                java_error: 'already running as a Java process: ', sp objectID.
            ].
            java_assert: [jt thread_hasSelfProcess not].
            jt thread_setSelfProcess: sp.
            sp javaThread: jt.  "Set backpointer."
            sp java_interrupted: java_false.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: threads and execution\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         newSelfProcess_startMsg: msg SysThread: sysBool CauseOfBirth: cob = ( |
             selfProcess.
            | 
            selfProcess: (0 process copySend: msg CauseOfBirth: cob).
            selfProcess initJavaExcHandlers.
            selfProcess java_system_thread: sysBool.
            active_threadCount: 1 + active_threadCount.
            sysBool ifFalse: [user_threadCount: 1 + user_threadCount].
            selfProcess).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: threads and execution\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         o_main = ( |
            | o_main: '').
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: threads and execution\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         o_main: cmdLineArgs = ( |
            | 
            o_main_cmdTokens: cmdLineArgs asTokensSeparatedByWhiteSpace).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: threads and execution\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         o_main_cmdTokens: cmdTokens = ( |
             arr.
             i <- 0.
             proc.
            | 
            proc: this_process.
            proc initJavaExcHandlers.
            arr: (o_javaArrayOfStringSize: cmdTokens size).
            0 pep mutatorTracer keepAlive: arr Do: [
                cmdTokens do: [|:t|
                    arr java_inst_aastore: i With: (o_selfStrToJavaStr: t).
                    i: 1 + i.
                ].
                main_Array_Ljava_lang_String: arr.   "Run the program."
            ].
            proc checkJavaExcHandlerBalance.
            proc clearJavaExcHandlers.
            0 pep updateUIFully.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: threads and execution\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         o_run: cmdLine = ( |
             async <- bootstrap stub -> 'globals' -> 'false' -> ().
             cline <- ''.
             cmdTokens.
             cob <- ''.
             mainClass.
            | 
            cline: cmdLine shrinkwrapped.
            cline isEmpty not && ['&' = cline last] ifTrue: [
                cline: cline copyWithoutLast.
                async: 0 true.
            ].
            cmdTokens: cline asTokensSeparatedByWhiteSpace.
            cmdTokens isEmpty ifTrue: [^ print_usage].
            handle_options: cmdTokens IfFail: [^ print_usage].
            mainClass: (0 pep loader getClassNamed: cmdTokens removeFirst
                                            IfFail: 0 raiseError).
            cob: mainClass class_name, '::main'.
            async ifTrue: [|msg|
                msg: 0 message copy.
                msg receiver:  mainClass.
                msg selector:  'run_javaThreadInCurrentSelfProcess:'.
                msg arguments: (0 vector copySize: 1 FillingWith: cmdTokens).
                (newSelfProcess_startMsg: msg
                               SysThread: 0 false
                            CauseOfBirth: cob) resume.
            ] False: [
                this_process causeOfBirth: cob.
                mainClass run_javaThreadInCurrentSelfProcess: cmdTokens.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: Java VM stuff\x7fComment: This slot corresponds to the \'obj_flags\' slot
defined by the Java VM.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         obj_flags = 'T_NORMAL_OBJECT'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: threads and execution\x7fCategory: command line options\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         print_usage = ( |
            | 
            'usage:     run [-options] class [&]' printLine.
            'where options include:' printLine.
            '  -v -verbose                 turn on verbose mode' printLine.
            '  -classpath dir1:dir2:...    set dirs in which to look for classes' printLine.
            '  -Dname=value                set property (may repeat this option)' printLine.
            'The optional trailing \'&\' specifies asynchronous execution.' printLine.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: block clone switch support\x7fComment: Turn raw block into closure and evaluate it.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         run_block: block = ( |
            | 
            block _TurnIntoClosure value. "Prim not implemented currently.").
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: threads and execution\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         run_javaThreadInCurrentSelfProcess: cmdTokens = ( |
            | 
            become_mainThread.
            o_main_cmdTokens: cmdTokens.
            "... wait for all spawned threads to die ... "
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: threads and execution\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         signal_thread_exit = ( |
            | 
            "Potential problem: we should hold the lock to the current object (which is
             the exiting thread) before we are allowed to call notifyAll. We may be unable
             to get that lock! For now just print a warning. Will have to write a more
             powerful version of 'notifyAll' that can run without the lock held. Watch out
             for race conditions! Also watch out not to signal the wait queue so many times
             that the next wait becomes a no-op (would happen if my_waitQ count > 0)."
            my_lock isAvailable not ifTrue: [
                'warning: may be unable to acquire lock to signal thread death!' printLine.
            ].
            sync_do: [java_lang_Object_notifyAll].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: synchronization\x7fComment: Used by synchronized methods.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         sync_do: blk = ( |
             exc.
             gotExc <- bootstrap stub -> 'globals' -> 'false' -> ().
             res.
            | 
            res: (my_lock protectNoNLR: [
                "We intercept exceptions to cleanup up locks. Currently, 
                 this is cheaper than using unwind protect."
                blk java_inst_tryCatch: 0 true With: [|:e| exc: e. gotExc: 0 true].
            ] Me: self).
            gotExc ifTrue: [exc java_inst_athrow.  "Repropagate exception."]
                    False: [res]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         test_PingPong = ( |
            | 
            o_run: 'PingPong').
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         test_applet = ( |
            | 
            a_run: '/home/collection3/java/java-1.0.1/demo/Blink/example1.html').
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         test_applet1 = ( |
            | a_run: '/home/collection3/java/java-1.0.1/demo/NervousText/example1.html').
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         test_jeeves = ( |
            | 
            o_run: '-DServerRoot=/home/collection3/java/Jeeves0.3 -noasyngc ',
                   'sun.server.http.HttpServer').
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         test_jit = ( |
            | 
            0 pep loader getClassNamed: 'jit.tree.Expression'.
            o_run: 'jit.main.Main -S -verbose Task.class').
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         test_xengine = ( |
            | 
            a_run: '/home/agesen/local-java/xengine/JavaRPM.html').
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: threads and execution\x7fComment: The first routine called by a new thread. Note that the
very first thread created by the Java virtual machine does
not execute this method. Instead it executes \'become_mainThread\'.
See thread.c for corresponding C function ThreadRT0().\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         thread_RT0 = ( |
             count <- 3.
            | 
            java_lang_Thread_stillborn_ java_inst_ifne ifTrue: [
                "This thread was asked to exit before it got to run."
                thread_exit.
            ].

            "Run the thread, but look out for exceptions."
            [run] java_inst_tryCatch: 0 true With: [|:e|
                java_lang_Thread_group_ java_inst_ifnonnull ifTrue: [
                    [java_lang_Thread_group_
                       uncaughtException_Ljava_lang_Thread: self
                                      Ljava_lang_Throwable: e.
                    ] java_inst_tryCatch: 0 true With: [].
                ].
            ].
            java_lang_Thread_stillborn_: 1.
            "We are done. Let the thread cleanup."
            [java_lang_Thread_group_ java_inst_ifnonnull && [count > 0]] whileTrue: [
                count: count - 1.
                "Keep calling 'exit' until we get released from the thread group
                 (ignore any exceptions). Try up to three times!"
                [exit] java_inst_tryCatch: 0 true With: [].
            ].
            java_assert: [
                java_lang_Thread_group_ java_inst_ifnull. "This assertion seems suspect, but this
                                                          is what the Java VM does at this point."
            ].
            thread_exit).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: threads and execution\x7fComment: Corresponds to the function threadExit/sysThreadExit (there is a 
#define threadExit sysThreadExit). 
sysThreadExit() is defined in threads_md.c.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         thread_exit = ( |
             selfProcess.
            | 
            selfProcess: (thread_getSelfProcessIfNone: [java_error: 'should have Self process']).

            pep debug ifTrue: [
              "message conditionalized for Ken Cavenaugh's ORB test -- dmu"
              'calling thread_exit, java thread: <' print. _ObjectID print. '>' print.
              ', self process: ' print. selfProcess objectID print.
              ' = ' print. selfProcess printLine.
            ].

            signal_thread_exit. 
            thread_clearSelfProcess.  
            selfProcess abort.   "Do this last, since it may be the currently executing thread
                                  (which would then not get past the abort action in this method."
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: tracing and counting\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         trace_call: str Direction: d = ( |
            | 
            trace_file write: d, ' '.
            trace_file writeLine: str.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: tracing and counting\x7fCategory: mutator tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         trace_callReturnLocals: i1 Stack: i2 Body: blk = ( |
             frameID <- 0.
             keptAlive.
             pr.
            | 
            frameID: (0 pep mutatorTracer callLocals: i1 Stack: i2).
            pr: this_process.
            keptAlive: pr trace_keptAlive.    "Empty it for the duration of the call."
            keptAlive isEmpty ifFalse: [pr trace_keptAlive: keptAlive copyRemoveAll].
            blk onReturn: [
                pr trace_keptAlive: keptAlive.
                0 pep mutatorTracer return: frameID.
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: tracing and counting\x7fCategory: mutator tracing\x7fComment: The superclass of java.lang.Object has class id 0
by convention. This slot implements the convention.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         trace_class_id = 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: tracing and counting\x7fCategory: mutator tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         trace_exp: o1 = ( |
            | 
            this_process trace_expStack add: o1.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: tracing and counting\x7fCategory: mutator tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         trace_exps = ( |
            | 
            0 pep mutatorTracer expStack. 
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: tracing and counting\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         trace_file = ( |
            | 
            [^ 0 shell b] value. 
            0 stdout).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: tracing and counting\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         trace_method_entry: str = ( |
            | 
            call_count: 1 + call_count.
            0 false ifTrue: [
                trace_file write: call_count printString, ': '.
            ].
            trace_call: str Direction: '>'.
            -1 = call_count ifTrue: [
                0 halt.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: tracing and counting\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         trace_method_exit: str = ( |
            | 
            trace_call: str Direction: '<').
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: tracing and counting\x7fCategory: mutator tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         trace_no_of_refs = 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: tracing and counting\x7fCategory: mutator tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         trace_no_of_static_refs = 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: tracing and counting\x7fCategory: mutator tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         trace_no_of_vals = 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: tracing and counting\x7fCategory: mutator tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         trace_number_of_first_instance_field = 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: tracing and counting\x7fCategory: mutator tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         trace_putfield: fieldNumber StoredObj: obj = ( |
            | 
            0 pep mutatorTracer putfieldIn: self
                                    Number: fieldNumber
                                 StoredObj: obj.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: tracing and counting\x7fCategory: mutator tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         trace_putstatic: fieldNumber StoredObj: obj = ( |
            | 
            0 pep mutatorTracer putstaticIn: self
                                     Number: fieldNumber
                                  StoredObj: obj.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: tracing and counting\x7fCategory: mutator tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         trace_storeObj: obj InLocal: localVarNumber = ( |
            | 
            0 pep mutatorTracer setlocal: localVarNumber To: obj.
            obj.   "Return stored object. We need it for doing actual store!").
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: threads and execution\x7fCategory: Java VM global vars\x7fComment: Command-lined defined properties are accumulated here
over several runs. So the n\'th java program will see 
the properties defined for the previous n-1 programs,
unlike when the programs run on the regular Java Vm.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (sharedDictionary copyRemoveAll)\x7fVisibility: private'
        
         user_props = sharedDictionary copyRemoveAll.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'javaRootClass' -> () From: ( | {
         'Category: threads and execution\x7fCategory: Java VM global vars\x7fComment: Corresponds to global variable UserThreadCount in Java VM.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         user_threadCount <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: ui and interaction\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         killJavaThreads = ( |
             jt.
            | 
            jt: getJavaThreads.
            jt isEmpty ifFalse: [| jtStr <- ''. |
                jt do: [|:p|
                    jtStr: jtStr, p objectID, p printString, '\n'.
                ].
                jtStr: jtStr, '\n\nOK to kill the above processes?'.
                (userQuery askYesNo: jtStr) ifTrue: [
                    jt do: [|:p| p abort].
                ].
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: ui and interaction\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         lastUpdateTime <- bootstrap stub -> 'globals' -> 'nil' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'lazyLock' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isAvailable = ( |
            | lck isAvailable).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'lazyLock' -> () From: ( | {
         'Comment: A lazy lock cannot be held.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isHeldByThisProcess = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'lazyLock' -> () From: ( | {
         'Comment: For short-term locking while a real lock is allocated.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (lock copy)\x7fVisibility: private'
        
         lck = lock copy.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'lazyLock' -> () From: ( | {
         'Comment: Allocate a lock object, acquire it, and 
install it in \'me\'.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         lockMe: me = ( |
            | 
            "Could consider doing this in a scheduler-critical
             region instead of using semaphore (for efficiency)."
            lck protectNoNLR: [
                "me class_name printLine."
                pep incLazyLockCount.
                me my_lock: lock copy lock.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'lazyLock' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'traits' -> 'oddball' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'lazyLock' -> () From: ( | {
         'Comment: Allocate lock for \'me\' and while holding this lock evaluate \'blk\'.
Then unlock.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         protect: blk Me: me = ( |
            | 
            "Careful not to hold 'lck' the lazyLock's lock for the
             duration of this method. Would create a bottleneck."
            lockMe: me.
            blk onReturn: [me my_lock unlock]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'lazyLock' -> () From: ( | {
         'Comment: Like \'protect:Me:\' but \'blk\' is not allowed to cause
a non-local return.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         protectNoNLR: blk Me: me = ( |
             res.
            | 
            "Careful not to hold 'lck' the lazyLock's lock for the
             duration of this method. Would create a bottleneck."
            lockMe: me.
            res: blk value.
            me my_lock unlock.
            res).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'lazyLock' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         protectSafeNLR: blk Me: me = ( |
             res.
            | 
            lockMe: me.
            res: (blk value: [me my_lock unlock]).
            my my_lock unlock.
            res).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: counts\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (55)\x7fVisibility: public'
        
         lazyLocks <- 55.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: misc\x7fCategory: class loading\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         loader = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'loader' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep loader.
\x7fIsComplete: '.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'loader' -> () From: ( | {
         'Category: class access\x7fCategory: loading\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         abortLoadOf: className = ( |
             cn <- ''.
            | 
            "Something has already gone wrong, so be sure
             this abort routine is robust."
            cn: (standardizeClassName: className).
            loadInProgress remove: cn IfAbsent: [].
            unloadClassNamed: cn        IfFail: [].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'loader' -> () From: ( | {
         'Category: class access\x7fCategory: getting\x7fComment: Warning: does no locking, may throw java exception (when running
class initializer).\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         basicGetClassNamed: className IfFail: errBlk = ( |
             res.
             slot.
             sn.
            | 
            sn: (classNameToSelfSlotName: className).
            slot: ((reflect: pep loadedClasses) at: sn IfAbsent: nil).
            nil != slot ifTrue: [^ slot contents reflectee].
            loadClassNamed: (standardizeClassName: className) 
                    IfFail: errBlk).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'loader' -> () From: ( | {
         'Category: classNameOps\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         checkClassName: className = ( |
            | 
            pep assert: [(standardizeClassName: className) = className].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'loader' -> () From: ( | {
         'Category: fileNaming\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         classFileExtension = '.class'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'loader' -> () From: ( | {
         'Category: classNameOps\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         classNameToSelfSlotName: className = ( |
            | 
            pep lockNoNLRDo: [| res <- ''. stdClassName <- '' |
                stdClassName: (standardizeClassName: className).
                res: 'class_', (pep classNameToSelectorCore: stdClassName).
                slotName2ClassName at: res Put: stdClassName.
                res.
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'loader' -> () From: ( | {
         'Category: classNameOps\x7fCategory: important class names\x7fComment: The name of class java.lang.Object,
after all the mangling has taken place.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (\'\')\x7fVisibility: public'
        
         classObjectName <- ''.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'loader' -> () From: ( | {
         'Category: fileNaming\x7fComment: Where in the file system to search for class files.
This is the value of the environment variable CLASSPATH.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (\'.:/home/agesen/self/objects/applications/pep/local-java:/home/wilhelm/java/jit/java/lib/classes:/home/wilhelm/java\')\x7fVisibility: public'
        
         classPath <- '.:/home/agesen/self/objects/applications/pep/local-java:/home/wilhelm/java/jit/java/lib/classes:/home/wilhelm/java'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'loader' -> () From: ( | {
         'Category: classNameOps\x7fCategory: important class names\x7fComment: The name of class java.lang.String,
after all the mangling has taken place.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (\'\')\x7fVisibility: public'
        
         classStringName <- ''.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'loader' -> () From: ( | {
         'Category: classNameOps\x7fCategory: important class names\x7fComment: The name of class java.lang.String,
after all the mangling has taken place.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (\'\')\x7fVisibility: public'
        
         classSystemName <- ''.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'loader' -> () From: ( | {
         'Category: class access\x7fCategory: getting\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         defineClassFromBytes: bytes IfFail: errBlk = ( |
             cf.
             className <- ''.
            | 
            cf: (pep classFile copyBytes: bytes IfFail: [|:e|
                ^ errBlk value: 'class definition failed: ', e.
            ]).
            className: cf classNameWithSlashes.
            (loadInProgress includes: className) ifTrue: [
                ^ errBlk value: 'class ', className, ' is currently being loaded'.
            ].
            (hasBeenLoaded: className) ifTrue: [
                warning: 'pep loader: loading class again: ', className.
            ].
            loadInProgress add: className.
            cf translateIfFail: [|:e| abortLoadOf: className. ^ errBlk value: e].
            loadInProgress remove: className.
            "Now that the class has been installed, it is safe to initialize it."
            [cf initializeClass] java_inst_tryCatch: true With: [|:exception|
                abortLoadOf: className.
                exception java_inst_athrow.  "Rethrow the exception."
            ].
            "Good place to test this critical equation, since here we are finally done
             fiddling with the class."
            pep assert: [(reflect: cf theClass this_class) = (reflect: cf theClass)].
            cf theClass).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'loader' -> () From: ( | {
         'Category: class access\x7fCategory: loading\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         getBytesForClassNamed: className FullName: fnBlk IfFail: errBlk = ( |
             b <- bootstrap stub -> 'globals' -> 'byteVector' -> ().
             file.
             fullName <- ''.
            | 
            ('Loading Java Class: ',className) printLine.
            fullName: (os_file locate: className, classFileExtension
                                InPath: classPath 
                                IfFail: [|:e| ^ errBlk value: e]).
            file: (os_file openForReading: fullName IfFail: [|:e| ^ errBlk value: e]).
            b: file contentsAsByteVector.
            fnBlk value: fullName.
            file close.
            b).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'loader' -> () From: ( | {
         'Category: class access\x7fCategory: getting\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         getClassNamed: className = ( |
            | getClassNamed: className IfFail: raiseError).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'loader' -> () From: ( | {
         'Category: class access\x7fCategory: getting\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         getClassNamed: className IfFail: errBlk = ( |
             errorString <- ''.
             res.
            | 
            process this initJavaExcHandlers.
            pep lockNoNLRDo: [| slot. sn |
                "OK to use 'lockNoNLRDo:' since we catch java 
                 exceptions thrown by class initialization."
                [   res: (basicGetClassNamed: className
                                      IfFail: [|:e| errorString: e. nil]).
                ] java_inst_tryCatch: true With: [|:exc|
                    errorString: exc exception_self_printString.
                ].
            ].
            "Important: we must release lock before calling error handler!
             For all we know, the error handler may take a long time or 
             never even return."
            nil = res ifTrue: [errBlk value: errorString]
                       False: [res]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'loader' -> () From: ( | {
         'Category: class access\x7fCategory: testing\x7fComment: Return true iff the given class has been loaded.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         hasBeenLoaded: className = ( |
            | 
            hasBeenLoadedMangledName: (classNameToSelfSlotName: className)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'loader' -> () From: ( | {
         'Category: class access\x7fCategory: testing\x7fComment: Return true iff class java.lang.String has been loaded.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         hasBeenLoadedClassString = ( |
            | 
            hasBeenLoadedMangledName: classStringName).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'loader' -> () From: ( | {
         'Category: class access\x7fCategory: testing\x7fComment: Return true iff class java.lang.System has been loaded.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         hasBeenLoadedClassSystem = ( |
            | 
            hasBeenLoadedMangledName: classSystemName).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'loader' -> () From: ( | {
         'Category: class access\x7fCategory: testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         hasBeenLoadedMangledName: slotName = ( |
            | 
            (reflect: pep loadedClasses) includesKey: slotName).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'loader' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         init = ( |
            | 
            pep lockNoNLRDo: [
                classPath: (os environmentAt: 'CLASSPATH' IfFail: '').
                loadInProgress     removeAll.
                slotName2ClassName removeAll.
                initClassNameMapping.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'loader' -> () From: ( | {
         'Category: classNameOps\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         initClassNameMapping = ( |
            | 
            "Some class names are referenced by 'handwritten' code (virtual machine
             code, essentially). They must be mapped to slot names explicitly. For
             other classes, this mapping happens automatically, as the referring
             class is compiled."
            classNameToSelfSlotName: 'java.io.IOException'.
            classNameToSelfSlotName: 'java.lang.ArithmeticException'.
            classNameToSelfSlotName: 'java.lang.ArrayIndexOutOfBoundsException'.
            classNameToSelfSlotName: 'java.lang.ArrayStoreException'.
            classNameToSelfSlotName: 'java.lang.Class'.
            classNameToSelfSlotName: 'java.lang.ClassCastException'.
            classNameToSelfSlotName: 'java.lang.ClassFormatError'.
            classNameToSelfSlotName: 'java.lang.ClassNotFoundException'.
            classNameToSelfSlotName: 'java.lang.CloneNotSupportedException'.
            classNameToSelfSlotName: 'java.lang.IllegalAccessException'.
            classNameToSelfSlotName: 'java.lang.IllegalArgumentException'.
            classNameToSelfSlotName: 'java.lang.IllegalMonitorStateException'.
            classNameToSelfSlotName: 'java.lang.IllegalThreadStateException'.
            classNameToSelfSlotName: 'java.lang.InstantiationException'.
            classNameToSelfSlotName: 'java.lang.InternalError'.
            classNameToSelfSlotName: 'java.lang.NegativeArraySizeException'.
            classNameToSelfSlotName: 'java.lang.NullPointerException'.
            classObjectName: (classNameToSelfSlotName: 'java.lang.Object').
            classNameToSelfSlotName: 'java.lang.OutOfMemoryError'.
            classStringName: (classNameToSelfSlotName: 'java.lang.String').
            classSystemName: (classNameToSelfSlotName: 'java.lang.System').
            classNameToSelfSlotName: 'java.lang.Thread'.
            classNameToSelfSlotName: 'java.lang.ThreadGroup'.
            classNameToSelfSlotName: 'java.net.BindException'.
            classNameToSelfSlotName: 'java.net.SocketException'.
            classNameToSelfSlotName: 'java.net.UnknownHostException'.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'loader' -> () From: ( | {
         'Category: class access\x7fCategory: loading\x7fComment: Error handling in this method needs to be cleaned up.
Currently it is torn between calling \'errBlk\' and throwing
java exceptions. Should probably just do the latter, but it
may not be possible at all times (e.g., when loading the
exception classes).\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         loadClassNamed: className IfFail: errBlk = ( |
             bytes.
             cl.
             fullName <- ''.
            | 
            pep assertHoldsPepLock.
            checkClassName: className.
            pep assert: [(hasBeenLoaded: className) not].
            bytes: (getBytesForClassNamed: className
                                 FullName: [|:fn| fullName: fn]
                                   IfFail: [|:e| ^ errBlk value: e]).
            cl: (defineClassFromBytes: bytes IfFail: [|:e| ^ errBlk value: e]).
            pep assert: [hasBeenLoaded: className].
            pep trace: ['[Loaded ', fullName, ']\n'].
            cl).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'loader' -> () From: ( | {
         'Category: class access\x7fCategory: loading\x7fComment: The dynamic loader calls this method to load classes on
dempand.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         loadDynamicallyFrom: sel = ( |
            | 
            pep lockDo: [| className <- '' |
                "Use 'lockDo:' to be safe against java exceptions passing through."
                className: (selfSlotNameToClassName: sel).
                basicGetClassNamed: className
                            IfFail: [|:e| error: e]. "Should turn into exception
                                                      and propagate exception! %%%"
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'loader' -> () From: ( | {
         'Category: class access\x7fCategory: loading\x7fComment: Set of classes currently being loaded and translated. Can\'t allow access to
their java class object, as it is still being constructed using \'copyAddSlots:\',
i.e., it\'s identity is not fixed yet.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (set copy)\x7fVisibility: private'
        
         loadInProgress = set copy.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'loader' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'traits' -> 'oddball' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'loader' -> () From: ( | {
         'Category: classNameOps\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         pathChar = '/'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'loader' -> () From: ( | {
         'Category: class access\x7fCategory: reloading\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         reloadClassNamed: className = ( |
            | reloadClassNamed: className IfFail: raiseError).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'loader' -> () From: ( | {
         'Category: class access\x7fCategory: reloading\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         reloadClassNamed: className IfFail: errBlk = ( |
             errorString <- ''.
             res.
            | 
            pep lockNoNLRDo: [|cn|
                cn: (standardizeClassName: className).
                (loadInProgress includes: cn) ifTrue: [
                    errorString: 'class currently being loaded (cannot reload)'.
                ] False: [
                    abortLoadOf: cn.   "This will clean up and unload, if already loaded."
                    res: (getClassNamed: cn IfFail: [|:e| errorString: e. nil]).
                ].
            ].
            "Never call errBlk while lock is held!"
            nil = res ifTrue: [errBlk value: errorString]
                       False: [res]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'loader' -> () From: ( | {
         'Category: classNameOps\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         selfSlotNameToClassName: sel = ( |
            | 
            pep lockNoNLRDo: [
                slotName2ClassName at: sel IfAbsent: [
                    "OK to call 'error:' while holding lock, since this
                     code should never fail (if it does, something is really
                     broken)."
                    error: 'cannot map to class name: ', sel.
                ].
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'loader' -> () From: ( | {
         'Category: classNameOps\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (dictionary copy)\x7fVisibility: private'
        
         slotName2ClassName = dictionary copy.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'loader' -> () From: ( | {
         'Category: classNameOps\x7fComment: Ensure that the pathname separator in \'className\' is \'/\'). 
This method really shouldn\'t be necessary, but there is 
some confusion on the form of this separator.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         standardizeClassName: className = ( |
            | 
            className copyMutable mapBy: [|:ch|
                '.' = ch ifTrue: pathChar False: ch.
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'loader' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         test = ( |
            | 
            1 do: [(getClassNamed: 'PepTest') o_main].
            1 do: [(getClassNamed: 'richards.all') o_main].
            1 do: [(getClassNamed: 'BenchmarkRunner') o_main].
            1 do: [(getClassNamed: 'Benchmark') o_main].
            1 do: [(getClassNamed: 'Paraffins') o_main: '16'].
            1 do: [(getClassNamed: 'sun.tools.javac.Main') o_main:
                    '/home/agesen/local-java/code/Richards.java'].
            1 do: [(getClassNamed: 'SRI.Jack.Main') o_main:
                    '/home/collection3/java/Jack/doc/Jack.jack'].
            pep javaRootClass test_jit.
            "1 do: [(getClassNamed: 'ArraySpeed') o_main]."
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'loader' -> () From: ( | {
         'Category: class access\x7fCategory: unloading\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         unloadClassNamed: className = ( |
            | unloadClassNamed: className IfFail: raiseError).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'loader' -> () From: ( | {
         'Category: class access\x7fCategory: unloading\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         unloadClassNamed: className IfFail: errBlk = ( |
             errorString <- ''.
            | 
            pep lockNoNLRDo: [|sn|
                sn: (classNameToSelfSlotName: className).
                (reflect: pep loadedClasses) removeSlot: sn
                                                 IfFail: [|:e| errorString: e].
                sn = classObjectName ifTrue: [pep setArraySuperclassToRootClass].
            ].
            '' != errorString ifTrue: [errBlk value: errorString]
                               False: [self]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: misc\x7fCategory: locking\x7fComment: While holding the lock on Pep, evaluate blk.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         lockDo: blk = ( |
            | 
            debug ifTrue: [debugLockDo: blk NLRPermitted: true]
                   False: [pepLock protect: blk]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: misc\x7fCategory: locking\x7fCategory: lock debugging\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         lockEventCounter <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: misc\x7fCategory: locking\x7fComment: Like \'lockDo:\' but \'blk\' is not allowed
to cause non-local return through this
frame.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         lockNoNLRDo: blk = ( |
            | 
            debug ifTrue: [debugLockDo: blk NLRPermitted: false]
                   False: [pepLock protectNoNLR: blk]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: arrays\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         makeFakeClassFor: typeLetter = ( |
             mir.
            | 
            mir: (pep classFile getUniversalClassSlotsClassName: typeLetter
                                                     IsAbstract: false
                                                    IsInterface: false
                                                 InterfaceNames: vector
                                                     Superclass: superclassOfFakeClass
                                             TypeTestClassNames: (vector copySize: 1
                                                                      FillingWith: typeLetter)).
            mir: (mir copyAddSlots: (reflect: arrayBuildMixinSlot)).
            ifTraceMutator: [|cl|
                cl: mir reflectee.
                cl trace_no_of_refs: 0.
                cl trace_no_of_vals: 1.
                cl trace_no_of_static_refs: 0.
                cl trace_number_of_first_instance_field: 0.
                mutatorTracer defclass: cl.
            ].
            mir reflectee).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: arrays\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         makeFakeClasses = ( |
             cats <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
            | 
            cats: (vector copySize: 1 FillingWith: 'Fake classes').
            fakeClassNamesDo: [|:typeLetter. longName. fakeClass. |
                fakeClass: (makeFakeClassFor: typeLetter).
                longName: (signatureMixin typeNameForPrimitiveTypeLetter: typeLetter).
                atName: (fakeClassNameFor: longName) InstallClass: fakeClass Categories: cats.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: stringManipulation and naming\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         makeLowerCase: str = ( |
            | 
            str first isLowerCase ifTrue: str False: ['a_', str]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: stringManipulation and naming\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         makeUpperCase: str = ( |
            | 
            str first isUpperCase ifTrue: str False: ['A_', str]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: stringManipulation and naming\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         mapToValidSelfSelector: str ForceLowerCase: force = ( |
             res <- ''.
            | 
            res: (avoidIllegalSelectors: (selectorifyString: str)).
            force ifTrue: [res: (makeLowerCase: res)].
            res).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: counts\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (539)\x7fVisibility: public'
        
         methods <- 539.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: ui and interaction\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         minUIUpdateInterval = 1000.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: misc\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         mutatorTracer = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep mutatorTracer.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( | {
         'Category: start and stop tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         beginTrace = ( |
            | 
            beginTraceOn: (os_file openForWriting: defaultName).
            eventCounter: 0).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( | {
         'Category: start and stop tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         beginTraceOn: file = ( |
            | 
            endTrace.
            traceFile: file.
            'Tracing on ' print. 
            file name printLine.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( | {
         'Category: tracing\x7fCategory: primitive i/o operations\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         bufIdx <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( | {
         'Category: tracing\x7fCategory: primitive i/o operations\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         bufSize <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( | {
         'Category: tracing\x7fCategory: primitive i/o operations\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         buffer.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( | {
         'Category: tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         callLocals: i1 Stack: i2 = ( |
            | 
            incSyncDo: [| frameID <- 0. |
                lastWasExpStack: false.
                frameID: getNextStackFrameID.
                traceKey: 7.
                traceShort: stackNumber.
                traceFrameID: frameID.
                traceShort: i1.
                traceShort: i2.
                frameID.
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( | {
         'Category: tracing\x7fComment: Invoke one of the blocks, depending on what
\'obj\' is. Note: java_null counts as an instance!\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         case: obj Primitive: primBlk Instance: instBlk Class: classBlk = ( |
             mir.
            | 
            mir: (reflect: obj).
            mir isReflecteeInteger || [mir isReflecteeFloat] ||
            [(mir includesKey: 'parent') && 
             [(obj parent _Eq: int32 parent) || [obj parent _Eq: int64 parent]]] ifTrue: [
                ^ primBlk value.
            ].
            (mir includesKey: 'this_class') ifTrue: [^ classBlk value].
            instBlk value).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( | {
         'Category: IDs\x7fCategory: counters\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         classIDCounter <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( | {
         'Category: tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         constantPool: obj = ( |
            | 
            incSyncDo: [
                lastWasExpStack: false.
                traceKey: 11.
                traceInt: obj trace_object_id.
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( | {
         'Category: tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         defarrayclass: arrayclass Baseclass: baseclass Dimensions: dims = ( |
            | 
            incSyncDo: [
                lastWasExpStack: false.
                arrayclass trace_class_id: getNextClassID.
                traceKey:   1.
                traceShort: arrayclass trace_class_id.
                traceShort: baseclass trace_class_id.
                traceByte:  dims.
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( | {
         'Category: start and stop tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         defaultName = ( |
            | 
            traceCounter: 1 + traceCounter.
            'trace_', traceCounter printString).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( | {
         'Category: tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         defclass: class = ( |
            | 
            incSyncDo: [
                lastWasExpStack: false.
                class trace_class_id: getNextClassID.
                traceKey:    0.
                traceShort:  class trace_class_id.
                traceString: class class_name.
                traceShort:  class super_class trace_class_id.
                traceShort:  class trace_no_of_refs + class trace_number_of_first_instance_field.
                traceShort:  class trace_no_of_vals.
                traceShort:  class trace_no_of_static_refs.
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( | {
         'Category: start and stop tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         endTrace = ( |
            | 
            (nil != traceFile) && [traceFile isLive] ifTrue: [
                flush.
                traceFile != stdout ifTrue: [traceFile close].
                'Closed trace file ' print.
                traceFile name print.
                ' (' print. eventCounter print. ' events)' printLine.
            ].
            traceFile: nil.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         eventCounter <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( | {
         'Category: tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         expStack = ( |
             expStack.
             filteredExpStack.
             n <- 0.
             pr.
            | 
            "Note: figure out if anything needs to be done _without_ 
             claiming the lock (to keep the event counter in sync with
             the tracer)."
            pr: process this.
            expStack: pr trace_expStack.
            filteredExpStack: sequence copy.
            expStack do: [|:obj|
                case: obj Primitive: []
                           Instance: [filteredExpStack add: obj trace_object_id]
                              Class: [].
            ].
            pr trace_keptAlive do: [|:obj| filteredExpStack add: obj trace_object_id].
            n: filteredExpStack size.
            0 < n ifTrue: [
                incSyncDo: [
                    traceKey:   10.
                    traceShort: stackNumber.
                    traceShort: n.
                    filteredExpStack do: [|:obj_id| traceInt: obj_id].
                ].
            ].
            lastWasExpStack: true.
            expStack removeAll.   "Done with them for this time."
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( | {
         'Category: tracing\x7fCategory: primitive i/o operations\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         flush = ( |
            | 
            flushFor: maxSmallInt).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( | {
         'Category: tracing\x7fCategory: primitive i/o operations\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         flushFor: size = ( |
            | 
            (bufIdx + size) > bufSize ifTrue: [
                (nil != traceFile) && [0 != bufIdx] ifTrue: [
                    traceFile writeFrom: buffer Count: bufIdx.
                ].
                bufIdx: 0.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( | {
         'Category: IDs\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         getNextClassID = ( |
            | 
            "Note: 0 is reserved to mean 'has no superclass'.
             Only used by class java.lang.Object."
            classIDCounter: 1 + classIDCounter.
            classIDCounter).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( | {
         'Category: IDs\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         getNextObjectID = ( |
            | 
            "Note: 0 is reserved to mean 'java_null'."
            objectIDCounter: 1 + objectIDCounter.
            objectIDCounter).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( | {
         'Category: IDs\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         getNextProcessID = ( |
             id <- 0.
            | 
            id: processIDCounter.
            processIDCounter: 1 + id.
            id).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( | {
         'Category: IDs\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         getNextStackFrameID = ( |
             id <- 0.
            | 
            id: stackFrameIDCounter.
            stackFrameIDCounter: 1 + id.
            id).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( | {
         'Category: locking\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         incSyncDo: blk = ( |
            | 
            syncDo: [|res|
                res: blk value.
                eventCounter: 1 + eventCounter.
                res.
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         init = ( |
            | 
            pep traceMutator ifTrue: [
                endTrace.
                lock reinitialize.
                resetIDs.
                initBuffer.
                beginTrace.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( | {
         'Category: tracing\x7fCategory: primitive i/o operations\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         initBuffer = ( |
            | 
            bufSize: 4096.
            buffer: (byteVector copySize: bufSize).
            bufIdx: 0.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( | {
         'Category: tracing\x7fComment: For tracing objects that live only in native (Self) code
(temporarily).\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         keepAlive: obj Do: blk = ( |
             added <- bootstrap stub -> 'globals' -> 'false' -> ().
            | 
            pep traceMutator ifFalse: [^ blk value: obj].   "The easy/fast case."
            case: obj Primitive: []
                       Instance: [process this trace_keptAlive add: obj. added: true]
                          Class: [].
            [blk value: obj] onReturn: [
                added ifTrue: [
                    (obj _Eq: process this trace_keptAlive removeLast) ifFalse: [
                        error: 'bad "trace_keptAlive" stack'.
                    ].
                ].
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( | {
         'Category: tracing\x7fCategory: primitive i/o operations\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         lastWasExpStack = ( |
            | process this trace_lastWasExpStack).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( | {
         'Category: tracing\x7fCategory: primitive i/o operations\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         lastWasExpStack: bool = ( |
            | 
            process this trace_lastWasExpStack: bool.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( | {
         'Category: locking\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         lock = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> 'lock' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep mutatorTracer lock.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( | {
         'Category: tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         new: obj = ( |
            | 
            "Needed for native code which does not call 'expStack' before creating
             objects (and which may have objects on the 'trace_keepAlive' stack)."
            lastWasExpStack ifFalse: [expStack].
            incSyncDo: [
                lastWasExpStack: false.
                obj trace_object_id: getNextObjectID.
                traceKey:   2.
                traceShort: stackNumber.
                traceInt:   obj trace_object_id.
                traceShort: obj my_class trace_class_id.
            ].
            obj).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( | {
         'Category: tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         newarray: array = ( |
            | 
            "Needed for native code which does not call 'expStack' before creating
             objects (and which may have objects on the 'trace_keepAlive' stack)."
            lastWasExpStack ifFalse: [expStack].
            incSyncDo: [
                lastWasExpStack: false.
                array trace_object_id: getNextObjectID.
                traceKey:   3.
                traceShort: stackNumber.
                traceInt:   array trace_object_id.
                traceShort: array my_class trace_class_id.
                traceInt:   array java_inst_arraylength.
            ].
            array).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( | {
         'Category: IDs\x7fCategory: counters\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         objectIDCounter <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'traits' -> 'oddball' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( | {
         'Category: IDs\x7fCategory: counters\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         processIDCounter <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( | {
         'Category: tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         putarray: arrayObj Idx: idx StoredObj: rhsObj = ( |
            | 
            incSyncDo: [
                lastWasExpStack: false.
                traceKey: 6.
                traceInt: arrayObj trace_object_id.
                traceInt: idx.
                traceInt: rhsObj trace_object_id.
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( | {
         'Category: tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         putfieldIn: lhsObj Number: fieldNumber StoredObj: rhsObj = ( |
            | 
            incSyncDo: [
                lastWasExpStack: false.
                traceKey:   4.
                traceInt:   lhsObj trace_object_id.
                traceShort: fieldNumber.
                traceInt:   rhsObj trace_object_id.
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( | {
         'Category: tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         putstaticIn: class Number: fieldNumber StoredObj: rhsObj = ( |
            | 
            incSyncDo: [
                lastWasExpStack: false.
                traceKey:   5.
                traceShort: class trace_class_id.
                traceShort: fieldNumber.
                traceInt:   rhsObj trace_object_id.
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( | {
         'Category: IDs\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         resetIDs = ( |
            | 
            classIDCounter:      0.
            objectIDCounter:     0.
            processIDCounter:    0.
            stackFrameIDCounter: 0.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( | {
         'Category: tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         return: frameID = ( |
            | 
            incSyncDo: [
                lastWasExpStack: false.
                traceKey:     8.
                traceShort:   stackNumber.
                traceFrameID: frameID.
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( | {
         'Category: tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         setlocal: localVarNumber To: obj = ( |
            | 
            incSyncDo: [| id <- -1. |
                lastWasExpStack: false.
                case: obj Primitive: []
                           Instance: [id: obj trace_object_id]
                              Class: [error: 'should not get class here'].
                traceKey:   9.
                traceShort: stackNumber.
                traceShort: localVarNumber.
                traceInt:   id.
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( | {
         'Category: IDs\x7fCategory: counters\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         stackFrameIDCounter <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( | {
         'Category: tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         stackNumber = ( |
            | 
            process this trace_process_id).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( | {
         'Category: locking\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         syncDo: blk = ( |
            | lock protectNoNLR: blk).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( | {
         'Category: tracing\x7fCategory: primitive i/o operations\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         traceByte: i = ( |
            | 
            flushFor: 1.
            buffer at: bufIdx Put: i.
            bufIdx: 1 + bufIdx.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( | {
         'Category: start and stop tracing\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         traceCounter <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( | {
         'Category: tracing\x7fCategory: primitive i/o operations\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         traceFile.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( | {
         'Category: tracing\x7fCategory: primitive i/o operations\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         traceFrameID: i = ( |
            | 
            traceByte: 127 && i.   "Should suffice with a byte for error catching.
                                    And may as well keep it positive, even in Java land
                                    so that it is nicer to read dumps.").
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( | {
         'Category: tracing\x7fCategory: primitive i/o operations\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         traceInt: i = ( |
            | 
            flushFor: 4.
            buffer javaAt: bufIdx PutInt: i.
            bufIdx: 4 + bufIdx.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( | {
         'Category: tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         traceKey: k = ( |
            | 
            traceByte: k).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( | {
         'Category: tracing\x7fCategory: primitive i/o operations\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         traceShort: i = ( |
            | 
            flushFor: 2.
            buffer javaAt: bufIdx PutShort: i.
            bufIdx: 2 + bufIdx.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'mutatorTracer' -> () From: ( | {
         'Category: tracing\x7fCategory: primitive i/o operations\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         traceString: str = ( |
             s <- 0.
            | 
            (str includes: '\n') ifTrue: [error: 'string contains \\n'].
            s: str size.
            flushFor: 1 + s.
            buffer copyRangeDstPos: bufIdx SrcArray: str SrcPos: 0 Len: s.
            bufIdx: bufIdx + s.
            traceByte: '\n' asByte).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'nameMixin' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         nameAsAscii = ( |
            | 
            nameAsStruct asciiValue).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'nameMixin' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         nameAsSelector = ( |
            | 
            pep mapToValidSelfSelector: nameAsAscii
                        ForceLowerCase: false).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'nameMixin' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         nameAsStruct = ( |
            | 
            constantNumber: name_index).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: misc\x7fCategory: code generators\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         newCodeGenerator: usingBranches = ( |
            | 
            usingBranches ifTrue: [binCodeGenerator copy]
                           False: [srcCodeGenerator copy]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: misc\x7fCategory: locking\x7fCategory: lock debugging\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         nextLockEventNumber = ( |
            | 
            lockEventCounter: 1 + lockEventCounter. 
            lockEventCounter).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: misc\x7fCategory: locking\x7fComment: A lock-like object, which does no synchronization!\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         noOpLock = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'noOpLock' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep noOpLock.
\x7fIsComplete: '.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'noOpLock' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         lock = ( |
            | self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'noOpLock' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'traits' -> 'oddball' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'noOpLock' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         printString = 'noOpLock'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'noOpLock' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         protect: blk = ( |
            | blk value).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'noOpLock' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         protectNoNLR: blk = ( |
            | blk value).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'noOpLock' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         unlock = ( |
            | self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: ui and interaction\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         okToUpdateUI = ( |
             now.
            | 
            updateUI && [scheduler isRunning] && [desktop isOpen] ifFalse: [^ false].
            now: time current.
            1000 > (now - lastUpdateTime) ifTrue: [^ false].
            lastUpdateTime: now.
            true).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: misc\x7fCategory: locking\x7fCategory: lock debugging\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         openLockEvents <- bootstrap stub -> 'globals' -> 'nil' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'traits' -> 'oddball' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: misc\x7fCategory: locking\x7fComment: Global lock for pep operations
(including loading of classes).\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (lock copy)\x7fVisibility: private'
        
         pepLock = lock copy.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: stringManipulation and naming\x7fCategory: naming\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         prefix = 'java_inst_'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: misc\x7fCategory: code generators\x7fCategory: prototypes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         prettyPrinter = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'prettyPrinter' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep prettyPrinter.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'prettyPrinter' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         copy = ( |
            | resend.copy init).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'prettyPrinter' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         getBranchSelector: op Literal: lit = ( |
             sel <- '__BranchIndexedBy:'.
            | 
            'branchAlways'  = op ifTrue: [^ '__BranchTo:'].
            'branchIfTrue'  = op ifTrue: [^ '__BranchIfTrueTo:'].
            'branchIfFalse' = op ifTrue: [^ '__BranchIfFalseTo:'].
            'branchIndexed' != op ifTrue: [error: 'bad branch operation: ', op].
            lit size do: [|:i| 
                0 = i ifTrue: [sel: sel, 'To:']
                       False: [sel: sel, 'And:'].
            ].
            sel).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'prettyPrinter' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         init = ( |
            | 
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'prettyPrinter' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'traits' -> 'clonable' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'prettyPrinter' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         ppBranch: op Literal: lit Using: srcGen = ( |
             brSel <- ''.
            | 
            brSel: (getBranchSelector: op Literal: lit).
            op = 'branchIndexed' ifTrue: [
                "The literal is a vector of bytecode indices."
                lit do: [|:pc| srcGen pushInteger: pc].
            ] False: [
                "The literal is a single bytecode index."
                srcGen pushInteger: lit.
            ].
            (selector copyStr: brSel) numberOfArguments = srcGen stackSize ifTrue: [
                "There was nothing on the stack when we begun, so use implicit self send."
                srcGen generateImplicitSelfSend: brSel.
                srcGen pop1.   "Pop 'result' of branch send so stack is now again empty."
            ] False: [
                srcGen generateSend: brSel.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'prettyPrinter' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         ppImplicitSelfSend: sel Delegatee: del Locals: locals Using: srcGen = ( |
            | 
            nil = del ifTrue: [
                (locals includes: sel) ifTrue: [
                    srcGen pushLocalVarNamed: sel.
                ] False: [
                    srcGen generateImplicitSelfSend: sel.
                ].
            ] False: [
                srcGen generateSend: sel DelegateThrough: del.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'prettyPrinter' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         ppLabelDef: bci Using: srcGen = ( |
             pushedOne <- bootstrap stub -> 'globals' -> 'false' -> ().
             sel = '__DefineLabel:'.
            | 
            srcGen pushInteger: bci.  "The label (integer PC) we are defining."
            1 = srcGen stackSize ifTrue: [  "Print label using an implicitSelfSend."
                srcGen generateImplicitSelfSend: sel.
                srcGen pop1.   "Leave the stack empty after the definition."
            ] False: [
                srcGen generateSend: sel.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'prettyPrinter' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         ppLiteral: literal Locals: locals Using: srcGen = ( |
             litmir.
            | 
            litmir: (reflect: literal).
            litmir isReflecteeInteger ifTrue: [srcGen pushInteger: literal.    ^ self].
            litmir isReflecteeFloat   ifTrue: [srcGen pushFloat: literal.      ^ self].
            litmir isReflecteeString  ifTrue: [srcGen pushSelfString: literal. ^ self].
            litmir isReflecteeBlock ifTrue: [
                srcGen pushNewBlockDo: [
                    prettyPrintMethod: litmir valueSlot contents Locals: locals Using: srcGen.
                ].
                ^ self.
            ].
            error: 'unsupported literal: ', litmir reflecteeID, ', type: ', litmir type).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'prettyPrinter' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         ppSlotsInMethod: methMir Locals: loc Using: srcGen = ( |
             locals.
            | 
            methMir isEmpty ifTrue: [^ loc.   "Just an optim."].
            locals: loc copy.
            methMir do: [|:slot|
                slot isAssignment ifFalse: [  "Ignore assignment slots!"
                    | name <- ''. |
                    name: slot name.
                    locals add: name.
                    slot isArgument ifTrue: [
                        srcGen addArg: name.
                    ] False: [| exp <- ''. |
                        slot contents != (reflect: nil) ifTrue: [
                            slot contents storeStringOfReflecteeIfPresent: [|:st| 
                                exp: st.
                            ] IfAbsent: [
                                exp: slot contents reflecteeID printString, ' _AsObject'.
                            ].
                        ].
                        srcGen currentBlock addLocal: name
                                          IsArgument: false
                                        IsAssignable: slot isAssignable
                                             InitExp: exp.
                    ].
                ].
            ].
            locals).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'prettyPrinter' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         prettyPrintMethod: methMir = ( |
            | prettyPrintMethod: methMir Name: 'fisk').
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'prettyPrinter' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         prettyPrintMethod: methMir Locals: loc Using: srcGen = ( |
             branchTargets.
             delegatee.
             locals.
            | 
            locals: (ppSlotsInMethod: methMir Locals: loc Using: srcGen).
            branchTargets: methMir branchTargets asSet.
            methMir byteCodesDo: [|:bci. :op0. :literal. :nextbci. op|
                op: op0.
                (branchTargets includes: bci) ifTrue: [ppLabelDef: bci Using: srcGen].
                case 
                  if: ['pop'              = op] Then: [srcGen pop1]
                  If: ['pushSelf'         = op] Then: [srcGen pushSelf]
                  If: ['literal'          = op] Then: [ppLiteral: literal Locals: locals Using: srcGen]
                  If: ['implicitSelfSend' = op] Then: [ppImplicitSelfSend: literal
                                                                Delegatee: delegatee
                                                                   Locals: locals 
                                                                    Using: srcGen.
                                                       delegatee: nil.  "Clear before next round."]
                  If: ['send'             = op] Then: [srcGen generateSend: literal]
                  If: ['undirectedResend' = op] Then: [delegatee: 'resend'.
                                                       op: 'implicitSelfSend']
                  If: ['writeLocal'       = op] Then: [srcGen setLocalVarNamed: literal copyWithoutLast]
                  If: ['readLocal'        = op] Then: [srcGen pushLocalVarNamed: literal]
                  If: ['nonlocalReturn'   = op] Then: [srcGen generateReturn]
                  If: ['delegatee'        = op] Then: [delegatee: literal]
                  If: [('branchAlways'    = op)  ||
                       ['branchIfTrue'    = op]  ||
                       ['branchIfFalse'   = op] ||
                       ['branchIndexed'   = op]] Then: [ppBranch: op Literal: literal Using: srcGen]
                  Else: [error: 'unknown bytcode: ', op].
            ].
            srcGen popCount: srcGen stackSize.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'prettyPrinter' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         prettyPrintMethod: methMir Name: methName = ( |
             outer.
             srcGen.
            | 
            srcGen: pep srcCodeGenerator copy.
            srcGen initCodeAttribute: nil.
            srcGen allowElimination: false.
            outer: (srcGen inNewBlockDo: [
                prettyPrintMethod: methMir Locals: set copy Using: srcGen.
            ]).
            outer sourceCodeName: methName).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: misc\x7fCategory: locking\x7fCategory: lock debugging\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         printOpenLockEvents = ( |
            | 
            10 < openLockEvents size ifTrue: [
                openLockEvents size print. ' open lock events' printLine.
            ] False: [
                'openLockEvents:' print. 
                openLockEvents do: [|:ole| ' ' print. ole print].
                '' printLine.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: stringManipulation and naming\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         selectorifyChar: ch = ( |
            | selectorifyMapping at: ch asByte).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: stringManipulation and naming\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         selectorifyMapping <- bootstrap stub -> 'globals' -> 'nil' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: stringManipulation and naming\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         selectorifyString: str = ( |
             res <- ''.
            | 
            "This is the common case (we hope). Faster."
            (isAllASCIILettersOrDigits: str) ifTrue: [^ str].
            '<init>'   = str ifTrue: [^ 'init_obj'].
            '<clinit>' = str ifTrue: [^ 'init_class'].
            str do: [|:ch| res: res, (selectorifyChar: ch)].
            res).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: debugging and options\x7fCategory: flags and params\x7fComment: Whether to set annotations in the objects
generated during translation. Slows down
translation.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         setAnnotations = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: arrays\x7fCategory: superclass\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         setArraySuperclassTo: cl = ( |
             aaMir.
            | 
            aaMir: (reflect: arrayBuildMixin array_masters traits_allArrays).
            "Use frozenDefine, else transporter thinks module has changed."
            aaMir frozenDefine: (aaMir copyAt: 'super_class'
                                  PutContents: (reflect: cl)).
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: arrays\x7fCategory: superclass\x7fComment: Class object has been loaded, so make sure all arrays have
it as their superclass.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         setArraySuperclassToObject = ( |
            | 
            setArraySuperclassTo: pep loadedClasses class_java_lang_Object).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: arrays\x7fCategory: superclass\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         setArraySuperclassToRootClass = ( |
            | 
            setArraySuperclassTo: javaRootClass).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: misc\x7fCategory: class loading\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         setCategoryTo: cat ForSlot: sn In: mir = ( |
            | 
            pep setAnnotations ifFalse: [^ mir].
            ((mir at: sn) copyHolderForCategory: cat) holder).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: debugging and options\x7fCategory: flags and params\x7fCategory: debugging support\x7fComment: Whether to add a link, \'my_classFile\' to
the generated java classes (back pointer to
the classFile object that the class was generated
from). Useful for debugging, but increases memory
consumption since class files cannot be garbage
collected.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         setMyClassFileLinks = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: ui and interaction\x7fCategory: module revision numbers\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         setRevision: module To: rev = ( |
             r <- ''.
             t.
            | 
            t: module revision asTokensSeparatedByWhiteSpace asVector.
            t do: [|:s. :i| 
                1 = i ifTrue: [r: r, rev, ' ']
                       False: [r: r, s, ' '].
            ].
            r: r shrinkwrapped.
            module revision: r canonicalize.
            module beDirty.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: misc\x7fCategory: initialization\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         setVMParams = ( |
            | 
            [
              _MaxBlockFnInlineSize:    20.
              _MaxBlockInlineSize:     150.
              _MaxFnInlineSize:         16.

              warning: 'adjusting VM inline parameters'.
            ].
            _Compilers: ('nic' & 'sic') asVector
                Limits: vector copyAddFirst: inlinePrims ifTrue: 10 False: 10000.
            warning: 'setting compiler limits'.

            _SICBranchSplitting: true.  
            warning: (_SICBranchSplitting ifTrue: 'en' False: 'dis'), 'abling branch splitting'.
            "_SICReplaceOnStack: false.
            warning: 'setting SICReplaceOnStack = false'."
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'signatureMixin' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         is64BitType: ty = ( |
            | 
            ('J' = ty) || ['D' = ty]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'signatureMixin' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isMethodSignature = ( |
            | 
            '(' = signatureAsAscii first).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'signatureMixin' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         legibleNameForType: type = ( |
            | 
            legibleNameForType: type WithName: '').
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'signatureMixin' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         legibleNameForType: type WithName: name = ( |
             acount <- 0.
             res <- ''.
             rest <- ''.
            | 
            ['[' = (type at: acount)] whileTrue: [
                acount: 1 + acount.
            ].
            rest: (type copyFrom: acount).
            1 = rest size ifTrue: [
                res: (typeNameForPrimitiveTypeLetter: rest).
            ] False: [
                pep assert: ['L' = rest first].
                pep assert: [';' = rest last].
                rest: (rest copyFrom: 1 UpTo: rest size - 1).
                rest mapBy: [|:ch| '/' = ch ifTrue: '.' False: ch].
                res: rest.
            ].
            '' != name ifTrue: [res: res, ' ', name].
            0 != acount ifTrue: [
                acount do: [res: res, '[]'].
            ].
            res).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'signatureMixin' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         lenFieldTypeSignature: sig StartIdx: start = ( |
             ch <- 'a'.
             i <- 0.
            | 
            i: start.
            [ch: (sig at: i IfAbsent: [error: 'premature end of signature(1)']).
             '[' = ch] whileTrue: [
                i: 1 + i.
            ].
            ('BCDFIJSZ' includes: ch) ifTrue: [^ 1 + (i - start)].
            'L' != ch ifTrue: [error: 'bad signature'].
            [';' != (sig at: i IfAbsent: [error: 'missing ";" in signature'])]
               whileTrue: [i: 1 + i].
            ^ 1 + (i - start)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'signatureMixin' -> () From: ( | {
         'Comment: Note: result may start with an upper case letter. 
Caller must ensure begins with lower case before using as Self selector.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         mangledName = ( |
            | 
            nil = mangledName0 ifTrue: [
                isMethodSignature ifTrue: [
                    mangledName0: nameAsSelector, signatureAsSelectorSuffix.
                ] False: [
                    mangledName0: nameAsSelector. "Can't overload fields, so
                                                   we can keep name simpler."
                ].
            ].
            mangledName0).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'signatureMixin' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         signatureArgTypesDo: blk = ( |
             last.
            | 
            last: signatureNoOfArgs.
            splitSignature do: [|:a. :i|
                i != last ifTrue: [blk value: a With: i].
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'signatureMixin' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         signatureAsAscii = ( |
            | 
            signatureAsStruct asciiValue).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'signatureMixin' -> () From: ( | {
         'Comment: Map signature to string that can be used as suffix of Self
selector (yes, this is name mangling to resolve overloading).\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         signatureAsSelectorSuffix = ( |
             n <- 0.
             res <- ''.
            | 
            n: signatureNoOfArgs.
            splitSignature do: [|:str. :argNo|
                argNo != n ifTrue: [| s <- ''. |
                    s: str.
                    ';' = s last ifTrue: [s: s copyWithoutLast].
                    "Do the bulk of the work by invoking method for class names.
                     This method needs to deal with arrays ([) and separators (/)
                     anyway, so we may as well reuse it here."
                    s: (pep classNameToSelectorCore: s).
                    s: (pep makeUpperCase: s).
                    res: res, (s, ':').
                ].
            ].
            '' != res ifTrue: [res: '_', res].
            res).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'signatureMixin' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         signatureAsStruct = ( |
            | 
            constantNumber: signature_index).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'signatureMixin' -> () From: ( | {
         'Comment: Return true if this method\'s signature
has void result type.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         signatureHasVoidResult = ( |
            | 
            'V' = signatureResultType).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'signatureMixin' -> () From: ( | {
         'Comment: Note: the receiver does not count as an argument.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         signatureNoOfArgs = ( |
            | 
            splitSignature size - 1.   "Don't include the result type
                                        in the count, so subtract 1.").
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'signatureMixin' -> () From: ( | {
         'Comment: A signature string which is \"java\" like (no mangling).\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         signaturePrintString = ( |
             n <- 0.
             res <- ''.
            | 
            isMethodSignature ifFalse: [
                ^ (legibleNameForType: signatureAsAscii WithName: nameAsAscii), ';'.
            ].
            res: (legibleNameForType: signatureResultType), ' '.
            '<init>' = nameAsAscii ifTrue: [
                res: res, myClassFile classNameWithDots.
            ] False: [
                res: res, nameAsAscii.
            ].
            res: res, '('.
            n: signatureNoOfArgs.
            signatureArgTypesDo: [|:type. :argNo|
                0 < argNo ifTrue: [res: res, ','].
                res: res, (legibleNameForType: type).
            ].
            res: res, ');'.
            res).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'signatureMixin' -> () From: ( | {
         'Comment: Return the result type (if method signature).\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         signatureResultType = ( |
            | 
            splitSignature last).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'signatureMixin' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         signatureYields64Bits = ( |
             t <- ''.
            | 
            isMethodSignature ifTrue: [t: signatureResultType]
                               False: [t: signatureAsAscii].
            is64BitType: t).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'signatureMixin' -> () From: ( | {
         'Comment: Return vector. Each element in vector is type of an argument or the 
result (the last element in the vector). So if method takes n args,
the vector is n+1 long. The type of the receiver is NOT in the vector.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         splitSignature = ( |
            | 
            nil = splitSignature0 ifTrue: [| i <- 1. j <- 0. sig <- ''. len <- 0. split |
                split: sequence copy.
                sig: signatureAsAscii.
                '(' = sig first ifFalse: [error: 'bad signature: should start with "("'].
                [')' != (sig at: i IfAbsent: [error: 'bad signature: missing ")"'])] whileTrue: [
                    | len <- 0. |      
                    len: (lenFieldTypeSignature: sig StartIdx: i).
                    split add: (sig copyFrom: i UpTo: i + len).
                    i: i + len.
                ].
                i: 1 + i.    "Skip the ')' and do the return type."
                'V' = (sig at: i IfAbsent: [error: 'bad signature: no return type']) ifTrue: [
                    len: 1.
                ] False: [
                    len: (lenFieldTypeSignature: sig StartIdx: i).
                ].
                (i + len) != sig size ifTrue: [error: 'bad signature: excess trailing stuff'].
                split add: (sig copyFrom: i).
                splitSignature0: split asVector.
            ].
            splitSignature0).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'signatureMixin' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         typeNameForPrimitiveTypeLetter: let = ( |
            | 
            typeNameForPrimitiveTypeLetter: let IfFail: 0 raiseError).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'signatureMixin' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         typeNameForPrimitiveTypeLetter: let IfFail: errBlk = ( |
            | 
            'B' = let ifTrue: [^ 'byte'   ].
            'C' = let ifTrue: [^ 'char'   ].
            'D' = let ifTrue: [^ 'double' ].
            'F' = let ifTrue: [^ 'float'  ].
            'I' = let ifTrue: [^ 'int'    ].
            'J' = let ifTrue: [^ 'long'   ].
            'S' = let ifTrue: [^ 'short'  ].
            'V' = let ifTrue: [^ 'void'   ].
            'Z' = let ifTrue: [^ 'boolean'].
            erBlk value: 'bad type letter: ', let).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: stringManipulation and naming\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         slowSelectorifyChar: ch = ( |
            | 
            "What a pain!"
            ch isLetter ifTrue: [^ ch            ].
            ch isDigit  ifTrue: [^ ch            ].
            ' ' = ch    ifTrue: [^ 'space_'      ].
            '!' = ch    ifTrue: [^ 'emark_'      ].
            '"' = ch    ifTrue: [^ 'doublequote_'].
            '#' = ch    ifTrue: [^ 'sharp_'      ].
            '$' = ch    ifTrue: [^ 'dollar_'     ].
            '%' = ch    ifTrue: [^ 'percent_'    ].
            '&' = ch    ifTrue: [^ 'and_'        ].
            '\''= ch    ifTrue: [^ 'singlequote_'].
            '(' = ch    ifTrue: [^ 'beginParen_' ].
            ')' = ch    ifTrue: [^ 'endParen_'   ].
            '*' = ch    ifTrue: [^ 'star_'       ].
            '+' = ch    ifTrue: [^ 'plus_'       ].
            ',' = ch    ifTrue: [^ 'comma_'      ].
            '-' = ch    ifTrue: [^ 'minus_'      ].
            '.' = ch    ifTrue: [^ 'dot_'        ].
            '/' = ch    ifTrue: [^ 'slash_'      ].
            ':' = ch    ifTrue: [^ 'colon_'      ].
            ';' = ch    ifTrue: [^ 'semicolon_'  ].
            '<' = ch    ifTrue: [^ 'lessThan_'   ].
            '=' = ch    ifTrue: [^ 'equals_'     ].
            '>' = ch    ifTrue: [^ 'greaterThan_'].
            '?' = ch    ifTrue: [^ 'qmark_'      ].
            '@' = ch    ifTrue: [^ 'alpha_'      ].
            '[' = ch    ifTrue: [^ 'Array_'      ].
            '\\'= ch    ifTrue: [^ 'backslash_'  ].
            ']' = ch    ifTrue: [^ 'endBrkt_'    ].
            '^' = ch    ifTrue: [^ 'upArrow_'    ].
            '_' = ch    ifTrue: [^ '__'          ]. "Double to ensure uniqueness."
            '`' = ch    ifTrue: [^ 'backQuote_'  ].
            '{' = ch    ifTrue: [^ 'beginBrc_'   ].
            '|' = ch    ifTrue: [^ 'vbar_'       ].
            '}' = ch    ifTrue: [^ 'endBrc_'     ].
            '~' = ch    ifTrue: [^ 'tilde_'      ].
            ch asByte printString, '_').
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: counts\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         splitExpansion <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: expNodes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         abstractNode = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep srcCodeGenerator abstractNode.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> () From: ( | {
         'Category: testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         canThrowException = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         halfIndentAmount = ( |
            | indentAmount /~ 2).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         indentAmount = 4.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         indentOn: d = ( |
            | indentAmount * d).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         indentableCollectorFor: str = ( |
            | 
            indentableStringCollector copyString: str).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> () From: ( | {
         'Comment: Like a regular collector but supports efficient
indentation of the string.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         indentableStringCollector = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> 'indentableStringCollector' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep srcCodeGenerator abstractNode indentableStringCollector.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> 'indentableStringCollector' -> () From: ( | {
         'Category: appending\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         appendCollector: inColl = ( |
             p.
            | 
            endsInNewline ifTrue: [
                p: inColl head.
            ] False: [
                "Splice last/first line."
                appendString: inColl head string.
                p: inColl head next.
                nil = p ifTrue: [^ self].
            ].
            tail next: p.
            tail: inColl tail.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> 'indentableStringCollector' -> () From: ( | {
         'Category: appending\x7fComment: String may contain newlines in the middle.
This method is slower than \'appendString:\'
because it has to scan the string.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         appendNLString: str = ( |
             i <- 0.
             j <- 0.
             lim <- 0.
            | 
            lim: str size.
            [i < lim] whileTrue: [
                j: i.
                [newline != (str at: j IfAbsent: newline)] whileTrue: [
                    j: 1 + j.
                ].
                j < lim ifTrue: [j: 1 + j].
                appendString: (str copyFrom: i UpTo: j).
                i: j.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> 'indentableStringCollector' -> () From: ( | {
         'Category: appending\x7fComment: String is not allowed to contain newlines
in the middle.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         appendString: str = ( |
            | 
            tail: (tail appendString: str)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> 'indentableStringCollector' -> () From: ( | {
         'Category: flattening\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         asFlatString = ( |
             i <- 0.
             res <- ''.
            | 
            res: ('' copySize: flatStringSize FillingWith: ' ').
            linesDo: [|:is|
                i: (is flattenInto: res AtIndex: i).
            ].
            res).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> 'indentableStringCollector' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         copy = ( |
            | 
            copyString: '').
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> 'indentableStringCollector' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         copyString: str = ( |
            | resend.copy initString: str).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> 'indentableStringCollector' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         endsInNewline = ( |
            | tail endsInNewline).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> 'indentableStringCollector' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         firstLine = ( |
            | head string).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> 'indentableStringCollector' -> () From: ( | {
         'Category: line lengths\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         firstLineLen = ( |
            | 
            head lineLen).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> 'indentableStringCollector' -> () From: ( | {
         'Category: flattening\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         flatStringSize = ( |
             n <- 0.
            | 
            linesDo: [|:is| n: n + is flatStringSize].
            n).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> 'indentableStringCollector' -> () From: ( | {
         'Category: state\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         head.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> 'indentableStringCollector' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         indentBy: n = ( |
            | 
            linesDo: [|:is| is indentBy: n]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> 'indentableStringCollector' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         indentedString = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> 'indentableStringCollector' -> 'indentedString' -> () From: ( |
             {} = 'Comment: String should not contain newline except 
possibly at the end.\x7fModuleInfo: Creator: globals pep srcCodeGenerator abstractNode indentableStringCollector indentedString.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> 'indentableStringCollector' -> 'indentedString' -> () From: ( | {
         'Category: appending\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         appendString: str = ( |
            | 
            '' = str ifTrue: [^ self].
            endsInNewline ifTrue: [
                next: (copyString: str).
                next.
            ] False: [
                string: string, str.
                self.
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> 'indentableStringCollector' -> 'indentedString' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         copy = ( |
            | 
            copyString: '').
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> 'indentableStringCollector' -> 'indentedString' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         copyString: str = ( |
            | 
            copyString: str Indent: 0).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> 'indentableStringCollector' -> 'indentedString' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         copyString: str Indent: in = ( |
            | resend.copy initString: str Indent: in).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> 'indentableStringCollector' -> 'indentedString' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         endsInNewline = ( |
             n <- 0.
            | 
            n: string size.
            0 = n ifTrue: false
                   False: ['\n' = (string at: n - 1)]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> 'indentableStringCollector' -> 'indentedString' -> () From: ( | {
         'Category: flattening\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         flatStringSize = ( |
            | string size + indent).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> 'indentableStringCollector' -> 'indentedString' -> () From: ( | {
         'Category: flattening\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         flattenInto: dst AtIndex: i = ( |
             j <- 0.
             k <- 0.
            | 
            j: i + indent.
            k: string size.
            dst copyRangeDstPos: j SrcArray: string SrcPos: 0 Len: k.
            j + k).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> 'indentableStringCollector' -> 'indentedString' -> () From: ( | {
         'Category: state\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         indent <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> 'indentableStringCollector' -> 'indentedString' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         indentBy: n = ( |
            | indent: indent + n).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> 'indentableStringCollector' -> 'indentedString' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         initString: str Indent: in = ( |
            | 
            indent: in.
            string: str.
            next:   nil.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> 'indentableStringCollector' -> 'indentedString' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         lineLen = ( |
             c <- 0.
            | 
            c: indent.
            endsInNewline ifTrue: [c: -1 + c].
            string size + c).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> 'indentableStringCollector' -> 'indentedString' -> () From: ( | {
         'Category: state\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         next.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> 'indentableStringCollector' -> 'indentedString' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'traits' -> 'clonable' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> 'indentableStringCollector' -> 'indentedString' -> () From: ( | {
         'Category: prepending\x7fComment: str should not contain newline in the middle.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         prependString: str = ( |
            | 
            '' = str ifTrue: [^ self].
            '\n' = str last ifTrue: [|is|
                is: (copyString: str).
                is next: self.
            ] False: [
                string: str, string.
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> 'indentableStringCollector' -> 'indentedString' -> () From: ( | {
         'Category: state\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (\'\')\x7fVisibility: public'
        
         string <- ''.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> 'indentableStringCollector' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         initString: str = ( |
            | 
            head: (indentedString copyString: str).
            tail: head.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> 'indentableStringCollector' -> () From: ( | {
         'Comment: Return true iff it is an empty collector.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isEmpty = ( |
            | 
            head string isEmpty).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> 'indentableStringCollector' -> () From: ( | {
         'Category: line lengths\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         lastLineLen = ( |
            | tail lineLen).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> 'indentableStringCollector' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         linesDo: blk = ( |
             p.
            | 
            p: head.
            [nil != p] whileTrue: [
                blk value: p.
                p: p next.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> 'indentableStringCollector' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'traits' -> 'clonable' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> 'indentableStringCollector' -> () From: ( | {
         'Comment: Wrap entire thing in parentheses.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         parenthesize = ( |
            | 
            "Indent all but first line, to make it look at bit nicer."
            indentBy: 1.
            head indentBy: -1.
            head string: '(', head string.
            tail string: tail string, ')'.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> 'indentableStringCollector' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         prefixFirstLine: pre = ( |
            | 
            head prefixLine: pre).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> 'indentableStringCollector' -> () From: ( | {
         'Category: prepending\x7fComment: str should not contain newline in the middle.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         prependString: str = ( |
            | 
            head: (head prependString: str)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> 'indentableStringCollector' -> () From: ( | {
         'Category: state\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         tail.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> () From: ( | {
         'Category: testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isBlock = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> () From: ( | {
         'Category: testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isConstant = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> () From: ( | {
         'Category: testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isImplicitSelf = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> () From: ( | {
         'Category: testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isLocalRead = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> () From: ( | {
         'Category: testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isSequence = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> () From: ( | {
         'Category: line breaking\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         maxLineLen = 100.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> () From: ( | {
         'Category: line breaking\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         newline = '
'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'traits' -> 'clonable' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parenthesizedSourceFor: exp Depth: d = ( |
             expSrc.
            | 
            expSrc: (exp sourceCodeDepth: d).
            (needsParentheses: exp) ifTrue: [expSrc parenthesize].
            expSrc).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         printString = ( |
            | 
            nodeType, '(', (sourceCodeDepth: 0) asFlatString, ')').
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: exceptions\x7fComment: Currently active exception handler groups (sequence of vectors).\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         activeExcGrps.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: var and arg slots\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         addArg: aName = ( |
            | 
            addArg: aName To: currentBlock).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: var and arg slots\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         addArg: aName To: block = ( |
            | 
            "Should not add explicit receiver arg (:self)."
            'self' != aName ifTrue: [
                block addLocal: aName IsArgument: true IsAssignable: false InitExp: ''.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: var and arg slots\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         addConst: name InitExp: expStr = ( |
            | 
            currentBlock addLocal: name IsArgument: false IsAssignable: false InitExp: expStr.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: var and arg slots\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         addLocal: lName = ( |
            | addLocal: lName To: currentBlock).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: var and arg slots\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         addLocal: lName To: block = ( |
            | 
            block addLocal: lName IsArgument: false IsAssignable: true InitExp: ''.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: valueTransfers\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         addStackLocations = ( |
            | 
            1 + maxStackLocation do: [|:i|
                addLocal: (stackLocationName: i).
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: blocks\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         addToBody: exp = ( |
             bod.
             cb.
            | 
            cb: currentBlock body.
            nil = cb ifTrue: [bod: exp]
                      False: [bod: (sequenceNode copyExp1: cb Exp2: exp)].
            currentBlock body: bod.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: expStack\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (true)\x7fVisibility: public'
        
         allowElimination <- bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: expNodes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         binarySendNode = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'binarySendNode' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep srcCodeGenerator binarySendNode.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'binarySendNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         arg.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'binarySendNode' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         copySel: s Rcvr: r Arg: a = ( |
            | resend.copy initSel: s Rcvr: r Arg: a).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'binarySendNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         delegatee.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'binarySendNode' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         initSel: s Rcvr: r Arg: a = ( |
            | 
            selectorObj: s.
            rcvr: r.
            arg: a).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'binarySendNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         needsParentheses: exp = ( |
            | 
            priority < exp priority ifTrue: [^ false].
            priority > exp priority ifTrue: [^ true ].
            nodeType != nodeType    ifTrue: [^ true ].
            "Both are binary sends. No need for parenthesis if same selector."
            (selectorObj str = exp selectorObj str) not).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'binarySendNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         nodeType = 'binarySend'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: expNodes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         sendNode = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'sendNode' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep srcCodeGenerator sendNode.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'binarySendNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'sendNode' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'binarySendNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         priority = 2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'binarySendNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         rcvr.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'binarySendNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         selectorObj.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'binarySendNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         sourceCodeDepth: d = ( |
             a <- ''.
             r <- ''.
             s <- ''.
            | 
            r: (rcvrOrDelegateeSrcDepth: d).
            a: (parenthesizedSourceFor: arg Depth: d).
            s: selectorObj str, ' '.
            "Can't break lines at delegation period!
             E.g., 'fisk.snort' is not the same as 'fisk.\nsnort'."
            pep breakLongLines && [hasDelegatee not] ifTrue: [
                "Need to break line?."
                maxLineLen < ((indentOn: d) + r lastLineLen + s size + a firstLineLen) ifTrue: [
                    s last: newline.  "Replace the trailing space with newline."
                    a indentBy: halfIndentAmount.
                ].
            ].
            r appendString: s.
            r appendCollector: a.
            r).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'binarySendNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         spaceAfterOK = ( |
            | 
            ';' != selectorObj str).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: blocks\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         blockNestingDepth <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: expNodes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         blockNode = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'blockNode' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep srcCodeGenerator blockNode.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'blockNode' -> () From: ( | {
         'Category: local vars and constants\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         addLocal: name IsArgument: arg IsAssignable: asgn InitExp: exp = ( |
            | 
            locals add: name.
            locals add: arg.
            locals add: asgn.
            locals add: exp.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'blockNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         appendBodySourceCodeTo: coll Depth: d = ( |
            | 
            nil = body ifTrue: [
                "Empty body not allowed in methods or blocks with args."
                (0 = d) || [hasArgs] ifTrue: [coll appendString: 'self'].
            ] False: [
                coll appendCollector: (body sourceCodeDepth: 1 + d).
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'blockNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         body.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'blockNode' -> () From: ( | {
         'Category: testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         canThrowException = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'blockNode' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         copy = ( |
            | resend.copy init).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'blockNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (sequence)\x7fVisibility: public'
        
         expStack <- bootstrap stub -> 'globals' -> 'sequence' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'blockNode' -> () From: ( | {
         'Comment: Nil unless this block introduces new
exceptions handlers. In the latter case
this slot will be set to the exception group
that becomes active in this block.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         guardingExceptionGrp.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'blockNode' -> () From: ( | {
         'Category: local vars and constants\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         hasArgs = ( |
            | 
            localsDo: [|:name. :isArgument. :isAssignable. :initExp| 
                isArgument ifTrue: [^ true].
            ].
            false).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'blockNode' -> () From: ( | {
         'Category: local vars and constants\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         hasConsts = ( |
            | 
            localsDo: [|:name. :isArgument. :isAssignable. :initExp| 
                isAssignable ifFalse: [^ true].
            ].
            false).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'blockNode' -> () From: ( | {
         'Category: local vars and constants\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         hasSlotNamed: name = ( |
            | 
            localsDo: [|:n| name = n ifTrue: [^ true]].
            false).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'blockNode' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         init = ( |
            | 
            locals:   sequence copy.
            expStack: sequence copy.
            guardingExceptionGrp: nil.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'blockNode' -> () From: ( | {
         'Category: testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isBlock = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'blockNode' -> () From: ( | {
         'Category: testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isEmpty = ( |
            | nil = body).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'blockNode' -> () From: ( | {
         'Category: local vars and constants\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (sequence)\x7fVisibility: private'
        
         locals <- bootstrap stub -> 'globals' -> 'sequence' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'blockNode' -> () From: ( | {
         'Category: local vars and constants\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         localsDo: blk = ( |
            | 
            0 upTo: locals size By: 4 Do: [|:i|
                blk value: (locals at: i)       "name"
                     With: (locals at: 1 + i)   "isArgument"
                     With: (locals at: 2 + i)   "isAssignable"
                     With: (locals at: 3 + i).  "initExp"
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'blockNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         nodeType = 'block'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'blockNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'blockNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         priority = 3.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'blockNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         slotsSource = ( |
             args <- ''.
             locs <- ''.
            | 
            locals isEmpty ifTrue: [^ indentableCollectorFor: ''].
            localsDo: [|:name. :isArgument. :isAssignable. :initExp|
                "Arguments must go first, so collect them separately."
                isArgument ifTrue: [
                    args: args & (':', name, '. ').
                ] False: [
                    isAssignable && ('' = initExp) ifTrue: [  "Common case."
                        locs: locs & (name, '. ').
                    ] False: [
                        | arrow <- ' <- '. exp <- ''. |
                        exp: initExp.
                        isAssignable not ifTrue: [
                            arrow: ' = '.
                            '' = exp ifTrue: [exp: 'nil'].
                        ].
                        locs: locs & (name, arrow, exp, '. ').
                    ].
                ].
            ].
            indentableCollectorFor: ('| ' & args & locs & '|\n') flatString).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'blockNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         sourceCode = ( |
            | 
            sourceCodeDepth: 0).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'blockNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         sourceCodeDepth: d = ( |
             inner <- ''.
             left <- '['.
             right <- ']'.
             s <- ''.
            | 
            inner: slotsSource.
            appendBodySourceCodeTo: inner Depth: d.
            0 = d ifTrue: [left: '('. right: ')']
                   False: [inner appendString: newline].
            inner isEmpty ifTrue: [^ left, right].
            inner indentBy: 4.
            inner prependString: left, newline.
            inner appendString: right.
            inner).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'blockNode' -> () From: ( | {
         'Comment: Turn source code into full object specification
with single method with given name.
Return as flat (regular) string.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         sourceCodeName: name = ( |
             src.
            | 
            src: sourceCode.
            src prependString: '(| ', name, '='.
            src appendString: ' |)'.
            src asFlatString).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: expStack\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         canEliminateExp: exp = ( |
            | 
            allowElimination &&
            [exp isLocalRead || [exp isConstant]]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: copying and initialization\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         cleanup = ( |
            | initCodeAttribute: nil).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: exceptions\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         cleanupActiveExcGrpsTo: idx = ( |
            | 
            pep assert: [0 = stackSize].  "Caller must assure empty expression stack!"
            false ifTrue: [
                'activeExcGrps:' printLine.
                activeExcGrps do: [|:excGrp| '  ' print. excGrp printLine].
            ].
            pushLocalVarNamed: (activeExcGrps at: idx) first exceptionCleanupName.
            generateSend: 'value'.
            pop1).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: expNodes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         constantNode = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'constantNode' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep srcCodeGenerator constantNode.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'constantNode' -> () From: ( | {
         'Category: testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         canThrowException = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'constantNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         constValue <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'constantNode' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         copyConstValue: cv = ( |
            | resend.copy initConstValue: cv).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'constantNode' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         initConstValue: cv = ( |
            | 
            constValue: cv).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'constantNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isConstant = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'constantNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         nodeType = 'constant'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'constantNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'constantNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         priority = 3.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'constantNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         sourceCodeDepth: d = ( |
            | 
            indentableCollectorFor: constValue storeString).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: copying and initialization\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         copy = ( |
            | resend.copy. "Nothing special currently.").
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: blocks\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         currentBlock.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: expStack\x7fComment: Discard the expression at depth \'d\' from the
expression stack. E.g, \'dropStackAt: 0\' 
discards the topmost expression.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         dropStackAt: d = ( |
            | 
            whileRetaining: d Do: [popExp]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: debugging\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         dump = ( |
            | 
            'Current block body:' printLine.
            currentBlock sourceCode asFlatString printLine.
            'Current expression stack: ' printLine.
            expStack do: [|:v. :i|
                i print. ': ' print. v printLine.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: exceptions\x7fComment: Return index to which exceptions must be cleaned
up before a transfer to PC can be done. If -1
is returned, no cleanup is necessary.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         excCleanupIdxForTransferToPC: pc = ( |
            | 
            activeExcGrps do: [|:excGrp. :i|
                (excGrp first guards: pc) ifFalse: [^ i].
            ].
            -1.  "No cleanup needed.").
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: expStack\x7fCategory: primitive stack operations\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         expStack = ( |
            | currentBlock expStack).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: misc\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         finishGenName: name Of: tblk = ( |
             resMir.
             srcStr <- ''.
            | 
            srcStr: (tblk sourceCodeName: name).
            resMir: (reflect: srcStr eval).
            finishSwitchStmts: resMir Name: name.
            resMir).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: switch stmt\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         finishSwitchStmts: resMir Name: name = ( |
            | 
            hasSwitchInstructions ifTrue: [| methMir |
                methMir: (resMir at: name) contents.
                switchStmts do: [|:sw| sw finishSwitchStmt: methMir]. 
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: valueTransfers\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         flushExpStackRetainingForTransfer: n = ( |
            | 
            whileRetaining: n Do: [|names|
                names: (vector copySize: stackSize).
                names mapBy: [|:nyl. :i| stackLocationName: i].
                popCount: names size TransferToLocals: names.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: generateSend\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         genSend: sel ToImplSelf: impl DelThrough: del = ( |
             selObj.
             send.
            | 
            selObj: (selector copyStr: sel).
            "Be sure to pop in the right order: first args (if any), then receiver!"
            selObj ifUnary: [
                send: (unarySendNode copySel: selObj Rcvr: (getRcvrImpl: impl Del: del)).
            ] Binary: [|a|
                a: popExp.
                send: (binarySendNode copySel: selObj Rcvr: (getRcvrImpl: impl Del: del) Arg: a).
            ] Keyword: [|a|
                a: (getArgs: selObj numberOfArguments).
                send: (keywordSendNode copySel: selObj Rcvr: (getRcvrImpl: impl Del: del) Args: a).
            ].
            nil != del ifTrue: [send setDelegatee: del].
            pushExp: send.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: generateSend\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generateImplicitSelfSend: sel = ( |
            | genSend: sel ToImplSelf: true DelThrough: nil).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: misc\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generateReturn = ( |
             exp.
            | 
            hasActiveExcHandlers && [(stackAt: 0) canThrowException] ifTrue: [
                "If we have to clean up exception handlers, we must be careful
                 to get all the expressions on the stack, including the one we
                 are about to return the result of, evaluated first. For the
                 returned expression, we force its computation by storing to
                 a local variable (we only need to do this, if it can throw an
                 exception)."
                | resultName = 'r_'. |
                addLocal:          resultName.
                setLocalVarNamed:  resultName.
                pop1.         "Pop the assignment."
                pushLocalVarNamed: resultName.  "Push the local variable."
            ].
            exp: popExp.           "The exp we are returning."
            popCount: stackSize.   "Flush rest of stack."

            "Now the exp stack is empty and the expression producing the returned 
             value has been turned into a local read (if it could throw an exception),
             so we can safely clean up the exception handlers (if any)."
            hasActiveExcHandlers ifTrue: [
                cleanupActiveExcGrpsTo: 0.  "Clean up all of them; we are
                                             returning from the method."
            ].
            addToBody: (returnNode copyExp: exp)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: generateSend\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generateSend: sel = ( |
            | 
            genSend: sel ToImplSelf: false DelThrough: nil).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: generateSend\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         generateSend: sel DelegateThrough: del = ( |
            | 
            genSend: sel ToImplSelf: true DelThrough: del).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: generateSend\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         getArgs: nArgs = ( |
             args <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
            | 
            args: (vector copySize: nArgs).
            nArgs reverseDo: [|:i| args at: i Put: popExp].
            args).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: generateSend\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         getRcvrDel: del = ( |
            | 
            nil = del ifTrue: [popExp]
                       False: [implicitSelfNode copy].  "Use implicit self as rcvr for sends with delegatee.").
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: generateSend\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         getRcvrImpl: impl Del: del = ( |
            | 
            impl || [nil != del] ifTrue: [
                "We also use implicit self as rcvr for sends with delegatee."
                implicitSelfNode copy.
            ] False: [
                popExp.
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: exceptions\x7fComment: Return true iff we are currently being guarded by
one or more exception handlers.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         hasActiveExcHandlers = ( |
            | 
            activeExcGrps isEmpty not).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: constants\x7fComment: Does the integer \'i\' has a storestring which is fast
to evaluation (e.g., bigInt\'s and int64\'s don\'t).\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         hasFastStoreString: i = ( |
            | (reflect: i) isReflecteeInteger).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: var and arg slots\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         hasSlotNamed: name = ( |
            | 
            currentBlock hasSlotNamed: name).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: switch stmt\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         hasSwitchInstructions = ( |
            | nil != switchInstructions).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: expNodes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         implicitSelfNode = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'implicitSelfNode' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep srcCodeGenerator implicitSelfNode.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'implicitSelfNode' -> () From: ( | {
         'Category: testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         canThrowException = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'implicitSelfNode' -> () From: ( | {
         'Category: copying\x7fComment: No state in these, so no reason to copy.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         copy = ( |
            | self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'implicitSelfNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isImplicitSelf = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'implicitSelfNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         nodeType = 'implicitSelf'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'implicitSelfNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'implicitSelfNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         priority = 4.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'implicitSelfNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         sourceCodeDepth: d = ( |
            | 
            indentableCollectorFor: '').
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: blocks\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         inNewBlockDo: blk = ( |
             isOutermostBlock <- bootstrap stub -> 'globals' -> 'false' -> ().
             new.
             old.
            | 
            old: currentBlock.
            new: blockNode copy.
            currentBlock: new.
            isOutermostBlock: 0 = blockNestingDepth.
            isOutermostBlock ifTrue: [outermostBlock: new].

            blockNestingDepth:  1 + blockNestingDepth.
            blk value.
            popCount: stackSize.  "Get all pending exp's into block."
            blockNestingDepth: -1 + blockNestingDepth.

            popActiveExcGrp.
            isOutermostBlock ifTrue: [ "Just about finished the whole method."
                addStackLocations.  "Do this before popping the method block." 
            ].
            currentBlock: old.
            new).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: copying and initialization\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         initCodeAttribute: ca = ( |
            | 
            resend.initCodeAttribute: ca.
            blockNestingDepth:  0.
            currentBlock:       nil.
            outermostBlock:     nil.
            maxStackLocation:   -1.
            switchInstructions: nil.  "Lazily alloc. to sequence."
            nil = ca ifTrue: [ 
                "This is a cleanup call, not initialization."
                activeExcGrps: nil.
            ] False: [
                activeExcGrps: sequence copy.
            ].
            allowElimination:   true.
            switchInstructions: nil.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: blocks\x7fComment: Return true if current block that we will be generating code into
is empty (still). I.e., it is a new block.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isFreshBlock = ( |
            | currentBlock isEmpty).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isSrcCodeGenerator = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: expNodes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         keywordSendNode = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'keywordSendNode' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep srcCodeGenerator keywordSendNode.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'keywordSendNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         args.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'keywordSendNode' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         copySel: s Rcvr: r Args: a = ( |
            | resend.copy initSel: s Rcvr: r Args: a).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'keywordSendNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         delegatee.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'keywordSendNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         firstKeySize = ( |
            | 
            selectorObj keywordsDo: [|:k| ^ k size]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'keywordSendNode' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         initSel: s Rcvr: r Args: a = ( |
            | 
            pep assert: [(a includes: nil) not. "Feeble attempt to catch Self compiler bug."]. 
            selectorObj: s.
            rcvr: r.
            args: a).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'keywordSendNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         longestKeySize = ( |
             r <- 0.
            | 
            selectorObj keywordsDo: [|:k| r: (r max: k size)].
            r).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'keywordSendNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         needsParentheses: exp = ( |
            | 
            priority >= exp priority).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'keywordSendNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         nodeType = 'keywordSend'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'keywordSendNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'sendNode' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'keywordSendNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         priority = 1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'keywordSendNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         rcvr.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'keywordSendNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         selectorObj.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'keywordSendNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         sourceCodeDepth: d = ( |
             argNo <- 0.
             isAfterDelegatee <- bootstrap stub -> 'globals' -> 'false' -> ().
             r <- ''.
             res <- ''.
            | 
            res: (rcvrOrDelegateeSrcDepth: d).
            "Can't break lines at delegation period!
             E.g., 'fisk.snort' is not the same as 'fisk.\nsnort'.
             Use 'isAfterDelegatee' to stay out of trouble."
            isAfterDelegatee: hasDelegatee.
            selectorObj keywordsDo: [|:k. kspace <- ''. a <- ''. |
                0 = argNo ifTrue: [kspace: k]
                           False: [kspace: ' ', k].
                a: (parenthesizedSourceFor: (args at: argNo) Depth: d).
                pep breakLongLines && [isAfterDelegatee not] ifTrue: [
                    maxLineLen < ((indentOn: d) + res lastLineLen + a firstLineLen + kspace size + 1) ifTrue: [
                        |in <- 0. |
                        in: halfIndentAmount.
                        ' ' = a firstLine first ifTrue: [in: in - 1].
                        res appendString: newline.
                        res appendString: ('' copySize: in).
                    ].
                ].
                res appendString: kspace, ' '.
                res appendCollector: a.
                argNo: 1 + argNo.
                isAfterDelegatee: false.
            ].
            res).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: expNodes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         localReadNode = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'localReadNode' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep srcCodeGenerator localReadNode.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'localReadNode' -> () From: ( | {
         'Category: testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         canThrowException = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'localReadNode' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         copyVarName: vn = ( |
            | resend.copy initVarName: vn).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'localReadNode' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         initVarName: vn = ( |
            | varName: vn).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'localReadNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isLocalRead = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'localReadNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         nodeType = 'localRead'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'localReadNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'localReadNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         priority = 3.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'localReadNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         sourceCodeDepth: d = ( |
            | 
            indentableCollectorFor: varName).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'localReadNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (\'\')\x7fVisibility: public'
        
         varName <- ''.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: expNodes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         localWriteNode = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'localWriteNode' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep srcCodeGenerator localWriteNode.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'localWriteNode' -> () From: ( | {
         'Category: testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         canThrowException = ( |
            | exp canThrowException).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'localWriteNode' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         copyVarName: vn Exp: e = ( |
            | resend.copy initVarName: vn Exp: e).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'localWriteNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         exp.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'localWriteNode' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         initVarName: vn Exp: e = ( |
            | varName: vn. exp: e).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'localWriteNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         needsParentheses: exp = ( |
            | 
            priority >= exp priority).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'localWriteNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         nodeType = 'localWrite'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'localWriteNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'localWriteNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         priority = 1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'localWriteNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         sourceCodeDepth: d = ( |
            | 
            (parenthesizedSourceFor: exp Depth: d)
              prependString: (varName, ': ')).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'localWriteNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (\'\')\x7fVisibility: public'
        
         varName <- ''.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: valueTransfers\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (-1)\x7fVisibility: private'
        
         maxStackLocation <- -1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: misc\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         myCodeAttribute.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: blocks\x7fComment: Holds reference to outermost block (i.e., the method itself)
during code gen.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         outermostBlock.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'abstractCodeGenerator' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: expStack\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         pop1 = ( |
            | popCount: 1).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: exceptions\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         popActiveExcGrp = ( |
            | 
            nil != currentBlock guardingExceptionGrp ifTrue: [
                pep debug ifTrue: [
                    pep assert: [
                        currentBlock guardingExceptionGrp = activeExcGrps removeLast.
                    ].
                ] False: [
                    activeExcGrps removeLast.
                ].
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: expStack\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         popCount: n = ( |
            | 
            popCount: n TransferToLocals: nil).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: expStack\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         popCount: n TransferToLocals: localNames = ( |
            | 
            n = stackSize ifTrue: [ "Nothing left on stack. Can use '.' to separate."
                popCount: n TransferToLocals: localNames FoldingWith: [|:exp|
                    addToBody: exp.
                ].
            ] False: [|selObj|      "Something left on stack, so use ';' to separate."
                selObj: ';' asSelector.
                popCount: n TransferToLocals: localNames FoldingWith: [|:te|
                    "Keep folding into the top-most expression."
                    pushExp: (binarySendNode copySel: selObj Rcvr: popExp Arg: te).
                ].
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: expStack\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         popCount: n TransferToLocals: localNames FoldingWith: foldBlk = ( |
             popped <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
            | 
            popped: (vector copySize: n).
            n reverseDo: [|:i| popped at: i Put: popExp].
            popped do: [|:te. :depth. tep|
                tep: te.
                nil != localNames ifTrue: [| sname <- ''. | 
                    "Use stack to turn 'tep' into assignm."
                    sname: (localNames at: depth).
                    tep isLocalRead not || [tep varName != sname] ifTrue: [
                        pushExp: tep.
                        setLocalVarNamed: sname.
                        tep: popExp.    "Pop the assignment."
                    ].
                ].
                (canEliminateExp: tep) ifFalse: [foldBlk value: tep].
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: expStack\x7fCategory: primitive stack operations\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         popExp = ( |
            | expStack removeLast).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: constants\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         pushConstantObject: obj = ( |
            | 
            pushExp: (constantNode copyConstValue: obj).
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: expStack\x7fCategory: primitive stack operations\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         pushExp: exp = ( |
            | 
            pep assert: [
                "Self no longer considers a sequence of expressions
                 as an expression; so don't permit that on exp stack."
                exp isSequence not.
            ].
            expStack addLast: exp.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: constants\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         pushInteger: i = ( |
            | 
            "Don't use storeString inline in the generated
             code if it is slow."
            (hasFastStoreString: i) ifTrue: [
                pushConstantObject: i.
            ] False: [| name <- ''. |
                name: newLocalVarName.
                addConst: name InitExp: i storeString.
                pushLocalVarNamed: name.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: set and get locals\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         pushLocalVarNamed: vname = ( |
            | 
            pushExp: (localReadNode copyVarName: vname)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: blocks\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         pushNewBlockDo: blk = ( |
            | 
            pushExp: (inNewBlockDo: blk)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: set and get locals\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         pushSelf = ( |
            | 
            pushLocalVarNamed: 'self').
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: exceptions\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         registerActiveExcGrp: excGrp = ( |
            | 
            pep assert: [isFreshBlock].
            pep assert: [nil = currentBlock guardingExceptionGrp].  "Should not be set yet."
            pep debug && [hasActiveExcHandlers] ifTrue: [
                "Check proper nesting of exception coverage regions."
                pep assert: [activeExcGrps last first rangeIsSupersetOf: excGrp first].
            ].
            currentBlock guardingExceptionGrp: excGrp.
            activeExcGrps addLast: excGrp.
            addArg: excGrp first exceptionCleanupName.              "Add cleanup argument."
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: switch stmt\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         registerSwitch: instr = ( |
            | 
            hasSwitchInstructions ifFalse: [switchInstructions: sequence copy].
            switchInstructions add: instr.
            switchInstructions size - 1).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: expNodes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         returnNode = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'returnNode' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep srcCodeGenerator returnNode.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'returnNode' -> () From: ( | {
         'Category: testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         canThrowException = ( |
            | exp canThrowException).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'returnNode' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         copyExp: e = ( |
            | resend.copy initExp: e).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'returnNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         exp.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'returnNode' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         initExp: e = ( |
            | exp: e).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'returnNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         nodeType = 'return'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'returnNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'returnNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         sourceCodeDepth: d = ( |
             expSrc <- ''.
            | 
            expSrc: (exp sourceCodeDepth: d).
            pep assert: [0 < d].
            1 != d ifTrue: [expSrc prependString: '^ '].
            expSrc).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'sendNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         hasDelegatee = ( |
            | nil != delegatee).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'sendNode' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         init = ( |
            | delegatee: nil. resend.init).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'sendNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'sendNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         rcvrOrDelegateeSrcDepth: d = ( |
            | 
            hasDelegatee not ifTrue: [|r <- ''. |
                r: (parenthesizedSourceFor: rcvr Depth: d).
                rcvr isImplicitSelf not && [spaceAfterOK] ifTrue: [r appendString: ' '].
                r.
            ] False: [
                pep assert: [rcvr isImplicitSelf].
                indentableCollectorFor: delegatee, '.'.
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'sendNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         setDelegatee: d = ( |
            | 
            "If we have a delegatee, the receiver must be implicit self."
            pep assert: [rcvr isImplicitSelf].
            delegatee: d).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'sendNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         spaceAfterOK = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: expNodes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         sequenceNode = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'sequenceNode' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep srcCodeGenerator sequenceNode.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'sequenceNode' -> () From: ( | {
         'Category: testing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         canThrowException = ( |
            | 
            exp1 canThrowException || [exp2 canThrowException]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'sequenceNode' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         copyExp1: e1 Exp2: e2 = ( |
            | 
            resend.copy initExp1: e1 Exp2: e2).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'sequenceNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         exp1.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'sequenceNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         exp2.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'sequenceNode' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         initExp1: e1 Exp2: e2 = ( |
            | 
            exp1: e1.
            exp2: e2).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'sequenceNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isSequence = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'sequenceNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         nodeType = 'sequence'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'sequenceNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'abstractNode' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'sequenceNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         priority = 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'sequenceNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         sourceCodeDepth: d = ( |
             res.
            | 
            res: (exp1 sourceCodeDepth: d).
            res appendString: '.\n'.
            res appendCollector: (exp2 sourceCodeDepth: d).
            res).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: set and get locals\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         setLocalVarNamed: vname = ( |
            | 
            pushExp: (localWriteNode copyVarName: vname Exp: popExp)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: valueTransfers\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         setupEntryStackHeight: eh = ( |
            | 
            pep assert: [0 = stackSize].
            eh do: [|:i| pushLocalVarNamed: (stackLocationName: i)].
            pep assert: [stackSize = eh].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: expStack\x7fComment: Return the expression which is \'d\' deep on the
stack. E.g., \'stackAt: 0\' returns the stack top.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         stackAt: d = ( |
            | 
            expStack at: stackSize - 1 - d).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: valueTransfers\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         stackLocationName: i = ( |
            | 
            maxStackLocation: (maxStackLocation max: i).
            'stk_', i printString).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: expStack\x7fCategory: primitive stack operations\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         stackSize = ( |
            | expStack size).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: switch stmt\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         switchInstructions.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: var and arg slots\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         tmpVarCounter <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: var and arg slots\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         traceVarCounter <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: expNodes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         unarySendNode = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'unarySendNode' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep srcCodeGenerator unarySendNode.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'unarySendNode' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         copySel: s Rcvr: r = ( |
            | resend.copy initSel: s Rcvr: r).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'unarySendNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         delegatee.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'unarySendNode' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         initSel: s Rcvr: r = ( |
            | 
            selectorObj: s.
            rcvr: r).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'unarySendNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         needsParentheses: exp = ( |
            | 
            priority > exp priority).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'unarySendNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         nodeType = 'unarySend'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'unarySendNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'sendNode' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'unarySendNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         priority = 3.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'unarySendNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         rcvr.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'unarySendNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         selectorObj.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> 'unarySendNode' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         sourceCodeDepth: d = ( |
             r <- ''.
             s <- ''.
            | 
            r: (rcvrOrDelegateeSrcDepth: d).
            s: selectorObj str.
            "Can't break lines at delegation period!
             E.g., 'fisk.snort' is not the same as 'fisk.\nsnort'."
            pep breakLongLines && [hasDelegatee not] ifTrue: [
                maxLineLen < ((indentOn: d) + r lastLineLen + s size) ifTrue: [
                    r appendString: newline.
                    s: (s indent: halfIndentAmount).
                ].
            ].
            r appendString: s.
            r).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: var and arg slots\x7fComment: Return vector of local names that can be used
to translate \'dup\' and \'swap\'. For the source
code generator, we always return unique names.
At one point, I tried to reuse names, but got
in trouble: some expressions containning a 
previous use of a name could still exist on the
source code expression stack when the next dup
was being translated. So the values got mixed up.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         useTmpNamesUpTo: n = ( |
            | (vector copySize: n) mapBy: [addNewLocalVar]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'srcCodeGenerator' -> () From: ( | {
         'Category: expStack\x7fComment: Pop \'n\' expressions off the expression stack, evaluate \'blk\',
and the push the (retained) expressions back on the stack.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         whileRetaining: n Do: blk = ( |
             retained <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
            | 
            0 = n ifTrue: [^ blk value].   "Just an optim."
            retained: (vector copySize: n).
            retained mapBy: [popExp].
            blk value.
            retained reverseDo: [|:te| pushExp: te].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: misc\x7fCategory: code generators\x7fCategory: reusable code generators\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         srcCodeGenerators <- bootstrap stub -> 'globals' -> 'nil' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: stringManipulation and naming\x7fCategory: naming\x7fComment: Used to find the name of the routine that
constructs strings (for string constants).\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         strConstructorNamer = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'strConstructorNamer' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep strConstructorNamer.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'strConstructorNamer' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         init = ( |
            | 
            mangledName0: nil.
            splitSignature0: nil).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'strConstructorNamer' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (\'init_obj_Array_C:\' copyMutable)\x7fVisibility: private'
        
         mangledName0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'strConstructorNamer' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         nameAsAscii = '<init>'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'strConstructorNamer' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         nameMixin* = bootstrap stub -> 'globals' -> 'pep' -> 'nameMixin' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'strConstructorNamer' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'traits' -> 'oddball' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'strConstructorNamer' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         signatureAsAscii = '([C)V'.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'strConstructorNamer' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         signatureMixin* = bootstrap stub -> 'globals' -> 'pep' -> 'signatureMixin' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'strConstructorNamer' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: private'
        
         splitSignature0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'strConstructorNamer' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         stringConstantCreatorSelector = ( |
            | 
            mangledName).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: counts\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (160)\x7fVisibility: public'
        
         stubs <- 160.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: arrays\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         superclassOfFakeClass = bootstrap setObjectAnnotationOf: bootstrap stub -> 'globals' -> 'pep' -> 'superclassOfFakeClass' -> () From: ( |
             {} = 'ModuleInfo: Creator: globals pep superclassOfFakeClass.
'.
            | ) .
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'superclassOfFakeClass' -> () From: ( | {
         'Category: mutator tracing\x7fComment: The superclass of java.lang.Object has class id 0
by convention. This slot implements the convention.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         trace_class_id = 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'superclassOfFakeClass' -> () From: ( | {
         'Category: mutator tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         trace_no_of_refs = 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'superclassOfFakeClass' -> () From: ( | {
         'Category: mutator tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         trace_no_of_static_refs = 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'superclassOfFakeClass' -> () From: ( | {
         'Category: mutator tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         trace_no_of_vals = 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'superclassOfFakeClass' -> () From: ( | {
         'Category: mutator tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         trace_number_of_first_instance_field = 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'superclassOfFakeClass' -> () From: ( | {
         'Category: mutator tracing\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         type_test_class_names = ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: debugging and options\x7fCategory: flags and params\x7fComment: If true, methods whose (Java) nave
begin with \'pep_hook_\' are treated
specially. Pep will insert a Self method
here instead of the code in the Java
method. For example, this is useful for
benchmarking where we may need to flush 
code between tests.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         testForHooks = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: debugging and options\x7fCategory: routines\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         trace: strBlk = ( |
            | 
            verbose ifTrue: [stderr write: strBlk value].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: debugging and options\x7fCategory: flags and params\x7fCategory: debugging support\x7fComment: Whether to add code to methods
to produce trace of call/return.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         traceCalls = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: debugging and options\x7fCategory: flags and params\x7fComment: Whether to generate code
that generates memory change
traces (on a file).\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         traceMutator = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: type testing\x7fComment: E.g., trim \'Ljava.lang.Object;\' to \'java.lang.Object\' and
\'[[Ljava.lang.Object;\' to \'[[java.lang.Object\'.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         trimLAndSemicolon: str = ( |
             i <- 0.
            | 
            ';' != str last ifTrue: [^ str].
            ['[' = (str at: i)] whileTrue: [i: 1 + i]. "Handle array."
            ('L' != (str at: i)) ifTrue: [^ str].
            (str copySize: i), (str copyFrom: 1 + i UpTo: str size - 1)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: debugging and options\x7fCategory: flags and params\x7fComment: Whether to send update requests to the
UI during translation. May slow down
translation, but gives quicker feedback.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         updateUI = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: ui and interaction\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         updateUIFully = ( |
            | 
            okToUpdateUI ifFalse: [^ self].
            desktop worlds do: [|:w| w displayUpdateNow].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: ui and interaction\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         updateUIPartially = ( |
             lcMir.
             pepMir.
            | 
            okToUpdateUI ifFalse: [^ self].
            lcMir: (reflect: pep loadedClasses).
            pepMir: (reflect: self).
            desktop worlds do: [|:w|
                w reifiedObjects if: lcMir  IsPresentDo: [|:outliner| outliner update].
                w reifiedObjects if: pepMir IsPresentDo: [|:outliner| outliner update].
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: debugging and options\x7fCategory: flags and params\x7fCategory: branches\x7fComment: Whether to generate code
with branch bytecodes.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         useBranches <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: debugging and options\x7fCategory: flags and params\x7fCategory: debugging support\x7fComment: Simulates the \'-verbose\' flag on
the java interpreter.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         verbose = bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: debugging and options\x7fCategory: routines\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         verbose: bool = ( |
            | 
            (reflect: self) at: 'verbose' PutContents: (reflect: bool).
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'waitQueueAllocator' -> () From: ( | {
         'Comment: Allocate the wait queue in \'obj\'.
It is the caller\'s responsibility to assure
that lock on \'obj\' is currently held.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         allocateIn: obj = ( |
            | 
            obj my_waitQ: (semaphore copyCount: 0 Capacity: 1).
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'waitQueueAllocator' -> () From: ( | {
         'Comment: Pretend to be the (still unallocated) wait
queue: no process is currently waiting.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         isEmpty = bootstrap stub -> 'globals' -> 'true' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> 'waitQueueAllocator' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'traits' -> 'oddball' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: misc\x7fCategory: code generators\x7fComment: Code generators are recycled for efficiency. This
method checks out one for temporary use. \'blk\' should
preferably not perform NLR to avoid loosing the code
generator.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         withCodeGeneratorFor: ca Do: blk = ( |
             codeGenerators.
             gen.
             res.
            | 
            codeGenLock protectNoNLR: [
                ca usingBranches ifTrue: [codeGenerators: binCodeGenerators]
                                  False: [codeGenerators: srcCodeGenerators].
                codeGenerators isEmpty ifTrue: [
                    gen: (newCodeGenerator: ca usingBranches).
                ] False: [
                    gen: codeGenerators removeFirst.
                ].
            ].
            gen initCodeAttribute: ca.
            res: (blk value: gen).
            gen cleanup.
            codeGenLock protectNoNLR: [codeGenerators add: gen].
            res).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'pep' -> () From: ( | {
         'Category: counts\x7fCategory: counter ops\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         zeroCounters = ( |
            | 
            bytecodes:      0.
            classes:        0.
            methods:        0.
            splitExpansion: 0.
            stubs:          0.
            lazyLocks:      0).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'process' -> () From: ( | {
         'Category: Java\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         javaThread.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'process' -> () From: ( | {
         'Category: Java\x7fComment: Only public for read access.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         java_exception_handlers.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'process' -> () From: ( | {
         'Category: Java\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         java_interrupted.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'process' -> () From: ( | {
         'Category: Java\x7fComment: Boolean: true if the thread is a system thread,
false if it is a user thread. Set by thread start
native method.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         java_system_thread.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'process' -> () From: ( | {
         'Category: Java\x7fComment: Used for tracing the contenst of the
expression stack just before method calls.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         trace_expStack.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'process' -> () From: ( | {
         'Category: Java\x7fComment: For keeping objects alive that are (temporarily)
only referenced by Self code. In \"native\" code, that is.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (nil)\x7fVisibility: public'
        
         trace_keptAlive.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'process' -> () From: ( | {
         'Category: Java\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (false)\x7fVisibility: public'
        
         trace_lastWasExpStack <- bootstrap stub -> 'globals' -> 'false' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'process' -> () From: ( | {
         'Category: Java\x7fComment: Used for identifying the process when
generating traces. Processes are 1-1 with
stacks.\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         trace_process_id <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'globals' -> 'true' -> () From: ( | {
         'Category: Java runtime\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_asJavaBoolean = ( |
            | 
            pep javaRoot java_true).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'block' -> () From: ( | {
         'Category: Java runtime\x7fCategory: loops\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_loop = ( |
            | loop).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'block' -> () From: ( | {
         'Category: Java runtime\x7fCategory: loops\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_loopContinue = ( |
            | loopContinue).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'block' -> () From: ( | {
         'Category: Java runtime\x7fCategory: loops\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_loopExit = ( |
            | loopExit).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'block' -> () From: ( | {
         'Category: Java runtime\x7fCategory: loops\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_loopExitContinue = ( |
            | loopExitContinue).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'block' -> () From: ( | {
         'Category: Java runtime\x7fCategory: exceptions\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_tryCatch: t1 With: h1 = ( |
            | 
            prepareForHandlers: [|:h. :cleanupBlk|
                h catch: t1 With: [|:e| cleanupBlk value. ^ h1 value: e].
                value: cleanupBlk.   "Execute the try block.
                                      Must do here, to avoid that the
                                      above block literal becomes non-lifo."
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'block' -> () From: ( | {
         'Category: Java runtime\x7fCategory: exceptions\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_tryCatch: t1 With: h1 Catch: t2 With: h2 = ( |
            | 
            prepareForHandlers: [|:h. :cleanupBlk|
                h catch: t2 With: [|:e| cleanupBlk value. ^ h2 value: e].
                h catch: t1 With: [|:e| cleanupBlk value. ^ h1 value: e].
                value: cleanupBlk.   "Execute the try block.
                                      Must do here, to avoid that the
                                      above block literal becomes non-lifo."
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'block' -> () From: ( | {
         'Category: Java runtime\x7fCategory: exceptions\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_tryCatch: t1 With: h1 Catch: t2 With: h2 Catch: t3 With: h3 = ( |
            | 
            prepareForHandlers: [|:h. :cleanupBlk|
                h catch: t3 With: [|:e| cleanupBlk value. ^ h3 value: e].
                h catch: t2 With: [|:e| cleanupBlk value. ^ h2 value: e].
                h catch: t1 With: [|:e| cleanupBlk value. ^ h1 value: e].
                value: cleanupBlk.   "Execute the try block.
                                      Must do here, to avoid that the
                                      above block literal becomes non-lifo."
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'block' -> () From: ( | {
         'Category: Java runtime\x7fCategory: exceptions\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_tryCatch: t1 With: h1 Catch: t2 With: h2 Catch: t3 With: h3 Catch: t4 With: h4 = ( |
            | 
            prepareForHandlers: [|:h. :cleanupBlk|
                h catch: t4 With: [|:e| cleanupBlk value. ^ h4 value: e].
                h catch: t3 With: [|:e| cleanupBlk value. ^ h3 value: e].
                h catch: t2 With: [|:e| cleanupBlk value. ^ h2 value: e].
                h catch: t1 With: [|:e| cleanupBlk value. ^ h1 value: e].
                value: cleanupBlk.   "Execute the try block.
                                      Must do here, to avoid that the
                                      above block literal becomes non-lifo."
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'block' -> () From: ( | {
         'Category: Java runtime\x7fCategory: exceptions\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_tryCatch: t1 With: h1 Catch: t2 With: h2 Catch: t3 With: h3 Catch: t4 With: h4 Catch: t5 With: h5 = ( |
            | 
            prepareForHandlers: [|:h. :cleanupBlk|
                h catch: t5 With: [|:e| cleanupBlk value. ^ h5 value: e].
                h catch: t4 With: [|:e| cleanupBlk value. ^ h4 value: e].
                h catch: t3 With: [|:e| cleanupBlk value. ^ h3 value: e].
                h catch: t2 With: [|:e| cleanupBlk value. ^ h2 value: e].
                h catch: t1 With: [|:e| cleanupBlk value. ^ h1 value: e].
                value: cleanupBlk.   "Execute the try block.
                                      Must do here, to avoid that the
                                      above block literal becomes non-lifo."
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'block' -> () From: ( | {
         'Category: Java runtime\x7fCategory: exceptions\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_tryCatch: t1 With: h1 Catch: t2 With: h2 Catch: t3 With: h3 Catch: t4 With: h4 Catch: t5 With: h5 Catch: t6 With: h6 = ( |
            | 
            prepareForHandlers: [|:h. :cleanupBlk|
                h catch: t6 With: [|:e| cleanupBlk value. ^ h6 value: e].
                h catch: t5 With: [|:e| cleanupBlk value. ^ h5 value: e].
                h catch: t4 With: [|:e| cleanupBlk value. ^ h4 value: e].
                h catch: t3 With: [|:e| cleanupBlk value. ^ h3 value: e].
                h catch: t2 With: [|:e| cleanupBlk value. ^ h2 value: e].
                h catch: t1 With: [|:e| cleanupBlk value. ^ h1 value: e].
                value: cleanupBlk.   "Execute the try block.
                                      Must do here, to avoid that the
                                      above block literal becomes non-lifo."
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'block' -> () From: ( | {
         'Category: Java runtime\x7fCategory: exceptions\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         prepareForHandlers: installBlk = ( |
             h.
             idx <- 0.
            | 
            h: process this java_exception_handlers.
            idx: h size.
            [|:cleanupBlk. res. |
                "The following code is for debugging the exception handlers.
                 [res: (installBlk value: h With: cleanupBlk)] onNonLocalReturn: [|:r|
                    h size > idx ifTrue: [error: 'failed to clear exceptions before NLR'].
                    r.
                 ]."
                res: (installBlk value: h With: cleanupBlk).  "Install the handlers and
                                                               run the guarded code."
                cleanupBlk value.   "Normal return. Do cleanup.
                                     If try-block breaks out with nlr
                                     it is his responsibility to clean
                                     up (onNLR primitive is too expensive)."
                res.
            ] value: ["'cleanup to: ' print. idx printLine." h removeTo: idx]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'byteVector' -> () From: ( | {
         'Category: Java types\x7fCategory: Storing\x7fCategory: signed integral types\x7fCategory: constants\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (2 power: 32)\x7fVisibility: private'
        
         intMaxAbs = 2 power: 32.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'byteVector' -> () From: ( | {
         'Category: Java types\x7fCategory: Storing\x7fCategory: signed integral types\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         javaAt: idx PutByte: v = ( |
            | javaAt: idx PutByte: v IfFail: raiseError).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'byteVector' -> () From: ( | {
         'Category: Java types\x7fCategory: Storing\x7fCategory: signed integral types\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         javaAt: idx PutByte: v IfFail: errBlk = ( |
            | 
            cIntSize: javaByteSize Signed: true At: idx Put: v IfFail: errBlk).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'byteVector' -> () From: ( | {
         'Category: Java types\x7fCategory: Storing\x7fCategory: floating point types\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         javaAt: idx PutDouble: v = ( |
            | javaAt: idx PutDouble: v IfFail: raiseError).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'byteVector' -> () From: ( | {
         'Category: Java types\x7fCategory: Storing\x7fCategory: floating point types\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         javaAt: idx PutDouble: v IfFail: errBlk = ( |
            | cFloatDouble: true At: idx Put: v IfFail: errBlk).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'byteVector' -> () From: ( | {
         'Category: Java types\x7fCategory: Storing\x7fCategory: floating point types\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         javaAt: idx PutFloat: v = ( |
            | javaAt: idx PutFloat: v IfFail: raiseError).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'byteVector' -> () From: ( | {
         'Category: Java types\x7fCategory: Storing\x7fCategory: floating point types\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         javaAt: idx PutFloat: v IfFail: errBlk = ( |
            | 
            cFloatDouble: false At: idx Put: v IfFail: errBlk).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'byteVector' -> () From: ( | {
         'Category: Java types\x7fCategory: Storing\x7fCategory: signed integral types\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         javaAt: idx PutInt: v = ( |
            | javaAt: idx PutInt: v IfFail: raiseError).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'byteVector' -> () From: ( | {
         'Category: Java types\x7fCategory: Storing\x7fCategory: signed integral types\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         javaAt: idx PutInt: v IfFail: errBlk = ( |
            | 
            cIntSize: javaIntSize Signed: true At: idx Put: v IfFail: [|:e|
                ('badTypeError' isPrefixOf: e) ifFalse: [^ errBlk value: e].
                "v must be an int32."
                v asInt32 bytesDo: [|:b. :i|
                    at: idx + i PutByte: b IfAbsent: [|:e| ^ errBlk value: e].
                ].
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'byteVector' -> () From: ( | {
         'Category: Java types\x7fCategory: Storing\x7fCategory: signed integral types\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         javaAt: idx PutLong: v = ( |
            | javaAt: idx PutLong: v IfFail: raiseError).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'byteVector' -> () From: ( | {
         'Category: Java types\x7fCategory: Storing\x7fCategory: signed integral types\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         javaAt: idx PutLong: v IfFail: errBlk = ( |
            | 
            cIntSize: javaLongSize Signed: true At: idx Put: v IfFail: [|:e|
                ('badTypeError' isPrefixOf: e) ifFalse: [^ errBlk value: e].
                "v must be an int64."
                v asInt64 bytesDo: [|:b. :i|
                    at: idx + i PutByte: b IfAbsent: [|:e| ^ errBlk value: e].
                ].
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'byteVector' -> () From: ( | {
         'Category: Java types\x7fCategory: Storing\x7fCategory: signed integral types\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         javaAt: idx PutShort: v = ( |
            | javaAt: idx PutShort: v IfFail: raiseError).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'byteVector' -> () From: ( | {
         'Category: Java types\x7fCategory: Storing\x7fCategory: signed integral types\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         javaAt: idx PutShort: v IfFail: errBlk = ( |
            | 
            cIntSize: javaShortSize Signed: true At: idx Put: v IfFail: errBlk).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'byteVector' -> () From: ( | {
         'Category: Java types\x7fCategory: Retrieving\x7fCategory: signed integral types\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         javaByteAt: idx = ( |
            | javaByteAt: idx IfFail: raiseError).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'byteVector' -> () From: ( | {
         'Category: Java types\x7fCategory: Retrieving\x7fCategory: signed integral types\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         javaByteAt: idx IfFail: errBlk = ( |
            | 
            bigEndianIntSize: javaByteSize Signed: true At: idx IfFail: errBlk).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'byteVector' -> () From: ( | {
         'Category: Java types\x7fCategory: bit sizes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         javaByteSize = 8.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'byteVector' -> () From: ( | {
         'Category: Java types\x7fCategory: bit sizes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         javaCharSize = 16.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'byteVector' -> () From: ( | {
         'Category: Java types\x7fCategory: Retrieving\x7fCategory: floating point types\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         javaDoubleAt: idx = ( |
            | javaDoubleAt: idx IfFail: raiseError).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'byteVector' -> () From: ( | {
         'Category: Java types\x7fCategory: Retrieving\x7fCategory: floating point types\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         javaDoubleAt: idx IfFail: errBlk = ( |
            | cFloatDouble: true At: idx IfFail: errBlk).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'byteVector' -> () From: ( | {
         'Category: Java types\x7fCategory: Retrieving\x7fCategory: floating point types\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         javaFloatAt: idx = ( |
            | javaFloatAt: idx IfFail: raiseError).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'byteVector' -> () From: ( | {
         'Category: Java types\x7fCategory: Retrieving\x7fCategory: floating point types\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         javaFloatAt: idx IfFail: errBlk = ( |
            | cFloatDouble: false At: idx IfFail: errBlk).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'byteVector' -> () From: ( | {
         'Category: Java types\x7fCategory: Retrieving\x7fCategory: signed integral types\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         javaIntAt: idx = ( |
            | javaIntAt: idx IfFail: raiseError).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'byteVector' -> () From: ( | {
         'Category: Java types\x7fCategory: Retrieving\x7fCategory: signed integral types\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         javaIntAt: idx IfFail: errBlk = ( |
            | 
            bigEndianIntSize: javaIntSize Signed: true At: idx IfFail: [|:e|
                ('overflowError' isPrefixOf: e) ifFalse: [^ errBlk value: e].
                int32 copyTakeBigEndianBytesFrom: self Index: idx IfFail: errBlk.
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'byteVector' -> () From: ( | {
         'Category: Java types\x7fCategory: bit sizes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         javaIntSize = 32.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'byteVector' -> () From: ( | {
         'Category: Java types\x7fCategory: Retrieving\x7fCategory: signed integral types\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         javaLongAt: idx = ( |
            | javaLongAt: idx IfFail: raiseError).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'byteVector' -> () From: ( | {
         'Category: Java types\x7fCategory: Retrieving\x7fCategory: signed integral types\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         javaLongAt: idx IfFail: errBlk = ( |
            | 
            bigEndianIntSize: javaLongSize Signed: true At: idx IfFail: [|:e|
                ('overflowError' isPrefixOf: e) ifFalse: [^ errBlk value: e].
                int64 copyTakeBigEndianBytesFrom: self Index: idx IfFail: errBlk.
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'byteVector' -> () From: ( | {
         'Category: Java types\x7fCategory: bit sizes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         javaLongSize = 64.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'byteVector' -> () From: ( | {
         'Category: Java types\x7fCategory: Retrieving\x7fCategory: signed integral types\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         javaShortAt: idx = ( |
            | javaShortAt: idx IfFail: raiseError).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'byteVector' -> () From: ( | {
         'Category: Java types\x7fCategory: Retrieving\x7fCategory: signed integral types\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         javaShortAt: idx IfFail: errBlk = ( |
            | 
            bigEndianIntSize: javaShortSize Signed: true At: idx IfFail: errBlk).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'byteVector' -> () From: ( | {
         'Category: Java types\x7fCategory: bit sizes\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         javaShortSize = 16.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'byteVector' -> () From: ( | {
         'Category: Java types\x7fCategory: Retrieving\x7fCategory: unsigned integral types\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         javaUnsignedByteAt: idx = ( |
            | javaUnsignedByteAt: idx IfFail: raiseError).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'byteVector' -> () From: ( | {
         'Category: Java types\x7fCategory: Retrieving\x7fCategory: unsigned integral types\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         javaUnsignedByteAt: idx IfFail: errBlk = ( |
            | 
            byteAt: idx IfAbsent: errBlk).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'byteVector' -> () From: ( | {
         'Category: Java types\x7fCategory: Retrieving\x7fCategory: unsigned integral types\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         javaUnsignedIntAt: idx = ( |
            | javaUnsignedIntAt: idx IfFail: raiseError).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'byteVector' -> () From: ( | {
         'Category: Java types\x7fCategory: Retrieving\x7fCategory: unsigned integral types\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         javaUnsignedIntAt: idx IfFail: errBlk = ( |
            | 
            bigEndianIntSize: javaIntSize Signed: false At: idx IfFail: [|:e|
                ('overflowError' isPrefixOf: e) ifFalse: [^ errBlk value: e].
                javaUnsignedIntegralAt: idx BitSize: javaIntSize IfFail: errBlk.
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'byteVector' -> () From: ( | {
         'Category: Java types\x7fCategory: Retrieving\x7fCategory: unsigned integral types\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         javaUnsignedIntegralAt: idx BitSize: n IfFail: errBlk = ( |
             res <- 0.
            | 
            idx upTo: idx + (n / typeSizes bitsPerByte) Do: [|:i|
                res: res + ((byteAt: i IfAbsent: [|:e| ^ errBlk value: e]) * (2 power: i*8)).
            ].
            res).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'byteVector' -> () From: ( | {
         'Category: Java types\x7fCategory: Retrieving\x7fCategory: unsigned integral types\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         javaUnsignedShortAt: idx = ( |
            | javaUnsignedShortAt: idx IfFail: raiseError).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'byteVector' -> () From: ( | {
         'Category: Java types\x7fCategory: Retrieving\x7fCategory: unsigned integral types\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         javaUnsignedShortAt: idx IfFail: errBlk = ( |
            | 
            bigEndianIntSize: javaShortSize Signed: false At: idx IfFail: errBlk).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'byteVector' -> () From: ( | {
         'Category: Java types\x7fCategory: Storing\x7fCategory: signed integral types\x7fCategory: constants\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (2 power: 64)\x7fVisibility: private'
        
         longMaxAbs = 2 power: 64.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'byteVector' -> () From: ( | {
         'Category: Java types\x7fCategory: Storing\x7fCategory: signed integral types\x7fCategory: constants\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (2 power: 16)\x7fVisibility: private'
        
         shortMaxAbs = 2 power: 16.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'process' -> () From: ( | {
         'Category: Java runtime\x7fComment: Call on prototypical process to guard
against confusing exception handling errors
due to corrupted initial state.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         checkInitialJavaExcHandlers = ( |
            | 
            nil = java_exception_handlers ifTrue: [^ self].
            warning: 'corrupted exception handlers in prototype ',
                     'process:\nresetting to nil'.
            clearJavaExcHandlers).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'process' -> () From: ( | {
         'Category: Java runtime\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         checkJavaExcHandlerBalance = ( |
            | 
            (nil != java_exception_handlers) &&
            [0 < java_exception_handlers size] ifTrue: [
                0 warning: 'unbalanced exception handler stack, size = ',
                           java_exception_handlers size printString.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'process' -> () From: ( | {
         'Category: Java runtime\x7fComment: Good idea to call this method, if you
may have been running java code in initial
(non-scheduled) process to avoid corruption
of prototype.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         clearJavaExcHandlers = ( |
            | 
            java_exception_handlers: nil).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'process' -> 'handlersProto' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         allocateSize: n = ( |
            | 
            handlers: (handlers copySize: n).
            tests:    (tests    copySize: n)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'process' -> 'handlersProto' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         catch: t With: h = ( |
             s <- 0.
            | 
            s: size.
            "'installing at: ' print. s printLine."
            tests at: s Put: t IfAbsent: [
                "Yes, I measured. It *is* faster to 
                 reallocate in a fail block than testing
                 the size before attempting the store."
                tests at: s Put: t.
            ].
            handlers at: s Put: h.
            size: 1 + s.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'process' -> 'handlersProto' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         copy = ( |
            | resend.copy init).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'process' -> 'handlersProto' -> () From: ( | {
         'Category: state\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: private'
        
         handlers <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'process' -> 'handlersProto' -> () From: ( | {
         'Category: copying\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         init = ( |
            | 
            size: 0.
            allocateSize: 30).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'process' -> 'handlersProto' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         parent* = bootstrap stub -> 'traits' -> 'clonable' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'process' -> 'handlersProto' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         removeTo: index = ( |
            | 
            pep assert: [index < size].
            size: index).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'process' -> 'handlersProto' -> () From: ( | {
         'Category: state\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: public'
        
         size <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'process' -> 'handlersProto' -> () From: ( | {
         'Category: state\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (vector)\x7fVisibility: private'
        
         tests <- ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'process' -> 'handlersProto' -> () From: ( | {
         'ModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         throw: exc = ( |
            | 
            size reverseDo: [|:i|
                ((tests at: i) value: exc) ifTrue: [
                    false ifTrue: [
                        'caught: ' print.
                         exc exception_self_printString printLine.
                    ].
                    (handlers at: i) value: exc.   "Invoke the handler."
                    error: 'should not get here'.
                ].
            ].
            error: 'uncaught exception, ', exc exception_self_printString).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'process' -> () From: ( | {
         'Category: Java runtime\x7fComment: Initialize the exception handlers
if it hasn\'t been done previously.\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         initJavaExcHandlers = ( |
            | 
            nil = java_exception_handlers ifTrue: [
                java_exception_handlers: handlersProto copy.
                pep ifTraceMutator: [
                    trace_process_id:      pep mutatorTracer getNextProcessID.
                    trace_expStack:        sequence copy.
                    trace_keptAlive:       sequence copy.
                    trace_lastWasExpStack: false. 
                ].
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'process' -> () From: ( | {
         'Category: Java runtime\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_setPriority: pri = ( |
            | 
            priority: pri asInteger.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: comparisons\x7fModuleInfo: Module: pep InitialContents: FollowSlot'
        
         java_inst_cmp32: i = ( |
            | 
            int32 cmp: self And: i).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: comparisons\x7fModuleInfo: Module: pep InitialContents: FollowSlot'
        
         java_inst_cmp64: i = ( |
            | int64 cmp: self And: i).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: conversions\x7fModuleInfo: Module: pep InitialContents: FollowSlot'
        
         java_inst_i2b = ( |
            | 
            asInt8).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: conversions\x7fModuleInfo: Module: pep InitialContents: FollowSlot'
        
         java_inst_i2c = ( |
            | && 16rffff).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: conversions\x7fModuleInfo: Module: pep InitialContents: FollowSlot'
        
         java_inst_i2d = ( |
            | 
            asFloat).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: conversions\x7fModuleInfo: Module: pep InitialContents: FollowSlot'
        
         java_inst_i2f = ( |
            | 
            asFloat).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: conversions\x7fModuleInfo: Module: pep InitialContents: FollowSlot'
        
         java_inst_i2l = ( |
            | self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: conversions\x7fModuleInfo: Module: pep InitialContents: FollowSlot'
        
         java_inst_i2s = ( |
            | 
            asInt16).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: arithmetic\x7fCategory: ints\x7fModuleInfo: Module: pep InitialContents: FollowSlot'
        
         java_inst_iadd: i = ( |
            | 
            _IntAdd: i IfFail: [int32 add: self And: i]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: boolean operations\x7fCategory: ints\x7fModuleInfo: Module: pep InitialContents: FollowSlot'
        
         java_inst_iand: i = ( |
            | 
            _IntAnd: i IfFail: [int32 and: self And: i]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: arithmetic\x7fCategory: ints\x7fModuleInfo: Module: pep InitialContents: FollowSlot'
        
         java_inst_idiv: i = ( |
            | 
            _IntDiv: i IfFail: [
                int32 java_inst_helper_div: self And: i.
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: comparisons\x7fModuleInfo: Module: pep InitialContents: FollowSlot'
        
         java_inst_if_icmpeq: i = ( |
            | 
            _IntEQ: i IfFail: [0 = (java_inst_cmp32: i)]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: comparisons\x7fModuleInfo: Module: pep InitialContents: FollowSlot'
        
         java_inst_if_icmpge: i = ( |
            | 
            _IntGE: i IfFail: [-1 != (java_inst_cmp32: i)]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: comparisons\x7fModuleInfo: Module: pep InitialContents: FollowSlot'
        
         java_inst_if_icmpgt: i = ( |
            | 
            _IntGT: i IfFail: [1 = (java_inst_cmp32: i)]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: comparisons\x7fModuleInfo: Module: pep InitialContents: FollowSlot'
        
         java_inst_if_icmple: i = ( |
            | 
            _IntLE: i IfFail: [1 != (java_inst_cmp32: i)]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: comparisons\x7fModuleInfo: Module: pep InitialContents: FollowSlot'
        
         java_inst_if_icmplt: i = ( |
            | 
            _IntLT: i IfFail: [-1 = (java_inst_cmp32: i)]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: comparisons\x7fModuleInfo: Module: pep InitialContents: FollowSlot'
        
         java_inst_if_icmpne: i = ( |
            | 
            _IntNE: i IfFail: [0 != (java_inst_cmp32: i)]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: comparisons\x7fModuleInfo: Module: pep InitialContents: FollowSlot'
        
         java_inst_ifeq = ( |
            | java_inst_if_icmpeq: 0).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: comparisons\x7fModuleInfo: Module: pep InitialContents: FollowSlot'
        
         java_inst_ifge = ( |
            | java_inst_if_icmpge: 0).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: comparisons\x7fModuleInfo: Module: pep InitialContents: FollowSlot'
        
         java_inst_ifgt = ( |
            | 
            java_inst_if_icmpgt: 0).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: comparisons\x7fModuleInfo: Module: pep InitialContents: FollowSlot'
        
         java_inst_ifle = ( |
            | java_inst_if_icmple: 0).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: comparisons\x7fModuleInfo: Module: pep InitialContents: FollowSlot'
        
         java_inst_iflt = ( |
            | java_inst_if_icmplt: 0).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: comparisons\x7fModuleInfo: Module: pep InitialContents: FollowSlot'
        
         java_inst_ifne = ( |
            | java_inst_if_icmpne: 0).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: arithmetic\x7fCategory: ints\x7fModuleInfo: Module: pep InitialContents: FollowSlot'
        
         java_inst_imul: i = ( |
            | 
            _IntMul: i IfFail: [int32 mul: self And: i]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: arithmetic\x7fCategory: ints\x7fModuleInfo: Module: pep InitialContents: FollowSlot'
        
         java_inst_ineg = ( |
            | 0 java_inst_isub: self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: boolean operations\x7fCategory: ints\x7fModuleInfo: Module: pep InitialContents: FollowSlot'
        
         java_inst_ior: i = ( |
            | 
            _IntOr: i IfFail: [int32 or: self And: i]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: arithmetic\x7fCategory: ints\x7fModuleInfo: Module: pep InitialContents: FollowSlot'
        
         java_inst_irem: i = ( |
            | 
            "Go directly to the int32 def. since the Self def. of remainder
             may have different sign of result."
            int32 java_inst_helper_rem: self And: i).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: shifts\x7fCategory: ints\x7fModuleInfo: Module: pep InitialContents: FollowSlot'
        
         java_inst_ishl: i = ( |
            | 
            int32 shl: self And: i).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: shifts\x7fCategory: ints\x7fModuleInfo: Module: pep InitialContents: FollowSlot'
        
         java_inst_ishr: i = ( |
            | 
            int32 shr: self And: i).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: arithmetic\x7fCategory: ints\x7fModuleInfo: Module: pep InitialContents: FollowSlot'
        
         java_inst_isub: i = ( |
            | 
            _IntSub: i IfFail: [int32 sub: self And: i]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: shifts\x7fCategory: ints\x7fModuleInfo: Module: pep InitialContents: FollowSlot'
        
         java_inst_iushr: i = ( |
            | 
            int32 ushr: self And: i).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: boolean operations\x7fCategory: ints\x7fModuleInfo: Module: pep InitialContents: FollowSlot'
        
         java_inst_ixor: i = ( |
            | 
            _IntXor: i IfFail: [int32 xor: self And: i]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: conversions\x7fModuleInfo: Module: pep InitialContents: FollowSlot'
        
         java_inst_l2d = ( |
            | asFloat).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: conversions\x7fModuleInfo: Module: pep InitialContents: FollowSlot'
        
         java_inst_l2f = ( |
            | asFloat).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: conversions\x7fModuleInfo: Module: pep InitialContents: FollowSlot'
        
         java_inst_l2i = ( |
            | self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: arithmetic\x7fCategory: longs\x7fModuleInfo: Module: pep InitialContents: FollowSlot'
        
         java_inst_ladd: i = ( |
            | 
            _IntAdd: i IfFail: [int64 add: self And: i]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: boolean operations\x7fCategory: longs\x7fModuleInfo: Module: pep InitialContents: FollowSlot'
        
         java_inst_land: ll = ( |
            | 
            _IntAnd: ll IfFail: [int64 and: self And: ll]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: comparisons\x7fModuleInfo: Module: pep InitialContents: FollowSlot'
        
         java_inst_lcmp: ll = ( |
            | 
            (_IntLT: ll IfFail: [^ java_inst_cmp64: ll]) ifTrue: [^ -1].
            (_IntEQ: ll) ifTrue: 0 False: 1).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: arithmetic\x7fCategory: longs\x7fModuleInfo: Module: pep InitialContents: FollowSlot'
        
         java_inst_ldiv: i = ( |
            | 
            _IntDiv: i IfFail: [
                int64 java_inst_helper_div: self And: i.
            ]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: arithmetic\x7fCategory: longs\x7fModuleInfo: Module: pep InitialContents: FollowSlot'
        
         java_inst_lmul: i = ( |
            | 
            _IntMul: i IfFail: [int64 mul: self And: i]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: arithmetic\x7fCategory: longs\x7fModuleInfo: Module: pep InitialContents: FollowSlot'
        
         java_inst_lneg = ( |
            | 0 java_inst_lsub: self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: control flow\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_lookupswitchTargets: targetBlocks Matches: matchValues = ( |
             i <- 0.
            | 
            20 > matchValues size ifTrue: [
                i: (matchValues keyOf: self IfAbsent: [targetBlocks size]).
            ] False: [
                i: (0 to: matchValues size - 1 BinarySearchBySignOf: [|:m|
                    (matchValues at: m) - self.
                ] IfAbsent: [targetBlocks size]).
            ].
            (targetBlocks at: i) value).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: boolean operations\x7fCategory: longs\x7fModuleInfo: Module: pep InitialContents: FollowSlot'
        
         java_inst_lor: ll = ( |
            | 
            _IntOr: ll IfFail: [int64 or: self And: ll]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: arithmetic\x7fCategory: longs\x7fModuleInfo: Module: pep InitialContents: FollowSlot'
        
         java_inst_lrem: ll = ( |
            | 
            "Go directly to the int64 def. since the Self def. of remainder
             may have different sign of result."
            int64 java_inst_helper_rem: self And: ll).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: shifts\x7fCategory: longs\x7fModuleInfo: Module: pep InitialContents: FollowSlot'
        
         java_inst_lshl: i = ( |
            | 
            int64 shl: self And: i).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: shifts\x7fCategory: longs\x7fModuleInfo: Module: pep InitialContents: FollowSlot'
        
         java_inst_lshr: i = ( |
            | 
            int64 shr: self And: i).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: arithmetic\x7fCategory: longs\x7fModuleInfo: Module: pep InitialContents: FollowSlot'
        
         java_inst_lsub: i = ( |
            | 
            _IntSub: i IfFail: [int64 sub: self And: i]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: shifts\x7fCategory: longs\x7fModuleInfo: Module: pep InitialContents: FollowSlot'
        
         java_inst_lushr: i = ( |
            | 
            int64 ushr: self And: i).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: boolean operations\x7fCategory: longs\x7fModuleInfo: Module: pep InitialContents: FollowSlot'
        
         java_inst_lxor: ll = ( |
            | 
            _IntXor: ll IfFail: [int64 xor: self And: ll]).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: control flow\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_makeVector = ( |
            | java_inst_vectorProto _Clone: self Filler: 0).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: control flow\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_tableswitchTargets: targetBlocks Low: low = ( |
            | 
            (targetBlocks at: "self" - low IfAbsent: [targetBlocks last]) value).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'smallInt' -> () From: ( | {
         'Category: Java runtime\x7fCategory: control flow\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_vectorProto = ((bootstrap stub -> 'globals') \/-> 'vector') -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'xlib' -> 'events' -> 'xButtonPressedEvent' -> () From: ( | {
         'Category: Java runtime\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_inst_tiny_awt_processEvent: tinyWindow = ( |
             but <- 0.
             st <- 0.
            | 
            st: state.
            but: button.
            2 = but ifTrue: [
                st: st || button2Mask.
            ] False: [
            3 = but ifTrue: [
                st: st || button3Mask.
            ]].
            awt_upcall: [
                tinyWindow handleMouseDown_J: java_inst_getTime
                                           I: x I: y
                                           I: (java_inst_getModifiersFromState: st).
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'xlib' -> 'events' -> 'xButtonReleasedEvent' -> () From: ( | {
         'Category: Java runtime\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_inst_tiny_awt_processEvent: tinyWindow = ( |
            | 
            awt_upcall: [
                tinyWindow handleMouseUp_J: java_inst_getTime
                                         I: x I: y
                                         I: java_inst_getModifiers.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'xlib' -> 'events' -> 'xClientMessageEvent' -> () From: ( | {
         'Category: Java runtime\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_inst_tiny_awt_processEvent: tinyWindow = ( |
            | 
            (message_type = pep javaRoot tiny_awt_wm_protocols_atom) &&
            [(atomAt: 0)  = pep javaRoot tiny_awt_wm_delete_window_atom] ifTrue: [
                awt_upcall: [tinyWindow handleQuitWindow].
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'xlib' -> 'events' -> 'xConfigureEvent' -> () From: ( | {
         'Category: Java runtime\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_inst_tiny_awt_processEvent: tinyWindow = ( |
             disp.
             trans.
             win.
             winattrs.
            | 
            disp: display.
            win:  window.
            winattrs: (disp xGetWindowAttributesIn: win).
            trans: (disp xTranslateCoordinatesSrcWindow: win
                                              DstWindow: pep javaRoot awt_root
                                                   SrcX: 0 SrcY: 0).
            awt_upcall: [
                tinyWindow handleReshape_I: trans newX
                                         I: trans newY
                                         I: winattrs width
                                         I: winattrs height.
            ].
            winattrs delete.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'xlib' -> 'events' -> 'xEnterWindowEvent' -> () From: ( | {
         'Category: Java runtime\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_inst_tiny_awt_processEvent: tinyWindow = ( |
            | 
            awt_upcall: [
                 tinyWindow handleMouseEnter_J: java_inst_getTime
                                             I: x I: y.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'xlib' -> 'events' -> 'xEvent' -> () From: ( | {
         'Category: Java runtime\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         awt_upcall: blk = ( |
            | 
            pep javaRoot awt_upcall: blk).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'xlib' -> 'events' -> 'xEvent' -> () From: ( | {
         'Category: Java runtime\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_inst_getTime = ( |
             raw.
            | 
            raw: rawTime.
            (time msecPerDay java_inst_lmul: (raw at: 0)) java_inst_ladd: (raw at: 1)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'xlib' -> 'events' -> 'xEvent' -> () From: ( | {
         'Category: Java runtime\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_tiny_awt_processAndDeleteEvent = ( |
            | 
            java_inst_tiny_awt_processEvent.
            delete.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'xlib' -> 'events' -> 'xEvent' -> () From: ( | {
         'Category: Java runtime\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_inst_tiny_awt_processEvent = ( |
             tinyWindow.
             win.
            | 
            win: (windowIfFail: [^ self]).
            tinyWindow: (pep javaRoot tiny_find: win IfAbsent: [^ self]).
            java_inst_tiny_awt_processEvent: tinyWindow.
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'xlib' -> 'events' -> 'xEvent' -> () From: ( | {
         'Category: Java runtime\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_inst_tiny_awt_processEvent: tinyWindow = ( |
            | 
            'tiny_awt: ignoring event: ' print. 
            objectID print. ' = ' print. typeName printLine).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'xlib' -> 'events' -> 'xExposeEvent' -> () From: ( | {
         'Category: Java runtime\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (pep javaRoot java_null)\x7fVisibility: private'
        
         java_exposeWin <- bootstrap stub -> 'globals' -> 'pep' -> 'javaRoot' -> 'java_null' -> ().
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'xlib' -> 'events' -> 'xExposeEvent' -> () From: ( | {
         'Category: Java runtime\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         java_expose_x1 <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'xlib' -> 'events' -> 'xExposeEvent' -> () From: ( | {
         'Category: Java runtime\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         java_expose_x2 <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'xlib' -> 'events' -> 'xExposeEvent' -> () From: ( | {
         'Category: Java runtime\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         java_expose_y1 <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'xlib' -> 'events' -> 'xExposeEvent' -> () From: ( | {
         'Category: Java runtime\x7fModuleInfo: Module: pep InitialContents: InitializeToExpression: (0)\x7fVisibility: private'
        
         java_expose_y2 <- 0.
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'xlib' -> 'events' -> 'xExposeEvent' -> () From: ( | {
         'Category: Java runtime\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_inst_handleExpose = ( |
            | 
            awt_upcall: [
                java_exposeWin handleExpose_I: java_expose_x1
                                            I: java_expose_y1
                                            I: (java_expose_x2 java_inst_isub: java_expose_x1)
                                            I: (java_expose_y2 java_inst_isub: java_expose_y1).
            ].
            java_exposeWin: pep javaRoot java_null.   "Done with this batch!"
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'xlib' -> 'events' -> 'xExposeEvent' -> () From: ( | {
         'Category: Java runtime\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: public'
        
         java_inst_initEventState = ( |
            | 
            java_expose_x1: 0.   "These four are strictly speaking not necessary."
            java_expose_y1: 0.
            java_expose_x2: 0.
            java_expose_y2: 0.
            java_exposeWin: pep javaRoot java_null. "This one is crucial."
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'xlib' -> 'events' -> 'xExposeEvent' -> () From: ( | {
         'Category: Java runtime\x7fComment: Note: this code uses state in the traits object. It will
not work correctly, if multiple event handlers start processing
java events concurrently. (Is this likely to happen?)\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_inst_tiny_awt_processEvent: tinyWindow = ( |
             x1 <- 0.
             x2 <- 0.
             y1 <- 0.
             y2 <- 0.
            | 
            x1: x.
            y1: y.
            x2: x1 + width.
            y2: y1 + height.
            (tinyWindow _Eq: java_exposeWin) ifTrue: [  "Same window as last time; extend region."
                java_expose_x1: (java_expose_x1 min: x1).
                java_expose_y1: (java_expose_y1 min: y1).
                java_expose_x2: (java_expose_x2 max: x2).
                java_expose_y2: (java_expose_y2 max: y2).
            ] False: [
                java_exposeWin java_inst_ifnonnull ifTrue: [  "Handle exposure of previous region."
                    java_inst_handleExpose.
                ].
                java_exposeWin: tinyWindow.  "Start new region."
                java_expose_x1: x1.
                java_expose_y1: y1.
                java_expose_x2: x2.
                java_expose_y2: y2.
            ].
            0 = count ifTrue: [
                 "May not get any more expose events for a while; close the deal."
                 java_inst_handleExpose.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'xlib' -> 'events' -> 'xFocusInEvent' -> () From: ( | {
         'Category: Java runtime\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_inst_tiny_awt_processEvent: tinyWindow = ( |
            | 
            awt_upcall: [tinyWindow handleFocusIn].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'xlib' -> 'events' -> 'xFocusOutEvent' -> () From: ( | {
         'Category: Java runtime\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_inst_tiny_awt_processEvent: tinyWindow = ( |
            | 
            awt_upcall: [tinyWindow handleFocusOut].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'xlib' -> 'events' -> 'xGraphicsExposeEvent' -> () From: ( | {
         'Category: Java runtime\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_inst_tiny_awt_processEvent: tinyWindow = ( |
            | 
            awt_upcall: [
                tinyWindow handleExpose_I: x I: y I: width I: height.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'xlib' -> 'events' -> 'xInputEvent' -> () From: ( | {
         'Category: Java runtime\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_inst_getModifiers = ( |
            | java_inst_getModifiersFromState: state).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'xlib' -> 'events' -> 'xInputEvent' -> () From: ( | {
         'Category: Java runtime\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_inst_getModifiersFromState: st = ( |
             jmasks.
             modifiers <- 0.
            | 
            jmasks: pep loadedClasses class_java_awt_Event.
            0 != (st && shiftMask) ifTrue: [
                modifiers: modifiers || jmasks java_awt_Event_SHIFT__MASK_.
            ].
            0 != (st && controlMask) ifTrue: [
                modifiers: modifiers || jmasks java_awt_Event_CTRL__MASK_.
            ].
            0 != (st && mod1Mask) ifTrue: [
                modifiers: modifiers || jmasks java_awt_Event_META__MASK_.
            ].
            0 != (st && mod4Mask) ifTrue: [
                modifiers: modifiers || jmasks java_awt_Event_ALT__MASK_.
            ].
            0 != (st && button2Mask) ifTrue: [
                modifiers: modifiers || jmasks java_awt_Event_ALT__MASK_.
            ].
            0 != (st && button3Mask) ifTrue: [
                modifiers: modifiers || jmasks java_awt_Event_META__MASK_.
            ].
            modifiers).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'xlib' -> 'events' -> 'xKeyEvent' -> () From: ( | {
         'Category: Java runtime\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_inst_handleAsciiKey: keysym = ( |
             key <- 0.
            | 
            key: keysym.
            java_inst_hasControl ifTrue: [| ch <- ''. |
                ch: key asCharacter.
                ch isUpperCase ifTrue: [
                    key: 1 + (key- 'A' asByte).
                ] False: [
                ch isLowerCase ifTrue: [
                   key: 1 + (key - 'a' asByte).
                ] False: [
                ('[]\\_' includes: ch) ifTrue: [
                   key: key - 64.
                ]]].
            ].
            key).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'xlib' -> 'events' -> 'xKeyEvent' -> () From: ( | {
         'Category: Java runtime\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_inst_handleNonasciiKey: k IfAction: aBlk = ( |
             j.
            | 
            xk_BackSpace   = k ifTrue: [^ 8r010].
            xk_Delete      = k ifTrue: [^ 8r177].
            xk_Tab         = k ifTrue: [^ '\t' asByte].
            xk_Return      = k ifTrue: [^ '\n' asByte].
            xk_Linefeed    = k ifTrue: [^ '\n' asByte].
            xk_KP_Enter    = k ifTrue: [^ '\n' asByte].
            xk_Escape      = k ifTrue: [^ 27].
            xk_KP_Decimal  = k ifTrue: [^ '.' asByte].
            xk_KP_Add      = k ifTrue: [^ '+' asByte].
            xk_KP_Subtract = k ifTrue: [^ '-' asByte].
            xk_KP_Divide   = k ifTrue: [^ '/' asByte].
            xk_KP_Multiply = k ifTrue: [^ '*' asByte].
            xk_KP_0        = k ifTrue: [^ '0' asByte].
            xk_KP_1        = k ifTrue: [^ '1' asByte].
            xk_KP_2        = k ifTrue: [^ '2' asByte].
            xk_KP_3        = k ifTrue: [^ '3' asByte].
            xk_KP_4        = k ifTrue: [^ '4' asByte].
            xk_KP_5        = k ifTrue: [^ '5' asByte].
            xk_KP_6        = k ifTrue: [^ '6' asByte].
            xk_KP_7        = k ifTrue: [^ '7' asByte].
            xk_KP_8        = k ifTrue: [^ '8' asByte].
            xk_KP_9        = k ifTrue: [^ '9' asByte].
            j: pep loadedClasses class_java_awt_Event.
            aBlk value.
            xk_F27         = k ifTrue: [^ j java_awt_Event_HOME_].
            xk_Home        = k ifTrue: [^ j java_awt_Event_HOME_].
            xk_F1          = k ifTrue: [^ j java_awt_Event_F1_].
            xk_F2          = k ifTrue: [^ j java_awt_Event_F2_].
            xk_F3          = k ifTrue: [^ j java_awt_Event_F3_].
            xk_F4          = k ifTrue: [^ j java_awt_Event_F4_].
            xk_F5          = k ifTrue: [^ j java_awt_Event_F5_].
            xk_F6          = k ifTrue: [^ j java_awt_Event_F6_].
            xk_F7          = k ifTrue: [^ j java_awt_Event_F7_].
            xk_F8          = k ifTrue: [^ j java_awt_Event_F8_].
            xk_F9          = k ifTrue: [^ j java_awt_Event_F9_].
            xk_F10         = k ifTrue: [^ j java_awt_Event_F10_].
            xk_F11         = k ifTrue: [^ j java_awt_Event_F11_].
            xk_F12         = k ifTrue: [^ j java_awt_Event_F12_].
            xk_R13         = k ifTrue: [^ j java_awt_Event_END_].
            xk_End         = k ifTrue: [^ j java_awt_Event_END_].
            xk_F27         = k ifTrue: [^ j java_awt_Event_PGUP_].
            xk_Page_Up     = k ifTrue: [^ j java_awt_Event_PGUP_].
            xk_F35         = k ifTrue: [^ j java_awt_Event_PGDN_].
            xk_Page_Down   = k ifTrue: [^ j java_awt_Event_PGDN_].
            xk_Up          = k ifTrue: [^ j java_awt_Event_UP_].
            xk_Down        = k ifTrue: [^ j java_awt_Event_DOWN_].
            xk_Left        = k ifTrue: [^ j java_awt_Event_LEFT_].
            xk_Right       = k ifTrue: [^ j java_awt_Event_RIGHT_].
            -1.   "Note: we may have executed aBlk in this case, but it is alright
                   since returning -1 stops further processing of the event!").
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'xlib' -> 'events' -> 'xKeyEvent' -> () From: ( | {
         'Category: Java runtime\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_inst_hasControl = ( |
            | 
            0 != (state && controlMask)).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'xlib' -> 'events' -> 'xKeyEvent' -> () From: ( | {
         'Category: Java runtime\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_inst_tiny_awt_processEvent: tinyWindow = ( |
             ak <- bootstrap stub -> 'globals' -> 'false' -> ().
             key <- -1.
             keysym <- 0.
            | 
            lookupStringKeySym: [|:ks| keysym: ks].
            256 > keysym ifTrue: [
                key: (java_inst_handleAsciiKey: keysym).
            ] False:  [
                key: (java_inst_handleNonasciiKey: keysym IfAction: [ak: true]).
            ].
            -1 != key ifTrue: [
                awt_upcall: [java_inst_sendKeyEvent: key Window: tinyWindow ActionKey: ak].
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'xlib' -> 'events' -> 'xKeyPressedEvent' -> () From: ( | {
         'Category: Java runtime\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_inst_sendKeyEvent: key Window: tinyWindow ActionKey: ak = ( |
            | 
            ak ifTrue: [
                tinyWindow handleActionKey_J: java_inst_getTime
                                           I: x
                                           I: y
                                           I: key
                                           I: java_inst_getModifiers.
            ] False: [
                tinyWindow handleKeyPress_J: java_inst_getTime
                                          I: x
                                          I: y
                                          I: key
                                          I: java_inst_getModifiers.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'xlib' -> 'events' -> 'xKeyReleasedEvent' -> () From: ( | {
         'Category: Java runtime\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_inst_sendKeyEvent: key Window: tinyWindow ActionKey: ak = ( |
            | 
            ak ifTrue: [
                tinyWindow handleActionKeyRelease_J: java_inst_getTime
                                                  I: x
                                                  I: y
                                                  I: key
                                                  I: java_inst_getModifiers.
            ] False: [
                tinyWindow handleKeyRelease_J: java_inst_getTime
                                            I: x
                                            I: y
                                            I: key
                                            I: java_inst_getModifiers.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'xlib' -> 'events' -> 'xLeaveWindowEvent' -> () From: ( | {
         'Category: Java runtime\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_inst_tiny_awt_processEvent: tinyWindow = ( |
            | 
            awt_upcall: [
                tinyWindow handleMouseExit_J: java_inst_getTime
                                           I: x I: y.
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'xlib' -> 'events' -> 'xMapEvent' -> () From: ( | {
         'Category: Java runtime\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_inst_tiny_awt_processEvent: tinyWindow = ( |
            | 
            awt_upcall: [tinyWindow handleDeIconify].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'xlib' -> 'events' -> 'xMotionEvent' -> () From: ( | {
         'Category: Java runtime\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_inst_isMouseDrag = ( |
            | 
            0 != (state && (button1Mask || button2Mask || button3Mask))).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'xlib' -> 'events' -> 'xMotionEvent' -> () From: ( | {
         'Category: Java runtime\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_inst_tiny_awt_processEvent: tinyWindow = ( |
             m <- 0.
             t <- 0.
             tmpx <- 0.
             tmpy <- 0.
            | 
            m: java_inst_getModifiers.
            t: java_inst_getTime.
            tmpx: x.
            tmpy: y.
            java_inst_isMouseDrag ifTrue: [
                awt_upcall: [tinyWindow handleMouseDrag_J: t I: tmpx I: tmpy I: m].
            ] False: [
                awt_upcall: [tinyWindow handleMouseMove_J: t I: tmpx I: tmpy I: m].
            ].
            self).
        } | ) 

 bootstrap addSlotsTo: bootstrap stub -> 'traits' -> 'xlib' -> 'events' -> 'xUnmapEvent' -> () From: ( | {
         'Category: Java runtime\x7fModuleInfo: Module: pep InitialContents: FollowSlot\x7fVisibility: private'
        
         java_inst_tiny_awt_processEvent: tinyWindow = ( |
            | 
            pep javaRoot awt_upcall: [tinyWindow handleIconify].
            self).
        } | ) 



 '-- Sub parts'

 bootstrap read: 'pep_runtime' From: 'applications/pep'
 bootstrap read: 'pep_extensions' From: 'applications/pep'



 '-- Side effects'

 globals modules pep postFileIn
